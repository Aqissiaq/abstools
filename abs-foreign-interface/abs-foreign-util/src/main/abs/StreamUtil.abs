module FLI.StreamUtils;

export *;

import * from ABS.FLI;

data Feedback<A> = Error(String) | Result(A) | OK;
data Byte = Byte(Int);
data Long = Long(Int);

def Bool isError<A>(Feedback<A> f) = case f { Error(_) => True; _ => False; };
def Bool isResult<A>(Feedback<A> f) = case f { Result(_) => True; _ => False; };
def Bool isOK<A>(Feedback<A> f) = f == OK;

def String error<A>(Feedback<A> f) = case f { Error(s) => s; };
def A result<A>(Feedback<A> f) = case f { Result(a) => a; };

def Int fromByte(Byte b) = case b { Byte(i) => i; };
def Int fromLong(Long b) = case b { Long(i) => i; }; 

interface InputStream {
	Unit setInputStream([Near] InputStream s);
	Feedback<String> readUTF();
	Feedback<Int> readInt();
	Feedback<List<Byte>> read(List<Byte> b, Int off, Int len);
}

interface OutputStream {
	Unit setOutputStream([Near] OutputStream s);
	Feedback<Unit> writeUTF(String s);
	Feedback<Unit> writeLong(Long s);
	Feedback<Unit> writeInt(Int s);
	Feedback<Unit> write(List<Byte> b, Int off, Int len);
}

interface RandomAccessFile {
	Feedback<List<Byte>> readFully(List<Byte> b, Int off, Int len); 
	Feedback<Unit> seek(Int i);
}

[Foreign]
class InputStream implements InputStream {
	[Near] InputStream stream;
	
	Unit setInputStream([Near] InputStream s) { 
	    this.stream = s; 
	} 
	
	Feedback<String> readUTF() {
		Feedback<String> r = OK;
		if (stream != null) {
			r = stream.readUTF();
		} 
		return r;
	}
	
	Feedback<Int> readInt() { 
		Feedback<Int> r = OK;
		if (stream != null) {
			r = stream.readInt();
		} 
		return r;
 	}
 	
	Feedback<List<Byte>> read(List<Byte> b, Int off, Int len) {
		Feedback<List<Byte>> r = OK;
		if (stream != null) {
			r = stream.read(b,off,len);
		} 
		return r; 
	}
}

[Foreign]
class OutputStream implements OutputStream {
	[Near] OutputStream stream;

	Unit setOutputStream([Near] OutputStream s) {
		this.stream = s;
	}
	
	Feedback<Unit> writeUTF(String s) { 
		Feedback<Unit> r = OK;
		if (stream != null) {
			r = stream.writeUTF(s);
		}
		return r; 
	}
	
	Feedback<Unit> writeLong(Long s) { 
		Feedback<Unit> r = OK;
		if (stream != null) {
			r = stream.writeLong(s);
		}
		return r; 
	}
	
	Feedback<Unit> writeInt(Int s) { 
		Feedback<Unit> r = OK;
		if (stream != null) {
			r = stream.writeInt(s);
		}
		return r; 
	}
	
	Feedback<Unit> write(List<Byte> b, Int off, Int len) { 
		Feedback<Unit> r = OK;
		if (stream != null) {
			r = stream.write(b,off,len);
		}
		return r; 
	}
}