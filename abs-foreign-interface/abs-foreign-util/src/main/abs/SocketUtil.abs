module FLI.SocketUtils;

export *;

import * from ABS.FLI;
import * from FLI.StreamUtils;

interface Socket {
	Unit put(Socket socket);
	Feedback<Unit> connect(String server, Int port, Int timeout);
	InputStream getInputStream();
	OutputStream getOutputStream();
	Feedback<Unit> close();
	Bool isConnected();
}

interface ServerSocket {
	Unit putServer(ServerSocket socket);
 	Feedback<Unit> bind(Int port);
	Feedback<Socket> accept();
	Bool isClosed();
}

[Foreign]
class Socket implements Socket {
	Socket socket = null;
	
	Unit put(Socket socket) { 
		this.socket = socket; 
	}
	
	Feedback<Unit> connect(String server, Int port, Int timeout) { 
		Feedback<Unit> r = OK;
		if (socket != null) {
			r = socket.connect(server,port,timeout);
		}
		return r;  
	}
	
	InputStream getInputStream() { 
		InputStream s = null;
		if (socket != null) {
			s = socket.getInputStream();
		}
		return s;
	}
	
	OutputStream getOutputStream() { 
		OutputStream s = null;
		if (socket != null) {
			s = socket.getOutputStream();
		}	
		return s; 
	}
	
	Feedback<Unit> close() { 
		Feedback<Unit> r = OK;
		if (socket != null) {
			r = socket.close();
		}
		return r;
	}
	
	Bool isConnected() { 
		Bool r = False;
		if (socket != null) {
			r = socket.isConnected();
		}
		return r;
	}
}

[Foreign]
class ServerSocket implements ServerSocket {
	ServerSocket socket = null;
	
	Unit putServer(ServerSocket socket) {
		this.socket = socket;
	}
	 
	Feedback<Unit> bind(Int port) { 
		Feedback<Unit> r = OK;
		if (socket != null) {
			r = socket.bind(port);
		}
		return r;
	}
	
	Feedback<Socket> accept() { 
		Feedback<Socket> r = OK;
		if (socket != null) {
			r = socket.accept();
		}
		return r;
	}
	
	Bool isClosed() { 
		Bool r = False;
		if (socket != null) {
			r = socket.isClosed();
		}
		return r;
	}
}