module AbsUnit.Tests;

export ABSUnitTest, ABSUnitTestClass;

import * from AbsUnit;
import * from ABSUnit.Hamcrest;
import * from ABSUnit.Hamcrest.Core;

[TestClass]
interface ABSUnitTest { 
	[DataPoint] Set<Pair<Int,Int>> comparators();
	[Test] Unit testAssertTrue();
	[Test] Unit testAssertFalse();
	[Test] Unit testAssertEquals(Pair<Int,Int> comp);
	[Test] Unit testAssertNotEquals();
	[Test] Unit testAssertThat();
}

[TestClassImpl]
class ABSUnitTestClass implements ABSUnitTest {
	
	Set<Pair<Int,Int>> comps = EmptySet;
	ABSAssert aut;
	
	{
		aut = new ABSAssertImpl(); // AUT
		comps = set[Pair(1,1),Pair(2,2),Pair(3,3),Pair(4,4)]; //demo
	}
	
	Set<Pair<Int,Int>> comparators() {
		return comps;
	}
	
	Unit testAssertTrue() {
		aut.assertTrue(True);	
	}
	
	Unit testAssertFalse() {
		aut.assertFalse(False);
	}
	
	Unit testAssertEquals(Pair<Int,Int> comp) {
		Comparator c = new IntComparator(fst(comp),snd(comp));
		aut.assertEquals(c);
	}
	
	Unit testAssertNotEquals() {
		Comparator c1 = new IntComparator(1,2);
		Comparator c2 = new IntComparator(2,1);
		aut.assertNotEquals(c1);
		aut.assertNotEquals(c2);
	}
	
	Unit testAssertThat() {
		Comparator c = new IntComparator(1,2);
		Matcher m1 = new LessThan(c);
		Matcher m2 = new MoreThan(c);
		Matcher m3 = new Is(c);
		
		Matcher tt = new TrueMatcher();
		Matcher ff = new FalseMatcher();
		Set<Formula> fs = set[fm(ff),fm(ff),fm(tt),fm(ff),fm(ff)];
		
		Formula f = And(And(fm(m1),Not(Or(fm(m2),fm(m3)))),AnyOf(fs));
		Matcher corem = new CoreMatcher(f);
		
		aut.assertThat(corem);
	}
	
}

class TrueMatcher implements Matcher {
	Bool matches() {
		return True;
	}
}

class FalseMatcher implements Matcher {
	Bool matches() {
		return False;
	}
}

class IntComparator(Int expected, Int actual) implements Comparator {
	Int compare() { 	
		return expected - actual;	
	}
}