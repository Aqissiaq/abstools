module AbsUnit;

export *;

[TypeAnnotation]
data DataPoint = DataPoint; //data function

[TypeAnnotation]
data Test = Test; //test method

[TypeAnnotation]
data TestClass = TestClass; //test class

[TypeAnnotation]
data TestClassImpl = TestClassImpl; //test class implementation

data TestData<A> = TestData(A);

interface Comparator { 
	Int compare(); 
}

interface ABSAssert {
	Unit assertTrue(Bool value);
	Unit assertFalse(Bool value);
	Unit assertEquals(Comparator comp);
	Unit assertNotEquals(Comparator comp);	
}

class ABSAssertImpl implements ABSAssert {
	
	Unit assertTrue(Bool value) {
		if (~value) {
			// collect result
			assert False;
		} 
	}
	
	Unit assertFalse(Bool value) {
		if (value) {
			// collect result
			assert False;
		} 
	}
	
	Unit assertEquals(Comparator comp) {
		Int result = comp.compare();
		if (result != 0) {
			// collect result
			assert False;
		}
	}
	
	Unit assertNotEquals(Comparator comp) {
		Int result = comp.compare();
		if (result == 0) {
			// collect result
			assert False;
		}		
	}
	
}

interface Matcher {
    [Near] Bool matches();
	[Near] Matcher equalsTo([Near] Comparator comp);
	[Near] Matcher or([Near] Matcher matcher);
	[Near] Matcher and([Near] Matcher matcher);
	[Near] Matcher not([Near] Matcher matcher);
}

class MatcherImpl implements Matcher {

	[Near] Bool matches() {
		return False;
	}

	[Near] Matcher equalsTo([Near] Comparator comp) {
		return null;
	}
	
	[Near] Matcher or([Near] Matcher matcher) {
		return null;
	}
	
	[Near] Matcher and([Near] Matcher matcher){
		return null;
	}
	
	[Near] Matcher not([Near] Matcher matcher){
		return null;
	}
}


	
	