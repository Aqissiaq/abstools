     -------
     ABS Tools
     -------
     -------
     -------

The ABS Tool Suite

  This site contains information about the ABS tools suite.
  The Abstract Behavioral Specification Language (ABS) is a concurrent
  object-oriented modeling language that features functional data-types.
  The current language specification is available as a {{{./download/abslangspec.pdf}PDF file}}.

%{toc}

* Core Tools

  The ABS core tools consist of 

    [[1]] A parser and syntax-checker

    [[2]] A type-checker and semantic analyser

    [[3]] A Java code generator

    [[4]] A Maude code generator

  The ABS core tools are all contained in the {{{./download/absfrontend.jar}absfrontend.jar}} JAR file. The tools should be executable on all systems with an installed Java Runtime Environment (JRE). The minimal required version is JRE 1.6.

** Syntax- and Type-Checking

  To check an ABS model (a set of ABS files) for syntax and type-errors, run

---
java -jar absfrontend.jar <absfiles>
---

** Java Code Generation and Execution

  Java code generation is done by the ABS Java backend.

*** Java Code Generation

  To generate Java code from an ABS model, run

---
java -cp absfrontend abs.backend.java.JavaBackend -d <targetdir> <absfiles>
---

  If the command is successful it will generate Java source and JVM class files into the <<<<targetdir>>>> directory.

*** Executing Generated Java Code
  
  The Java backend generates for every Main block that exists in an ABS model, a corresponding <<<Main>>> class that contains a standard Java <<<main>>> method. Thus, the generated Java code can be executed like any other standard Java code by using the <<<java>>> command. The generated Java code relies on a runtime library (included in the {{{./download/absfrontend.jar}absfrontend.jar}}), which must be provided when executing the system.
To execute the code generated can use the following command on the command line:

---
java -cp <targetdir>:absfrontend.jar <MainModule>.Main
---

  where <<<<targetdir>>>> is the directory that contains the generated Java classes and <<<<MainModule>>>> is the name of the module that contains the main block.


** Maude Code Generation and Execution

  The Maude backend is responsible for generating Maude code from ABS models.
{{{http://maude.cs.uiuc.edu/}Maude}} is a tool for executing models defined in rewriting logic.

*** Maude Code Generation

  To generate Maude code run

---
java -cp absfrontend.jar abs.backend.maude.MaudeCompiler <absfiles> -o <outputfile>.maude
---

  This will generate a file Maude file <<<<outputfile>.maude>>>.

*** Maude Execution

  To execute the generated Maude file, load the file into Maude. 
  When loading, Maude expects the file {{{./download/abs-interpreter.maude}abs-interpreter.maude}} to be either already
loaded, in the same directory as the generated file or in a
directory included in the environment variable <<<MAUDE_LIB>>>.
The model's main block is started by the following command:

---
rew start .
---

  The result of evaluating is a dump of the complete system state of
the model, with one Maude term for each class, cog, object, and future
variable.

* Product Selection and Validation

  Product selections are validated with respect to a given feature model using the mTVL tools. These tools are provided by the {{{./download/mtvl.jar}mtvl.jar}} file. Note that this JAR file depends on the {{{./download/absfrontend.jar}absfrontend.jar}} file. To execute the mTVL tools use

---
java -jar mtvl.jar
---

  make sure in that case that the {{{./download/absfrontend.jar}absfrontend.jar}} file is located in the same directory as the {{{./download/mtvl.jar}mtvl.jar}} file.

* Integrated Development Environment

  ABS features an Integrated Development Environment (IDE) for writing ABS models. The IDE is realized as an Eclipse plug-in for the current Eclipse distribution version 3.6 (Helios). It can be installed by using the standard Eclipse installation routine via the update site {{http://tools.hats-project.eu/update-site}}.

  {{{./eclipseplugin/installation.html}More information}}

* COSTABS

  COSTABS is a research prototype which performs automatic program analysis and which is able to infer cost and termination information about ABS programs (more information on ABS can be found here). The system receives as input an ABS program and a cost model chosen from a selection of resource descriptions and tries to bound the resource consumption of the program with respect to the cost model. COSTABS provides several notions of resource: number of instructions, size of functional data, number of concurrent objects and number of spawned tasks.

  When performing cost analysis, COSTABS produces a cost equation system, which is an extended form of recurrence relations. In order to obtain a closed (i.e., non-recursive) form for such recurrence relations which represents an upper bound, COSTABS includes a dedicated solver called PUBS. An interesting feature of COSTABS is that it uses pretty much the same machinery for inferring upper bounds on cost as for proving termination (which also implies the boundedness of any resource consumption).

  The COSTABS web interface allows users to try out the system on a set of representative examples, and also to upload their own programs.

  {{{http://costa.ls.fi.upm.es/costabs}COSTABS Web Interface}}

* Dependency Management

  ABS is supported by {{{http://maven.apache.org}Maven}} dependency management system. 
  
  Maven is based on the concept of a project object model (POM), Maven can manage a project's build, 
reporting and documentation from a central piece of information.  

  Maven support for ABS features a abs-maven-plugin that provides functionality to 
  
   * compile, generate backend codes from ABS models
   
   * execute test cases written in ABS 
   
   * package ABS models into standard ABS packages (APK)
   
   * deploy ABS packages as reusable artifacts into a global repository
   
  {{{./maven-support.html}More information}}
   
