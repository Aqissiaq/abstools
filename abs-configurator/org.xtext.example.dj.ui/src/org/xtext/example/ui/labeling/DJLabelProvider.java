/*
* generated by Xtext
*/
package org.xtext.example.ui.labeling;

import java.util.ListIterator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.xtext.example.dJ.AddsField;
import org.xtext.example.dJ.AddsMethod;
import org.xtext.example.dJ.Class;
import org.xtext.example.dJ.Classm;
import org.xtext.example.dJ.Constructor;
import org.xtext.example.dJ.Feature;
import org.xtext.example.dJ.Field;
import org.xtext.example.dJ.FieldRef;
import org.xtext.example.dJ.Import;
import org.xtext.example.dJ.Method;
import org.xtext.example.dJ.MethodRef;
import org.xtext.example.dJ.ModifiesMethod;
import org.xtext.example.dJ.Module;
import org.xtext.example.dJ.Parameter;
import org.xtext.example.dJ.Program;
import org.xtext.example.dJ.RemovesField;
import org.xtext.example.dJ.RemovesMethod;
import org.xtext.example.dJ.Type;
import org.xtext.example.util.ContainingClassmFinded;
import org.xtext.example.util.ContainingMethodFinded;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class DJLabelProvider extends DefaultEObjectLabelProvider {
	
	String image(Module ele) {
		return ele.getNtype() + ".gif";
	}
	
	String image(Feature ele) {
		return "feature.gif";
	}
	
	String image(Class ele) {
		return "class_obj.gif";
	}
	
	String image(Classm ele) {
		if (ele.getAction().equals("adds")) {
			return "add.gif";
		} else if (ele.getAction().equals("modifies")) {
			return "class_obj.gif";
		} else if (ele.getAction().equals("remove")) {
			return "remove.jpg";
		}
		
		return "";
	}
	
	String image(Import ele) {
		return "import.gif";
	}
	
	String image(Program ele) {
		return "program.gif";
	}
	
	String image(Constructor constructor) {
		return "class_obj.gif";
	}

	String image(Field field) {
			return "field_public_obj.gif";
	}
	
	String image(AddsField field) {
		return "field_public_obj.gif";
	}
	
	String image(RemovesField field) {
		return "field_required_obj.png";
	}
	
	String image(MethodRef m) {
		return "methdef_obj.gif";
	}
	
	String image(Method m) {
		return image(m.getReference());
	}
	
	String image(AddsMethod m) {
		return "methdef_obj.gif";
	}
	
	String image(ModifiesMethod m) {
		return "methdef_obj.gif";
	}
	
	String image(RemovesMethod m) {
		return "methodrequest_obj.png";
	}
	
	String text(Module ele) {
		String nType = ele.getNtype();
		
		if(nType.equals("core")) {
			return "core";
		} else if(nType.equals("delta")) {
			return ele.getDelta().getName();
		}
		
		return "";
	}
	
	String text(Import imp) {
		return imp.getImportURI();
	}
	
	String text(Class c) {
		return c.getName();
	}
	
	String text(Classm c) {
		String action = c.getAction();
		
		if(action.equals("adds")) {
			return c.getAdds().getClass_().getName();
		} else if(action.equals("modifies")) {
			return c.getModifies().getClass_().getName();
		} else if(action.equals("remove")) {
			return c.getRemove().getClass_().getName();
		}
		
		return "";
	}
	
	String text(Constructor constructor) {
		return (constructor.getName() != null ? constructor.getName().getName() : "???") + "(" + listToText(constructor.getParams()) + ")";
	}
	
	String text(FieldRef f) {
		return text(new ContainingClassmFinded().lookup(f));
	}

	String text(Field f) {
		return f.getReference().getName() + " : " + text(f.getType());
	}
	
	String text(Type type) {
		return (type.getClassref() != null ? type.getClassref().getName()
				: type.getBasic());
	}

	String text(MethodRef m) {
		return m.getName() + "(" + listToText((EList<Parameter>)(new ContainingMethodFinded().lookup(m).getParams())) + ") : "
				+ text(new ContainingMethodFinded().lookup(m).getReturntype());
	}
	
	String text(AddsField f) {
		return text(f.getField());
	}
	
	String text(RemovesField f) {
		return text(f.getFieldRef());
	}
	
	String text(Method m) {
		return text(m.getReference());
	}
	
	String text(AddsMethod m) {
		return text(m.getMethod());
	}
	
	String text(ModifiesMethod m) {
		return text(m.getMethodRef());
	}
	
	String text(RemovesMethod m) {
		return text(m.getMethodRef());
	}
	
	String text(Parameter param) {
		return text(param.getType()) + " " + param.getName();
	}
/*
	//Labels and icons can be computed like this:
	
	String text(MyModel ele) {
	  return "my "+ele.getName();
	}
	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/	
	private String listToText(EList<Parameter> list) {
		StringBuffer buffer = new StringBuffer();
		ListIterator<Parameter> it = list.listIterator();
		while (it.hasNext()) {
			buffer.append(text(it.next()));
			if (it.hasNext())
				buffer.append(", ");
		}
		return buffer.toString();
	}
}
