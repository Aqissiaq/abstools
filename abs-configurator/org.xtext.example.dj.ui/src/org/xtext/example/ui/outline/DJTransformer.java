/*
* generated by Xtext
*/
package org.xtext.example.ui.outline;

import java.util.LinkedList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.xtext.example.dJ.*;
import org.xtext.example.dJ.Class;

/**
 * customization of the default outline structure
 * 
 */
public class DJTransformer extends AbstractDeclarativeSemanticModelTransformer {
	
	protected List<EObject> getChildren(Module element) {
		if(element == null || element.getNtype() == null) {
			return NO_CHILDREN;
		}
		else if(element.getNtype().equals("core")) {
			return toList(element.getCore().getClassesList());
		} else if(element.getNtype().equals("delta")) {
			return toList(element.getDelta().getClassesList());
		}
		
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(Class element) {
		List<EObject> result = toList(element.getField());
		result.addAll(element.getConstructor());
		result.addAll(element.getMethod());
		
		return result;
	}
	
	protected List<EObject> getChildren(Classm element) {
		if(element == null) return NO_CHILDREN;
		String action = (element.getAction() == null ? "" : element.getAction());
		
		if(action.equals("adds")) {
			return getChildren(element.getAdds().getClass_());
		} else if(action.equals("modifies")) {
			List<EObject> result = new LinkedList<EObject>();
			ModifiesClass mod = element.getModifies();
			if(mod != null && mod.getField() != null) {
				Fieldm fieldList = mod.getField();
				result.addAll(toList(fieldList.getRemoveList()));
				result.addAll(toList(fieldList.getAddsList()));
			}
			
			if(mod.getConstructor() != null) {
				result.add(mod.getConstructor());
			}
			
			if(mod.getMethod() != null) {
				Methodm methodList = mod.getMethod();
				
				result.addAll(methodList.getRemoveList());
				result.addAll(methodList.getModifiesList());
				result.addAll(methodList.getAddsList());	
			}
			
			return result;
		} else if(action.equals("remove")) {
			return NO_CHILDREN;
		}
		
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(Field element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(Constructor element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(Method element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(AddsMethod element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(ModifiesMethod element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(RemovesMethod element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(AddsField element) {
		return NO_CHILDREN;
	}
	
	protected List<EObject> getChildren(RemovesField element) {
		return NO_CHILDREN;
	}
	/* SERVICE METHODS */
	
	private List<EObject> toList(EList<? extends EObject> list) {
		List<EObject> resultList = new LinkedList<EObject>();
		
		for(EObject obj : list) {
			resultList.add(obj);
		}
		
		return resultList;
	}
}
