/*
k* generated by Xtext
*/
package org.xtext.example.ui.contentassist;

import java.util.Collection;
import java.util.ListIterator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xtext.example.dJ.Constructor;
import org.xtext.example.dJ.MethodBody;
import org.xtext.example.dJ.Parameter;
import org.xtext.example.lookup.AuxiliaryFunctions;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class DJProposalProvider extends AbstractDJProposalProvider {
	@Override
	public String getDisplayString(EObject element, String qualifiedName, String shortName) {
		return getLabelProvider().getText(element);
	}

	@Override
	public void completeNew_Type(EObject model, 
			                     Assignment assignment, 
                                 ContentAssistContext context, 
                                 ICompletionProposalAcceptor acceptor) {
		try{EObject current = model;
		while(current != null && !(current instanceof MethodBody)) {
			current = current.eContainer();
		}
		
		if (current == null) return;
		MethodBody body = (MethodBody)current;
		Collection<Constructor> constructorList = new AuxiliaryFunctions().getAllAvailableConstructors(body);
		
		for(Constructor k : constructorList) {
			System.err.println("ADD START");
			acceptor.accept(createCompletionProposal(complete(k),
                                                     getLabelProvider().getText(k), 
                                                     getLabelProvider().getImage(k), 
                                                     context));
			System.err.println("ADDING: " + complete(k));
		}}catch(Exception ex){System.err.println(ex);ex.printStackTrace();}
	}
	
	/* SERVICE METHODS */
	
	private String complete(Constructor k) {
		return (k.getName() != null ? k.getName().getName() : "???") + "(" + listToText(k.getParams()) + ")";
	}
	
	private String listToText(EList<Parameter> list) {
		StringBuffer buffer = new StringBuffer();
		ListIterator<Parameter> it = list.listIterator();
		while (it.hasNext()) {
			buffer.append(it.next().getName());
			if (it.hasNext())
				buffer.append(", ");
		}
		return buffer.toString();
	}
}
