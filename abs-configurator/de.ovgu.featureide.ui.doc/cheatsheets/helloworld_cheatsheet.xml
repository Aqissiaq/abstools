<?xml version="1.0" encoding="UTF-8" ?> 
<cheatsheet title="First FeatureIDE Project">
	<intro
       href="/de.ovgu.featureide.ui.doc/html/fosd.html">
		<description>
Welcome to the FeatureIDE tutorial.<br/>
This tutorial will help you to build your first FeatureIDE project. After you have finished this tutorial, you will have a simple Hello World software product line. If you have problemes at a certain step, you can get the final result using File-&gt; New-&gt; Example.<br/><br/>
The first step for your product line is domain engineering. Here you think about what features to provide for your product. For further information about software product line engineering use the help button. This picture will show you the basic idea between domain engineering and application engineering.<br/><br/>
Let&apos;s get started!
</description>
</intro>
	<item
       href="/org.eclipse.platform.doc.user/concepts/concepts-4.htm"
       skip="true"
       title="Open the FeatureIDE Perspective">
		<action
			pluginId="org.eclipse.ui.cheatsheets"
			class="org.eclipse.ui.internal.cheatsheets.actions.OpenPerspective"
			param1="de.ovgu.featureide.ui.FeatureIDEperspective"/>
		<description>
Change the perspective to the <b>FeatureIDE</b> perspective. You can use the button on the upper right corner of the workbench.<br/><br/>
Click &quot;Click to Perform&quot; to open the &quot;FeatureIDE&quot; perspective automatically.
		</description>
</item>
 <item
       title="Create a new FeatureIDE Project">
    		
    <description>
Next, create a new project. You can find the <b>FeatureProject</b> wizard under File-&gt; New. You can also click &quot;Start Wizard&quot; to start the wizard.<br/><br/>
In the wizard you can select different composition engines. Select AHEAD for this tutorial.<br/>
(You can find a short introduction to alternative composition engines at the end of this cheat sheet)<br/>
On the next page, choose a project name. For example &quot;HelloWorld&quot;.
    </description>
    <command
          required="false"
          serialization="org.eclipse.ui.newWizard(newWizardId=de.ovgu.featureide.ui.FeatureProjectWizard)"/>
 </item>
 <item
         href="/de.ovgu.featureide.ui.doc/html/featuremodel.html"
         title="Edit the feature model">
    <description>
       Now its time to create a feature model specifying the features and their valid combinations.
    </description>
    <subitem
          label="After creation of the project, FeatureIDE opens the model.xml file. You will see a graphical editor where you can edit the feature model of your software product line.">
    </subitem>
      <subitem
            label="First, create two additional layers under your root feature. Right click on the root feature and select &quot;Create Feature (below)&quot; twice. Rename the first new feature to &quot;Hello&quot;, and the second to &quot;World&quot;. You can rename features using F2, a single click on a selected feature, or using a right click with the option at the context menu."
            skip="false">
      </subitem>
      <subitem
            label="Rename the feature (Base) to &gt;Beautiful&gt; and move it between the features (Hello) and (World). Now, create a feature (Wonderful) and move it between the features (Beautiful) and (World).">
      </subitem>
      <subitem
            label="Now, we want to make the features (Beautiful) and (Wonderful) exclusive to each other. Select both features, create a new compound above using right click menu, and name it (Feature). As this feature has no according implementation mark it as abstract using the context menu.">
      </subitem>
      <subitem
            label="Connections between feature and its group of children are distinguished as And- (no arc), Or- (filled ar) and Alternative-groups (unfilled arc). The children of And-groups can either be mandatory (filled circle) or optional (unfilled circle)."
            skip="true">
      </subitem>
      <subitem
            label="Double click on the connection below the feature (Feature) to change it to an Or-group and again to change it to an Alternative-group. Then double click on the features (Hello) and (World) to mark them as mandatory. Click on the help button, to see how your feature model should look like.">
      </subitem>
 </item>
 <item
       title="Create new Jak files">
    <description>
After you have saved your feature model, FeatureIDE will create directories for each feature. In these directories you can create Jak-Files.<br/><br/>
Start with creating a new Jak-file in the directory Hello: Right click on the directory and use the context-item New-&gt;FeatureIDE File. Choose the identifier &quot;Main&quot; for the class name and press (Finish).<br/><br/>
FeatureIDE opens the file and you can write the following code:<br/><br/>
public void print(){<br/>
  System.out.print(&quot;Hello&quot;);<br/>
}<br/>
public static void main(String[] args) {<br/>
  new Main().print();<br/>
}
    </description>
    <subitem
          label="Now create more Jak files. Create one in each of the directories &quot;Beautiful&quot;, &quot;Wonderful&quot; and &quot;World&quot;. In these cases,  activate the option &quot;Refines&quot; in the Wizard. Furthermore, all the Jak files must have the same name Main.">
    </subitem>
 </item>
 <item
       title="Source code for the Jak files">
    <description>
       Now edit the remaining jak-Files. Every feature will refine the method print() in the class Main.<br/><br/> Now insert the following code in your world feature: <br/> <br/>
	public void print() {<br/>
		Super().print();<br/>
		System.out.print(&quot; world!&quot;);<br/>
	}<br/><br/>
	In the other files you can insert the same code and just change the print method.<br/>
For example:<br/>
System.out.print(&quot; wonderful&quot;); in the &quot;Wonderful&quot; feature.<br/>System.out.print(&quot; beautiful&quot;);<br/> in the &quot;Beautiful&quot; feature.
    </description>
 </item>
 <item
       title="Configuration File">
    <description>
       After you designed your feature model, and source code, you want to generate a variant (a product of your product line). To specify a variant, you have to provide a feature selection in a &quot;configuration&quot; file. <br/><br/>
Create a new configuration file with the according wizard.
    </description>
    <subitem
          label="Open the configuration file and select the features you want to activate for your variant. After you have saved the file, FeatureIDE will compose your features and compile the generated Java code.">
    </subitem>
 </item>
 <item
       title="Start your application">
    <description>
       Now it&apos;s time to start your application. Right click on the project in package explorer and choose &quot;Run As&gt;Java Application&quot;. Choose a class name without &quot;$$&quot; in the name and enjoy your Hello Beautiful Wonderful Word application! The next time you want to start your application simply use the run button in the eclipse tool bar.
    </description>
 </item>
 <item
       title="Checkout our examples">
    <description>
      You can access our examples using &quot;New&gt;Examples...&quot; in package explorer. We provide an HelloWorld example for every FeatureIDE extension, which may help to create projects in other languages and with other composition mechanisms.
    </description>
 </item>
 <item
 	title="Composer Overview">
 	<description>
 	You have already learned how to create a FeatureIDE project that uses the AHEAD composer. In FeatureIDE you can also use FeatureC++, FeatureHouse, AspectJ, DeltaJ, Munge, and Antenna. The following section gives a short introduction to each of them.
 	</description>
 	<subitem>
 	<description>
 	<b>AHEAD</b><br/><br/>
 	You have already used the AHEAD composer in the FeatureIDE tutorial. It supports composition of Jak files. Jak extends Java with keywords for Feature-Oriented-Programming.<br/> <br/>
 	Keywords: <br/>
	refines: used to specify refinements of an existing class. <br/>
	super: used to call a refined method . 	<br/><br/>
	Example:<br/>
	public refines class Main {<br/>
	public void print() {<br/>
		Super().print();<br/>
		System.out.print(" world!");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
	<subitem>
 	<description>
 	<b>FeatureC++</b><br/><br/>
 	FeatureC++ is a C++ language extension to support Feature-Oriented Programming (FOP). The extension of C++ is similar to the Java extension (Jak) by AHEAD.<br/> <br/>  
 	Keywords: <br/>
	refines: used to specify refinements of an existing class. <br/>
	super: used to call a refined method . 	<br/><br/>
	Example:<br/>
	refines class Main {<br/>
	public:<br/>
	int run() { <br/>
		int res = super::run(); <br/>
		if (res!=0)<br/>
			return res;<br/>
		printf(" World!");<br/>
		return 0;<br/>
	}<br/>
	};<br/>
 	</description>
 	</subitem>
 	
 	 	<subitem>
 	<description>
 	<b>FeatureHouse</b><br/><br/>
 	FeatureHouse is language-independent in that software artifacts written in various languages can be composed, e.g., source code, test cases, models, documentation, makefiles.
 	Currently, FeatureHouse provides support for the composition of software artifacts written in Java, C#, C, Haskell, JavaCC, Alloy and UML.<br/> <br/>  
 	Keywords: <br/>
	original(): used to call a refined method.<br/><br/>
	Example: (Java)<br/>
	public class Main {<br/>
	protected void print() {<br/>
	original();<br/>
	System.out.print(" World!");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>AspectJ</b><br/><br/>
 	AspectJ is a aspect-oriented extension of Java. In FeatureIDE each feature corresponds to one aspect. 	<br/><br/>
 	Example:<br/>
 
 	public aspect Wonderful {<br/>
	after(): call(void Main.print()) {<br/>
		System.out.print(" wonderful");<br/>
	}<br/>
	}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>DeltaJ</b><br/><br/>
 	DeltaJ is a Java-like language supporting Delta-Oriented-Programming. 
 	Delta-Oriented-Programming is similar to Feature-Oriented-Programming 
 	but each project contains of one core module and a set of delta modules. 
	A core module is a simple collection of classes, while a delta module is a set of operations that allow to add a new class and modify or remove classes declared in other delta or core modules.<br/><br/>
 	Keywords: <br/>
 	modifies: used to specify a refined class or method<br/>
 	original(): used to call a refined method<br/>
 	delta: used to specify a delta module<br/>
 	core: used to specify a core module<br/>
 	after: used to specify module dependencies (the current module depends on the list of modules following the after keyword)<br/><br/>
 	Example:<br/>
 	delta Wonderful after Beautiful when Wonderful{<br/>
	modifies class Main{<br/>
		modifies void print() {<br/>
			original();<br/>
			new SystemOutWrapper().print(" wonderful");<br/>
		}<br/>
	}<br/>
	}<br/>	
	NOTE: a core module includes a lines specifying features and configurations. In FeatureIDE these lines are modified automatically.<br/>
 		
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>Munge</b><br/><br/>
 	Munge is a purposely-simple Java preprocessor. When using Munge you can use Munge-style Java comments to specify the mapping between parts of code and features.<br/><br/>
 	Example:<br/>
 	public class Main {<br/>
	public static void main(String[] args){<br/>
		/*if[Hello]*/<br/>
		System.out.print("Hello");<br/>
		/*end[Hello]*/<br/>
		/*if[Beautiful]*/	<br/>
		System.out.print(" beautiful");<br/>
		/*end[Beautiful]*/<br/>
		/*if[Wonderful]*/	<br/>
		System.out.print(" wonderful");	<br/>
		/*end[Wonderful]*/<br/>
		/*if[World]*/		<br/>
		System.out.print(" world!");<br/>
		/*end[World]*/<br/>
	}<br/>
}<br/>
 	</description>
 	</subitem>
 	 	<subitem>
 	<description>
 	<b>Antenna</b><br/><br/>
 	Antenna is a Java preprocessor. You can use Antenna-style Java comments to specify the mapping between parts of code and features.<br/><br/>
 	Example:<br/>
 			//#if Hello<br/>
		System.out.print("Hello");<br/>
		//#endif<br/>
		//#if Beautiful<br/>
		System.out.print(" beautiful");<br/>
		//#endif<br/>
		//#if Wonderful<br/>
		System.out.print(" wonderful");	<br/>
		//#endif<br/>
		//#if World<br/>
		System.out.print(" world!");<br/>
		//#endif<br/>
	}<br/>
 
 	</description>
 	</subitem>
 	</item>
</cheatsheet>
