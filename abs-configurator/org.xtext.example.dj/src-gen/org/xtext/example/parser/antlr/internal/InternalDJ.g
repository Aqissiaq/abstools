/*
* generated by Xtext
*/
grammar InternalDJ;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.example.services.DJGrammarAccess;

}

@parser::members {

 	private DJGrammarAccess grammarAccess;
 	
    public InternalDJParser(TokenStream input, IAstFactory factory, DJGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/example/parser/antlr/internal/InternalDJ.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected DJGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProgramRule(), currentNode); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getFeaturesFeaturesParserRuleCall_1_0(), currentNode); 
	    }
		lv_features_1_0=ruleFeatures		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"features",
	        		lv_features_1_0, 
	        		"Features", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProgramAccess().getModulesListModuleParserRuleCall_2_0(), currentNode); 
	    }
		lv_modulesList_2_0=ruleModule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProgramRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"modulesList",
	        		lv_modulesList_2_0, 
	        		"Module", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleFeatures
entryRuleFeatures returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFeaturesRule(), currentNode); }
	 iv_ruleFeatures=ruleFeatures 
	 { $current=$iv_ruleFeatures.current; } 
	 EOF 
;

// Rule Features
ruleFeatures returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'features' 
    {
        createLeafNode(grammarAccess.getFeaturesAccess().getFeaturesKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFeaturesAccess().getFeaturesListFeatureParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_featuresList_1_0=ruleFeature		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeaturesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"featuresList",
	        		lv_featuresList_1_0, 
	        		"Feature", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFeaturesAccess().getCommaKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFeaturesAccess().getFeaturesListFeatureParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_featuresList_3_0=ruleFeature		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeaturesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"featuresList",
	        		lv_featuresList_3_0, 
	        		"Feature", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)	'configurations' 
    {
        createLeafNode(grammarAccess.getFeaturesAccess().getConfigurationsKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFeaturesAccess().getConfigurationConfigurationParserRuleCall_3_0(), currentNode); 
	    }
		lv_configuration_5_0=ruleConfiguration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeaturesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"configuration",
	        		lv_configuration_5_0, 
	        		"Configuration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFeatureRule(), currentNode); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getModuleAccess().getModuleAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModuleAccess().getModuleAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		lv_ntype_1_0=	'core' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getNtypeCoreKeyword_0_1_0_0(), "ntype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ntype", lv_ntype_1_0, "core", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getCoreCoreParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_core_2_0=ruleCore		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"core",
	        		lv_core_2_0, 
	        		"Core", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |((
(
		lv_ntype_3_0=	'delta' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getNtypeDeltaKeyword_1_0_0(), "ntype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ntype", lv_ntype_3_0, "delta", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getDeltaDeltaParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_delta_4_0=ruleDelta		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delta",
	        		lv_delta_4_0, 
	        		"Delta", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleCore
entryRuleCore returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCoreRule(), currentNode); }
	 iv_ruleCore=ruleCore 
	 { $current=$iv_ruleCore.current; } 
	 EOF 
;

// Rule Core
ruleCore returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCoreAccess().getNameFeatureCrossReference_0_0(), "name"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCoreAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCoreAccess().getNameFeatureCrossReference_1_1_0(), "name"); 
	}

)
))*	'{' 
    {
        createLeafNode(grammarAccess.getCoreAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCoreAccess().getClassesListClassParserRuleCall_3_0(), currentNode); 
	    }
		lv_classesList_4_0=ruleClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classesList",
	        		lv_classesList_4_0, 
	        		"Class", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getCoreAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassRule(), currentNode); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'class' 
    {
        createLeafNode(grammarAccess.getClassAccess().getClassKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getClassAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getClassAccess().getExtendsClassCrossReference_2_1_0(), "extends"); 
	}

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getFieldFieldParserRuleCall_4_0(), currentNode); 
	    }
		lv_field_5_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"field",
	        		lv_field_5_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getConstructorConstructorParserRuleCall_5_0(), currentNode); 
	    }
		lv_constructor_6_0=ruleConstructor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constructor",
	        		lv_constructor_6_0, 
	        		"Constructor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_6_0(), currentNode); 
	    }
		lv_method_7_0=ruleMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"method",
	        		lv_method_7_0, 
	        		"Method", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorRule(), currentNode); }
	 iv_ruleConstructor=ruleConstructor 
	 { $current=$iv_ruleConstructor.current; } 
	 EOF 
;

// Rule Constructor
ruleConstructor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorAccess().getNameClassCrossReference_0_0(), "name"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getParamsParameterParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_2_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getParamsParameterParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getConstructorSuperExpressionConstructorSuperExpressionParserRuleCall_5_0(), currentNode); 
	    }
		lv_constructorSuperExpression_7_0=ruleConstructorSuperExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constructorSuperExpression",
	        		lv_constructorSuperExpression_7_0, 
	        		"ConstructorSuperExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstructorAccess().getConstructorFieldExpressionConstructorFieldExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_constructorFieldExpression_8_0=ruleConstructorFieldExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constructorFieldExpression",
	        		lv_constructorFieldExpression_8_0, 
	        		"ConstructorFieldExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getConstructorAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleConstructorSuperExpression
entryRuleConstructorSuperExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorSuperExpressionRule(), currentNode); }
	 iv_ruleConstructorSuperExpression=ruleConstructorSuperExpression 
	 { $current=$iv_ruleConstructorSuperExpression.current; } 
	 EOF 
;

// Rule ConstructorSuperExpression
ruleConstructorSuperExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConstructorSuperExpressionAccess().getConstructorSuperExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstructorSuperExpressionAccess().getConstructorSuperExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'super' 
    {
        createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getSuperKeyword_1_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorSuperExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getParSParameterCrossReference_1_2_0_0(), "parS"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getCommaKeyword_1_2_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorSuperExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getParSParameterCrossReference_1_2_1_1_0(), "parS"); 
	}

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getRightParenthesisKeyword_1_3(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getConstructorSuperExpressionAccess().getSemicolonKeyword_1_4(), null); 
    }
))
;





// Entry rule entryRuleConstructorFieldExpression
entryRuleConstructorFieldExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstructorFieldExpressionRule(), currentNode); }
	 iv_ruleConstructorFieldExpression=ruleConstructorFieldExpression 
	 { $current=$iv_ruleConstructorFieldExpression.current; } 
	 EOF 
;

// Rule ConstructorFieldExpression
ruleConstructorFieldExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'this' 
    {
        createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getThisKeyword_0(), null); 
    }
	'.' 
    {
        createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getFullStopKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorFieldExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getFieldFieldRefCrossReference_2_0(), "field"); 
	}

)
)	'=' 
    {
        createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConstructorFieldExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getParTParameterCrossReference_4_0(), "parT"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getConstructorFieldExpressionAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRule(), currentNode); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getTypeTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getReferenceFieldRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_reference_1_0=ruleFieldRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reference",
	        		lv_reference_1_0, 
	        		"FieldRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFieldAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleFieldRef
entryRuleFieldRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRefRule(), currentNode); }
	 iv_ruleFieldRef=ruleFieldRef 
	 { $current=$iv_ruleFieldRef.current; } 
	 EOF 
;

// Rule FieldRef
ruleFieldRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFieldRefAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodRule(), currentNode); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getReturntypeTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_returntype_0_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returntype",
	        		lv_returntype_0_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getReferenceMethodRefParserRuleCall_1_0(), currentNode); 
	    }
		lv_reference_1_0=ruleMethodRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reference",
	        		lv_reference_1_0, 
	        		"MethodRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_3_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMethodAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_5_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getBodyMethodBodyParserRuleCall_6_0(), currentNode); 
	    }
		lv_body_8_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_8_0, 
	        		"MethodBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleMethodRef
entryRuleMethodRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodRefRule(), currentNode); }
	 iv_ruleMethodRef=ruleMethodRef 
	 { $current=$iv_ruleMethodRef.current; } 
	 EOF 
;

// Rule MethodRef
ruleMethodRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMethodRefAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleMethodBody
entryRuleMethodBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodBodyRule(), currentNode); }
	 iv_ruleMethodBody=ruleMethodBody 
	 { $current=$iv_ruleMethodBody.current; } 
	 EOF 
;

// Rule MethodBody
ruleMethodBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMethodBodyAccess().getMethodBodyAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMethodBodyAccess().getMethodBodyAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodBodyAccess().getInsertJavaInsertJavaParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_insertJava_1_0=ruleInsertJava		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"insertJava",
	        		lv_insertJava_1_0, 
	        		"InsertJava", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodBodyAccess().getExpressionsExpressionParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getMethodBodyAccess().getSemicolonKeyword_1_1_1(), null); 
    }
))*((
(
		lv_return_4_0=	'return' 
    {
        createLeafNode(grammarAccess.getMethodBodyAccess().getReturnReturnKeyword_2_0_0(), "return"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "return", lv_return_4_0, "return", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodBodyAccess().getExpressionReturnExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_expressionReturn_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodBodyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionReturn",
	        		lv_expressionReturn_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getMethodBodyAccess().getSemicolonKeyword_2_2(), null); 
    }
)?)
;





// Entry rule entryRuleDelta
entryRuleDelta returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeltaRule(), currentNode); }
	 iv_ruleDelta=ruleDelta 
	 { $current=$iv_ruleDelta.current; } 
	 EOF 
;

// Rule Delta
ruleDelta returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDeltaAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'after' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getAfterKeyword_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDeltaAccess().getAfterDeltaCrossReference_1_1_0(), "after"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDeltaAccess().getAfterDeltaCrossReference_1_2_1_0(), "after"); 
	}

)
))*)?	'when' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getWhenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeltaAccess().getConditionConditionParserRuleCall_3_0(), currentNode); 
	    }
		lv_condition_6_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"condition",
	        		lv_condition_6_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getAmpersandAmpersandKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeltaAccess().getConditionConditionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_condition_8_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"condition",
	        		lv_condition_8_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'{' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeltaAccess().getClassesListClassmParserRuleCall_6_0(), currentNode); 
	    }
		lv_classesList_10_0=ruleClassm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeltaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classesList",
	        		lv_classesList_10_0, 
	        		"Classm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getDeltaAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConfigurationRule(), currentNode); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConfigurationAccess().getFeatureListConfigParserRuleCall_0_0(), currentNode); 
	    }
		lv_featureList_0_0=ruleConfig		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConfigurationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"featureList",
	        		lv_featureList_0_0, 
	        		"Config", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getConfigurationAccess().getSemicolonKeyword_1(), null); 
    }
)+
;





// Entry rule entryRuleConfig
entryRuleConfig returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConfigRule(), currentNode); }
	 iv_ruleConfig=ruleConfig 
	 { $current=$iv_ruleConfig.current; } 
	 EOF 
;

// Rule Config
ruleConfig returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConfigRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConfigAccess().getFeatureFeatureCrossReference_0_0(), "feature"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getConfigAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConfigRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConfigAccess().getFeatureFeatureCrossReference_1_1_0(), "feature"); 
	}

)
))*)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRule(), currentNode); } 
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current.getText(); }  
	 EOF 
;

// Rule Operation
ruleOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='&&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperationAccess().getAmpersandAmpersandKeyword_0(), null); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperationAccess().getVerticalLineVerticalLineKeyword_1(), null); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperationAccess().getHyphenMinusGreaterThanSignKeyword_2(), null); 
    }

    |
	kw='<->' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperationAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionRule(), currentNode); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_complement_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getConditionAccess().getComplementExclamationMarkKeyword_0_0(), "complement"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "complement", lv_complement_0_0, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?((	'(' 
    {
        createLeafNode(grammarAccess.getConditionAccess().getLeftParenthesisKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionAccess().getCondition1ConditionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_condition1_2_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition1",
	        		lv_condition1_2_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionAccess().getOperationOperationParserRuleCall_1_0_2_0(), currentNode); 
	    }
		lv_operation_3_0=ruleOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operation",
	        		lv_operation_3_0, 
	        		"Operation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionAccess().getCondition2ConditionParserRuleCall_1_0_3_0(), currentNode); 
	    }
		lv_condition2_4_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition2",
	        		lv_condition2_4_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getConditionAccess().getRightParenthesisKeyword_1_0_4(), null); 
    }
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getConditionAccess().getFeatureFeatureCrossReference_1_1_0(), "feature"); 
	}

)
)))
;





// Entry rule entryRuleClassm
entryRuleClassm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassmRule(), currentNode); }
	 iv_ruleClassm=ruleClassm 
	 { $current=$iv_ruleClassm.current; } 
	 EOF 
;

// Rule Classm
ruleClassm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_action_0_0=	'modifies' 
    {
        createLeafNode(grammarAccess.getClassmAccess().getActionModifiesKeyword_0_0_0(), "action"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "action", lv_action_0_0, "modifies", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassmAccess().getModifiesModifiesClassParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_modifies_1_0=ruleModifiesClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modifies",
	        		lv_modifies_1_0, 
	        		"ModifiesClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_action_2_0=	'adds' 
    {
        createLeafNode(grammarAccess.getClassmAccess().getActionAddsKeyword_1_0_0(), "action"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "action", lv_action_2_0, "adds", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassmAccess().getAddsAddsClassParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_adds_3_0=ruleAddsClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"adds",
	        		lv_adds_3_0, 
	        		"AddsClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_action_4_0=	'remove' 
    {
        createLeafNode(grammarAccess.getClassmAccess().getActionRemoveKeyword_2_0_0(), "action"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "action", lv_action_4_0, "remove", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassmAccess().getRemoveRemoveClassParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_remove_5_0=ruleRemoveClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"remove",
	        		lv_remove_5_0, 
	        		"RemoveClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleModifiesClass
entryRuleModifiesClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModifiesClassRule(), currentNode); }
	 iv_ruleModifiesClass=ruleModifiesClass 
	 { $current=$iv_ruleModifiesClass.current; } 
	 EOF 
;

// Rule ModifiesClass
ruleModifiesClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'class' 
    {
        createLeafNode(grammarAccess.getModifiesClassAccess().getClassKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModifiesClassAccess().getClassClassCrossReference_1_0(), "class"); 
	}

)
)(	'extending' 
    {
        createLeafNode(grammarAccess.getModifiesClassAccess().getExtendingKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModifiesClassAccess().getExtendsClassCrossReference_2_1_0(), "extends"); 
	}

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getModifiesClassAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesClassAccess().getFieldFieldmParserRuleCall_4_0(), currentNode); 
	    }
		lv_field_5_0=ruleFieldm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"field",
	        		lv_field_5_0, 
	        		"Fieldm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesClassAccess().getConstructorConstructorParserRuleCall_5_0(), currentNode); 
	    }
		lv_constructor_6_0=ruleConstructor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constructor",
	        		lv_constructor_6_0, 
	        		"Constructor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesClassAccess().getMethodMethodmParserRuleCall_6_0(), currentNode); 
	    }
		lv_method_7_0=ruleMethodm		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"method",
	        		lv_method_7_0, 
	        		"Methodm", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getModifiesClassAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleAddsClass
entryRuleAddsClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddsClassRule(), currentNode); }
	 iv_ruleAddsClass=ruleAddsClass 
	 { $current=$iv_ruleAddsClass.current; } 
	 EOF 
;

// Rule AddsClass
ruleAddsClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddsClassAccess().getClassClassParserRuleCall_0(), currentNode); 
	    }
		lv_class_0_0=ruleClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddsClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"class",
	        		lv_class_0_0, 
	        		"Class", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleRemoveClass
entryRuleRemoveClass returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRemoveClassRule(), currentNode); }
	 iv_ruleRemoveClass=ruleRemoveClass 
	 { $current=$iv_ruleRemoveClass.current; } 
	 EOF 
;

// Rule RemoveClass
ruleRemoveClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRemoveClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRemoveClassAccess().getClassClassCrossReference_0(), "class"); 
	}

)
)
;





// Entry rule entryRuleMethodm
entryRuleMethodm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodmRule(), currentNode); }
	 iv_ruleMethodm=ruleMethodm 
	 { $current=$iv_ruleMethodm.current; } 
	 EOF 
;

// Rule Methodm
ruleMethodm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMethodmAccess().getMethodmAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMethodmAccess().getMethodmAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'remove' 
    {
        createLeafNode(grammarAccess.getMethodmAccess().getRemoveKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodmAccess().getRemoveListRemovesMethodParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_removeList_2_0=ruleRemovesMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"removeList",
	        		lv_removeList_2_0, 
	        		"RemovesMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'modifies' 
    {
        createLeafNode(grammarAccess.getMethodmAccess().getModifiesKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodmAccess().getModifiesListModifiesMethodParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_modifiesList_4_0=ruleModifiesMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"modifiesList",
	        		lv_modifiesList_4_0, 
	        		"ModifiesMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'adds' 
    {
        createLeafNode(grammarAccess.getMethodmAccess().getAddsKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodmAccess().getAddsListAddsMethodParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_addsList_6_0=ruleAddsMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"addsList",
	        		lv_addsList_6_0, 
	        		"AddsMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAddsMethod
entryRuleAddsMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddsMethodRule(), currentNode); }
	 iv_ruleAddsMethod=ruleAddsMethod 
	 { $current=$iv_ruleAddsMethod.current; } 
	 EOF 
;

// Rule AddsMethod
ruleAddsMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddsMethodAccess().getMethodMethodParserRuleCall_0(), currentNode); 
	    }
		lv_method_0_0=ruleMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddsMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"method",
	        		lv_method_0_0, 
	        		"Method", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleModifiesMethod
entryRuleModifiesMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModifiesMethodRule(), currentNode); }
	 iv_ruleModifiesMethod=ruleModifiesMethod 
	 { $current=$iv_ruleModifiesMethod.current; } 
	 EOF 
;

// Rule ModifiesMethod
ruleModifiesMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getModifiesMethodAccess().getModifiesMethodAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModifiesMethodAccess().getModifiesMethodAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesMethodAccess().getReturntypeTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_returntype_1_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returntype",
	        		lv_returntype_1_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getModifiesMethodAccess().getMethodRefMethodRefCrossReference_2_0(), "methodRef"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getModifiesMethodAccess().getLeftParenthesisKeyword_3(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesMethodAccess().getParamsParameterParserRuleCall_4_0_0(), currentNode); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getModifiesMethodAccess().getCommaKeyword_4_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesMethodAccess().getParamsParameterParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_6_0, 
	        		"Parameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getModifiesMethodAccess().getRightParenthesisKeyword_5(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getModifiesMethodAccess().getLeftCurlyBracketKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModifiesMethodAccess().getBodyMethodBodyParserRuleCall_7_0(), currentNode); 
	    }
		lv_body_9_0=ruleMethodBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModifiesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_9_0, 
	        		"MethodBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getModifiesMethodAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleRemovesMethod
entryRuleRemovesMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRemovesMethodRule(), currentNode); }
	 iv_ruleRemovesMethod=ruleRemovesMethod 
	 { $current=$iv_ruleRemovesMethod.current; } 
	 EOF 
;

// Rule RemovesMethod
ruleRemovesMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRemovesMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRemovesMethodAccess().getMethodRefMethodRefCrossReference_0_0(), "methodRef"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getRemovesMethodAccess().getLeftParenthesisKeyword_1(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getRemovesMethodAccess().getRightParenthesisKeyword_2(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getRemovesMethodAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFieldm
entryRuleFieldm returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldmRule(), currentNode); }
	 iv_ruleFieldm=ruleFieldm 
	 { $current=$iv_ruleFieldm.current; } 
	 EOF 
;

// Rule Fieldm
ruleFieldm returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFieldmAccess().getFieldmAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFieldmAccess().getFieldmAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'remove' 
    {
        createLeafNode(grammarAccess.getFieldmAccess().getRemoveKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldmAccess().getRemoveListRemovesFieldParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_removeList_2_0=ruleRemovesField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"removeList",
	        		lv_removeList_2_0, 
	        		"RemovesField", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'adds' 
    {
        createLeafNode(grammarAccess.getFieldmAccess().getAddsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldmAccess().getAddsListAddsFieldParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_addsList_4_0=ruleAddsField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldmRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"addsList",
	        		lv_addsList_4_0, 
	        		"AddsField", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAddsField
entryRuleAddsField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddsFieldRule(), currentNode); }
	 iv_ruleAddsField=ruleAddsField 
	 { $current=$iv_ruleAddsField.current; } 
	 EOF 
;

// Rule AddsField
ruleAddsField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddsFieldAccess().getFieldFieldParserRuleCall_0(), currentNode); 
	    }
		lv_field_0_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddsFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"field",
	        		lv_field_0_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;







// Entry rule entryRuleRemovesField
entryRuleRemovesField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRemovesFieldRule(), currentNode); }
	 iv_ruleRemovesField=ruleRemovesField 
	 { $current=$iv_ruleRemovesField.current; } 
	 EOF 
;

// Rule RemovesField
ruleRemovesField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRemovesFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRemovesFieldAccess().getFieldRefFieldRefCrossReference_0_0(), "fieldRef"); 
	}

)
)	';' 
    {
        createLeafNode(grammarAccess.getRemovesFieldAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_basic_0_1=	'void' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getBasicVoidKeyword_0_0_0(), "basic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "basic", lv_basic_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_basic_0_2=	'int' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getBasicIntKeyword_0_0_1(), "basic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "basic", lv_basic_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_basic_0_3=	'boolean' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getBasicBooleanKeyword_0_0_2(), "basic"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "basic", lv_basic_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTypeAccess().getClassrefClassCrossReference_1_0(), "classref"); 
	}

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionTerminalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_terminalExpression_0_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"terminalExpression",
	        		lv_terminalExpression_0_0, 
	        		"TerminalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getExpressionReceiverAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "receiver", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getExpressionReceiverAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'.' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getFullStopKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getMessageMessageParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_message_3_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"message",
	        		lv_message_3_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(	'=' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getValueExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_value_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMethodCallMethodCallParserRuleCall_0_0(), currentNode); 
	    }
		lv_methodCall_0_0=ruleMethodCall		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodCall",
	        		lv_methodCall_0_0, 
	        		"MethodCall", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getFieldAccessFieldAccessParserRuleCall_1_0(), currentNode); 
	    }
		lv_fieldAccess_1_0=ruleFieldAccess		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fieldAccess",
	        		lv_fieldAccess_1_0, 
	        		"FieldAccess", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodCallRule(), currentNode); }
	 iv_ruleMethodCall=ruleMethodCall 
	 { $current=$iv_ruleMethodCall.current; } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMethodCallAccess().getNameMethodRefCrossReference_0_0(), "name"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodCallAccess().getArgsArgumentParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_args_2_0=ruleArgument		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_2_0, 
	        		"Argument", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodCallAccess().getArgsArgumentParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_args_4_0=ruleArgument		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_4_0, 
	        		"Argument", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFieldAccess
entryRuleFieldAccess returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldAccessRule(), currentNode); }
	 iv_ruleFieldAccess=ruleFieldAccess 
	 { $current=$iv_ruleFieldAccess.current; } 
	 EOF 
;

// Rule FieldAccess
ruleFieldAccess returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldAccessRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFieldAccessAccess().getNameFieldRefCrossReference_0(), "name"); 
	}

)
)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalExpressionRule(), currentNode); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getThisThisParserRuleCall_0_0(), currentNode); 
	    }
		lv_this_0_0=ruleThis		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"this",
	        		lv_this_0_0, 
	        		"This", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariableVariableParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getNewNewParserRuleCall_2_0(), currentNode); 
	    }
		lv_new_2_0=ruleNew		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"new",
	        		lv_new_2_0, 
	        		"New", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getCastCastParserRuleCall_3_0(), currentNode); 
	    }
		lv_cast_3_0=ruleCast		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cast",
	        		lv_cast_3_0, 
	        		"Cast", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getOriginalOriginalParserRuleCall_4_0(), currentNode); 
	    }
		lv_original_4_0=ruleOriginal		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"original",
	        		lv_original_4_0, 
	        		"Original", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getIntInteroParserRuleCall_5_0(), currentNode); 
	    }
		lv_int_5_0=ruleIntero		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"int",
	        		lv_int_5_0, 
	        		"Intero", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getStringStringaParserRuleCall_6_0(), currentNode); 
	    }
		lv_string_6_0=ruleStringa		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"string",
	        		lv_string_6_0, 
	        		"Stringa", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getNullNulloParserRuleCall_7_0(), currentNode); 
	    }
		lv_null_7_0=ruleNullo		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"null",
	        		lv_null_7_0, 
	        		"Nullo", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInsertJava
entryRuleInsertJava returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInsertJavaRule(), currentNode); }
	 iv_ruleInsertJava=ruleInsertJava 
	 { $current=$iv_ruleInsertJava.current; } 
	 EOF 
;

// Rule InsertJava
ruleInsertJava returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getInsertJavaAccess().getInsertJavaAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInsertJavaAccess().getInsertJavaAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'<' 
    {
        createLeafNode(grammarAccess.getInsertJavaAccess().getLessThanSignKeyword_1(), null); 
    }
(
(
		lv_String_2_0=RULE_ALL
		{
			createLeafNode(grammarAccess.getInsertJavaAccess().getStringALLTerminalRuleCall_2_0(), "String"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInsertJavaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"String",
	        		lv_String_2_0, 
	        		"ALL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getInsertJavaAccess().getGreaterThanSignKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThisRule(), currentNode); }
	 iv_ruleThis=ruleThis 
	 { $current=$iv_ruleThis.current; } 
	 EOF 
;

// Rule This
ruleThis returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_variable_0_0=	'this' 
    {
        createLeafNode(grammarAccess.getThisAccess().getVariableThisKeyword_0(), "variable"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "variable", lv_variable_0_0, "this", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getParameterParameterCrossReference_0_0(), "parameter"); 
	}

)
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getVariableAccess().getFieldRefFieldRefCrossReference_1_0(), "fieldRef"); 
	}

)
))
;





// Entry rule entryRuleNew
entryRuleNew returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNewRule(), currentNode); }
	 iv_ruleNew=ruleNew 
	 { $current=$iv_ruleNew.current; } 
	 EOF 
;

// Rule New
ruleNew returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'new' 
    {
        createLeafNode(grammarAccess.getNewAccess().getNewKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNewRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNewAccess().getTypeClassCrossReference_1_0(), "type"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getNewAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNewAccess().getArgsArgumentParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_args_3_0=ruleArgument		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNewRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_3_0, 
	        		"Argument", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getNewAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNewAccess().getArgsArgumentParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_args_5_0=ruleArgument		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNewRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_5_0, 
	        		"Argument", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getNewAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleCast
entryRuleCast returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCastRule(), currentNode); }
	 iv_ruleCast=ruleCast 
	 { $current=$iv_ruleCast.current; } 
	 EOF 
;

// Rule Cast
ruleCast returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'(' 
    {
        createLeafNode(grammarAccess.getCastAccess().getLeftParenthesisKeyword_0_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getCastAccess().getLeftParenthesisKeyword_0_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCastRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCastAccess().getTypeClassCrossReference_0_2_0(), "type"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getCastAccess().getRightParenthesisKeyword_0_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCastAccess().getExpressionExpressionParserRuleCall_0_4_0(), currentNode); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCastRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))	')' 
    {
        createLeafNode(grammarAccess.getCastAccess().getRightParenthesisKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleOriginal
entryRuleOriginal returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOriginalRule(), currentNode); }
	 iv_ruleOriginal=ruleOriginal 
	 { $current=$iv_ruleOriginal.current; } 
	 EOF 
;

// Rule Original
ruleOriginal returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOriginalAccess().getOriginalAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOriginalAccess().getOriginalAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'original' 
    {
        createLeafNode(grammarAccess.getOriginalAccess().getOriginalKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getOriginalAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOriginalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOriginalAccess().getParParameterCrossReference_3_0_0(), "par"); 
	}

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOriginalAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOriginalRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOriginalAccess().getParParameterCrossReference_3_1_1_0(), "par"); 
	}

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getOriginalAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleIntero
entryRuleIntero returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInteroRule(), currentNode); }
	 iv_ruleIntero=ruleIntero 
	 { $current=$iv_ruleIntero.current; } 
	 EOF 
;

// Rule Intero
ruleIntero returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getInteroAccess().getValueINTTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInteroRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStringa
entryRuleStringa returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringaRule(), currentNode); }
	 iv_ruleStringa=ruleStringa 
	 { $current=$iv_ruleStringa.current; } 
	 EOF 
;

// Rule Stringa
ruleStringa returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringaAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNullo
entryRuleNullo returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNulloRule(), currentNode); }
	 iv_ruleNullo=ruleNullo 
	 { $current=$iv_ruleNullo.current; } 
	 EOF 
;

// Rule Nullo
ruleNullo returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'null' 
    {
        createLeafNode(grammarAccess.getNulloAccess().getValueNullKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNulloRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getExpressionExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





RULE_ALL : '**Java:' ( options {greedy=false;} : . )*':Java**';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


