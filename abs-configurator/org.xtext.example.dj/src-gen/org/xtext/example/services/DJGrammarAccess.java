/*
* generated by Xtext
*/

package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DJGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFeaturesParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Assignment cModulesListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModulesListModuleParserRuleCall_2_0 = (RuleCall)cModulesListAssignment_2.eContents().get(0);
		
		//Program:
		//	imports+=Import* features=Features? modulesList+=Module*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* features=Features? modulesList+=Module*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//features=Features?
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//Features
		public RuleCall getFeaturesFeaturesParserRuleCall_1_0() { return cFeaturesFeaturesParserRuleCall_1_0; }

		//modulesList+=Module*
		public Assignment getModulesListAssignment_2() { return cModulesListAssignment_2; }

		//Module
		public RuleCall getModulesListModuleParserRuleCall_2_0() { return cModulesListModuleParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class FeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Features");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeaturesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFeaturesListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFeaturesListFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesListAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFeaturesListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFeaturesListFeatureParserRuleCall_1_1_1_0 = (RuleCall)cFeaturesListAssignment_1_1_1.eContents().get(0);
		private final Keyword cConfigurationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigurationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigurationConfigurationParserRuleCall_3_0 = (RuleCall)cConfigurationAssignment_3.eContents().get(0);
		
		//Features:
		//	"features" (featuresList+=Feature ("," featuresList+=Feature)*) "configurations" configuration=Configuration;
		public ParserRule getRule() { return rule; }

		//"features" (featuresList+=Feature ("," featuresList+=Feature)*) "configurations" configuration=Configuration
		public Group getGroup() { return cGroup; }

		//"features"
		public Keyword getFeaturesKeyword_0() { return cFeaturesKeyword_0; }

		//featuresList+=Feature ("," featuresList+=Feature)*
		public Group getGroup_1() { return cGroup_1; }

		//featuresList+=Feature
		public Assignment getFeaturesListAssignment_1_0() { return cFeaturesListAssignment_1_0; }

		//Feature
		public RuleCall getFeaturesListFeatureParserRuleCall_1_0_0() { return cFeaturesListFeatureParserRuleCall_1_0_0; }

		//("," featuresList+=Feature)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//featuresList+=Feature
		public Assignment getFeaturesListAssignment_1_1_1() { return cFeaturesListAssignment_1_1_1; }

		//Feature
		public RuleCall getFeaturesListFeatureParserRuleCall_1_1_1_0() { return cFeaturesListFeatureParserRuleCall_1_1_1_0; }

		//"configurations"
		public Keyword getConfigurationsKeyword_2() { return cConfigurationsKeyword_2; }

		//configuration=Configuration
		public Assignment getConfigurationAssignment_3() { return cConfigurationAssignment_3; }

		//Configuration
		public RuleCall getConfigurationConfigurationParserRuleCall_3_0() { return cConfigurationConfigurationParserRuleCall_3_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Feature:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cModuleAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNtypeAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cNtypeCoreKeyword_0_1_0_0 = (Keyword)cNtypeAssignment_0_1_0.eContents().get(0);
		private final Assignment cCoreAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cCoreCoreParserRuleCall_0_1_1_0 = (RuleCall)cCoreAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNtypeDeltaKeyword_1_0_0 = (Keyword)cNtypeAssignment_1_0.eContents().get(0);
		private final Assignment cDeltaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeltaDeltaParserRuleCall_1_1_0 = (RuleCall)cDeltaAssignment_1_1.eContents().get(0);
		
		//Module:
		//	{Module} (ntype="core" core=Core) | ntype="delta" delta=Delta;
		public ParserRule getRule() { return rule; }

		//{Module} (ntype="core" core=Core) | ntype="delta" delta=Delta
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Module} (ntype="core" core=Core)
		public Group getGroup_0() { return cGroup_0; }

		//{Module}
		public Action getModuleAction_0_0() { return cModuleAction_0_0; }

		//ntype="core" core=Core
		public Group getGroup_0_1() { return cGroup_0_1; }

		//ntype="core"
		public Assignment getNtypeAssignment_0_1_0() { return cNtypeAssignment_0_1_0; }

		//"core"
		public Keyword getNtypeCoreKeyword_0_1_0_0() { return cNtypeCoreKeyword_0_1_0_0; }

		//core=Core
		public Assignment getCoreAssignment_0_1_1() { return cCoreAssignment_0_1_1; }

		//Core
		public RuleCall getCoreCoreParserRuleCall_0_1_1_0() { return cCoreCoreParserRuleCall_0_1_1_0; }

		//ntype="delta" delta=Delta
		public Group getGroup_1() { return cGroup_1; }

		//ntype="delta"
		public Assignment getNtypeAssignment_1_0() { return cNtypeAssignment_1_0; }

		//"delta"
		public Keyword getNtypeDeltaKeyword_1_0_0() { return cNtypeDeltaKeyword_1_0_0; }

		//delta=Delta
		public Assignment getDeltaAssignment_1_1() { return cDeltaAssignment_1_1; }

		//Delta
		public RuleCall getDeltaDeltaParserRuleCall_1_1_0() { return cDeltaDeltaParserRuleCall_1_1_0; }
	}

	public class CoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Core");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFeatureCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameFeatureCrossReference_1_1_0 = (CrossReference)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameFeatureIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameFeatureCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassesListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassesListClassParserRuleCall_3_0 = (RuleCall)cClassesListAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Core:
		//	name+=[Feature] ("," name+=[Feature])* "{" classesList+=Class* "}";
		public ParserRule getRule() { return rule; }

		//name+=[Feature] ("," name+=[Feature])* "{" classesList+=Class* "}"
		public Group getGroup() { return cGroup; }

		//name+=[Feature]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Feature]
		public CrossReference getNameFeatureCrossReference_0_0() { return cNameFeatureCrossReference_0_0; }

		//ID
		public RuleCall getNameFeatureIDTerminalRuleCall_0_0_1() { return cNameFeatureIDTerminalRuleCall_0_0_1; }

		//("," name+=[Feature])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=[Feature]
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//[Feature]
		public CrossReference getNameFeatureCrossReference_1_1_0() { return cNameFeatureCrossReference_1_1_0; }

		//ID
		public RuleCall getNameFeatureIDTerminalRuleCall_1_1_0_1() { return cNameFeatureIDTerminalRuleCall_1_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//classesList+=Class*
		public Assignment getClassesListAssignment_3() { return cClassesListAssignment_3; }

		//Class
		public RuleCall getClassesListClassParserRuleCall_3_0() { return cClassesListClassParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsClassCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldFieldParserRuleCall_4_0 = (RuleCall)cFieldAssignment_4.eContents().get(0);
		private final Assignment cConstructorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstructorConstructorParserRuleCall_5_0 = (RuleCall)cConstructorAssignment_5.eContents().get(0);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodMethodParserRuleCall_6_0 = (RuleCall)cMethodAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	"class" name=ID ("extends" extends=[Class])? "{" field+=Field* constructor+=Constructor? method+=Method* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" extends=[Class])? "{" field+=Field* constructor+=Constructor? method+=Method* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" extends=[Class])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=[Class]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//[Class]
		public CrossReference getExtendsClassCrossReference_2_1_0() { return cExtendsClassCrossReference_2_1_0; }

		//ID
		public RuleCall getExtendsClassIDTerminalRuleCall_2_1_0_1() { return cExtendsClassIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//field+=Field*
		public Assignment getFieldAssignment_4() { return cFieldAssignment_4; }

		//Field
		public RuleCall getFieldFieldParserRuleCall_4_0() { return cFieldFieldParserRuleCall_4_0; }

		//constructor+=Constructor?
		public Assignment getConstructorAssignment_5() { return cConstructorAssignment_5; }

		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_5_0() { return cConstructorConstructorParserRuleCall_5_0; }

		//method+=Method*
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_6_0() { return cMethodMethodParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameClassCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameClassIDTerminalRuleCall_0_0_1 = (RuleCall)cNameClassCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstructorSuperExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstructorSuperExpressionConstructorSuperExpressionParserRuleCall_5_0 = (RuleCall)cConstructorSuperExpressionAssignment_5.eContents().get(0);
		private final Assignment cConstructorFieldExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstructorFieldExpressionConstructorFieldExpressionParserRuleCall_6_0 = (RuleCall)cConstructorFieldExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Constructor:
		//	name=[Class] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//	constructorSuperExpression=ConstructorSuperExpression? constructorFieldExpression+=ConstructorFieldExpression* "}";
		public ParserRule getRule() { return rule; }

		//name=[Class] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//constructorSuperExpression=ConstructorSuperExpression? constructorFieldExpression+=ConstructorFieldExpression* "}"
		public Group getGroup() { return cGroup; }

		//name=[Class]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[Class]
		public CrossReference getNameClassCrossReference_0_0() { return cNameClassCrossReference_0_0; }

		//ID
		public RuleCall getNameClassIDTerminalRuleCall_0_0_1() { return cNameClassIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_0_0() { return cParamsParameterParserRuleCall_2_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_1_0() { return cParamsParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//constructorSuperExpression=ConstructorSuperExpression?
		public Assignment getConstructorSuperExpressionAssignment_5() { return cConstructorSuperExpressionAssignment_5; }

		//ConstructorSuperExpression
		public RuleCall getConstructorSuperExpressionConstructorSuperExpressionParserRuleCall_5_0() { return cConstructorSuperExpressionConstructorSuperExpressionParserRuleCall_5_0; }

		//constructorFieldExpression+=ConstructorFieldExpression*
		public Assignment getConstructorFieldExpressionAssignment_6() { return cConstructorFieldExpressionAssignment_6; }

		//ConstructorFieldExpression
		public RuleCall getConstructorFieldExpressionConstructorFieldExpressionParserRuleCall_6_0() { return cConstructorFieldExpressionConstructorFieldExpressionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConstructorSuperExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorSuperExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorSuperExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSuperKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cParSAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cParSParameterCrossReference_1_2_0_0 = (CrossReference)cParSAssignment_1_2_0.eContents().get(0);
		private final RuleCall cParSParameterIDTerminalRuleCall_1_2_0_0_1 = (RuleCall)cParSParameterCrossReference_1_2_0_0.eContents().get(1);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cParSAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final CrossReference cParSParameterCrossReference_1_2_1_1_0 = (CrossReference)cParSAssignment_1_2_1_1.eContents().get(0);
		private final RuleCall cParSParameterIDTerminalRuleCall_1_2_1_1_0_1 = (RuleCall)cParSParameterCrossReference_1_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ConstructorSuperExpression:
		//	{ConstructorSuperExpression} ("super" "(" (parS+=[Parameter] ("," parS+=[Parameter])*)? ")" ";");
		public ParserRule getRule() { return rule; }

		//{ConstructorSuperExpression} ("super" "(" (parS+=[Parameter] ("," parS+=[Parameter])*)? ")" ";")
		public Group getGroup() { return cGroup; }

		//{ConstructorSuperExpression}
		public Action getConstructorSuperExpressionAction_0() { return cConstructorSuperExpressionAction_0; }

		//"super" "(" (parS+=[Parameter] ("," parS+=[Parameter])*)? ")" ";"
		public Group getGroup_1() { return cGroup_1; }

		//"super"
		public Keyword getSuperKeyword_1_0() { return cSuperKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//(parS+=[Parameter] ("," parS+=[Parameter])*)?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//parS+=[Parameter]
		public Assignment getParSAssignment_1_2_0() { return cParSAssignment_1_2_0; }

		//[Parameter]
		public CrossReference getParSParameterCrossReference_1_2_0_0() { return cParSParameterCrossReference_1_2_0_0; }

		//ID
		public RuleCall getParSParameterIDTerminalRuleCall_1_2_0_0_1() { return cParSParameterIDTerminalRuleCall_1_2_0_0_1; }

		//("," parS+=[Parameter])*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//","
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }

		//parS+=[Parameter]
		public Assignment getParSAssignment_1_2_1_1() { return cParSAssignment_1_2_1_1; }

		//[Parameter]
		public CrossReference getParSParameterCrossReference_1_2_1_1_0() { return cParSParameterCrossReference_1_2_1_1_0; }

		//ID
		public RuleCall getParSParameterIDTerminalRuleCall_1_2_1_1_0_1() { return cParSParameterIDTerminalRuleCall_1_2_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}

	public class ConstructorFieldExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorFieldExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldFieldRefCrossReference_2_0 = (CrossReference)cFieldAssignment_2.eContents().get(0);
		private final RuleCall cFieldFieldRefIDTerminalRuleCall_2_0_1 = (RuleCall)cFieldFieldRefCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParTAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParTParameterCrossReference_4_0 = (CrossReference)cParTAssignment_4.eContents().get(0);
		private final RuleCall cParTParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cParTParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstructorFieldExpression:
		//	"this" "." field=[FieldRef] "=" parT=[Parameter] ";";
		public ParserRule getRule() { return rule; }

		//"this" "." field=[FieldRef] "=" parT=[Parameter] ";"
		public Group getGroup() { return cGroup; }

		//"this"
		public Keyword getThisKeyword_0() { return cThisKeyword_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//field=[FieldRef]
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//[FieldRef]
		public CrossReference getFieldFieldRefCrossReference_2_0() { return cFieldFieldRefCrossReference_2_0; }

		//ID
		public RuleCall getFieldFieldRefIDTerminalRuleCall_2_0_1() { return cFieldFieldRefIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//parT=[Parameter]
		public Assignment getParTAssignment_4() { return cParTAssignment_4; }

		//[Parameter]
		public CrossReference getParTParameterCrossReference_4_0() { return cParTParameterCrossReference_4_0; }

		//ID
		public RuleCall getParTParameterIDTerminalRuleCall_4_0_1() { return cParTParameterIDTerminalRuleCall_4_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceFieldRefParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=Type reference=FieldRef ";";
		public ParserRule getRule() { return rule; }

		//type=Type reference=FieldRef ";"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//reference=FieldRef
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//FieldRef
		public RuleCall getReferenceFieldRefParserRuleCall_1_0() { return cReferenceFieldRefParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FieldRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldRef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////FieldRef returns Variable : {FieldRef} name = ID;
		//FieldRef:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////Parameter returns Variable : {Parameter} type=Type name=ID;
		//Parameter:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturntypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturntypeTypeParserRuleCall_0_0 = (RuleCall)cReturntypeAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceMethodRefParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyMethodBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	returntype=Type reference=MethodRef "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
		public ParserRule getRule() { return rule; }

		//returntype=Type reference=MethodRef "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//returntype=Type
		public Assignment getReturntypeAssignment_0() { return cReturntypeAssignment_0; }

		//Type
		public RuleCall getReturntypeTypeParserRuleCall_0_0() { return cReturntypeTypeParserRuleCall_0_0; }

		//reference=MethodRef
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//MethodRef
		public RuleCall getReferenceMethodRefParserRuleCall_1_0() { return cReferenceMethodRefParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body=MethodBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_6_0() { return cBodyMethodBodyParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MethodRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodRef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MethodRef:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cInsertJavaAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cInsertJavaInsertJavaParserRuleCall_1_0_0 = (RuleCall)cInsertJavaAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReturnAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cReturnReturnKeyword_2_0_0 = (Keyword)cReturnAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionReturnAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionReturnExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionReturnAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//MethodBody:
		//	{MethodBody} (insertJava+=InsertJava | expressions+=Expression ";")* (return="return" expressionReturn=Expression?
		//	";")?;
		public ParserRule getRule() { return rule; }

		//{MethodBody} (insertJava+=InsertJava | expressions+=Expression ";")* (return="return" expressionReturn=Expression? ";")?
		public Group getGroup() { return cGroup; }

		//{MethodBody}
		public Action getMethodBodyAction_0() { return cMethodBodyAction_0; }

		//(insertJava+=InsertJava | expressions+=Expression ";")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//insertJava+=InsertJava
		public Assignment getInsertJavaAssignment_1_0() { return cInsertJavaAssignment_1_0; }

		//InsertJava
		public RuleCall getInsertJavaInsertJavaParserRuleCall_1_0_0() { return cInsertJavaInsertJavaParserRuleCall_1_0_0; }

		//expressions+=Expression ";"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0_0() { return cExpressionsExpressionParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//(return="return" expressionReturn=Expression? ";")?
		public Group getGroup_2() { return cGroup_2; }

		//return="return"
		public Assignment getReturnAssignment_2_0() { return cReturnAssignment_2_0; }

		//"return"
		public Keyword getReturnReturnKeyword_2_0_0() { return cReturnReturnKeyword_2_0_0; }

		//expressionReturn=Expression?
		public Assignment getExpressionReturnAssignment_2_1() { return cExpressionReturnAssignment_2_1; }

		//Expression
		public RuleCall getExpressionReturnExpressionParserRuleCall_2_1_0() { return cExpressionReturnExpressionParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }
	}

	public class DeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAfterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAfterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAfterDeltaCrossReference_1_1_0 = (CrossReference)cAfterAssignment_1_1.eContents().get(0);
		private final RuleCall cAfterDeltaIDTerminalRuleCall_1_1_0_1 = (RuleCall)cAfterDeltaCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAfterAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cAfterDeltaCrossReference_1_2_1_0 = (CrossReference)cAfterAssignment_1_2_1.eContents().get(0);
		private final RuleCall cAfterDeltaIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cAfterDeltaCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAmpersandAmpersandKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassesListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClassesListClassmParserRuleCall_6_0 = (RuleCall)cClassesListAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Delta:
		//	name=ID ("after" after+=[Delta] ("," after+=[Delta])*)? "when" condition+=Condition ("&&" condition+=Condition)* "{"
		//	classesList+=Classm* "}";
		public ParserRule getRule() { return rule; }

		//name=ID ("after" after+=[Delta] ("," after+=[Delta])*)? "when" condition+=Condition ("&&" condition+=Condition)* "{"
		//classesList+=Classm* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("after" after+=[Delta] ("," after+=[Delta])*)?
		public Group getGroup_1() { return cGroup_1; }

		//"after"
		public Keyword getAfterKeyword_1_0() { return cAfterKeyword_1_0; }

		//after+=[Delta]
		public Assignment getAfterAssignment_1_1() { return cAfterAssignment_1_1; }

		//[Delta]
		public CrossReference getAfterDeltaCrossReference_1_1_0() { return cAfterDeltaCrossReference_1_1_0; }

		//ID
		public RuleCall getAfterDeltaIDTerminalRuleCall_1_1_0_1() { return cAfterDeltaIDTerminalRuleCall_1_1_0_1; }

		//("," after+=[Delta])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//after+=[Delta]
		public Assignment getAfterAssignment_1_2_1() { return cAfterAssignment_1_2_1; }

		//[Delta]
		public CrossReference getAfterDeltaCrossReference_1_2_1_0() { return cAfterDeltaCrossReference_1_2_1_0; }

		//ID
		public RuleCall getAfterDeltaIDTerminalRuleCall_1_2_1_0_1() { return cAfterDeltaIDTerminalRuleCall_1_2_1_0_1; }

		//"when"
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }

		//condition+=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//("&&" condition+=Condition)*
		public Group getGroup_4() { return cGroup_4; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_4_0() { return cAmpersandAmpersandKeyword_4_0; }

		//condition+=Condition
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_4_1_0() { return cConditionConditionParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//classesList+=Classm*
		public Assignment getClassesListAssignment_6() { return cClassesListAssignment_6; }

		//Classm
		public RuleCall getClassesListClassmParserRuleCall_6_0() { return cClassesListClassmParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFeatureListConfigParserRuleCall_0_0 = (RuleCall)cFeatureListAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Configuration:
		//	(featureList+=Config ";")+;
		public ParserRule getRule() { return rule; }

		//(featureList+=Config ";")+
		public Group getGroup() { return cGroup; }

		//featureList+=Config
		public Assignment getFeatureListAssignment_0() { return cFeatureListAssignment_0; }

		//Config
		public RuleCall getFeatureListConfigParserRuleCall_0_0() { return cFeatureListConfigParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_1_0.eContents().get(1);
		
		//Config:
		//	feature+=[Feature] ("," feature+=[Feature])*;
		public ParserRule getRule() { return rule; }

		//feature+=[Feature] ("," feature+=[Feature])*
		public Group getGroup() { return cGroup; }

		//feature+=[Feature]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_0_0() { return cFeatureFeatureCrossReference_0_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_0_1; }

		//("," feature+=[Feature])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//feature+=[Feature]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_1_1_0() { return cFeatureFeatureCrossReference_1_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_1_0_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Operation returns ecore::EString:
		//	"&&" | "||" | "->" | "<->";
		public ParserRule getRule() { return rule; }

		//"&&" | "||" | "->" | "<->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_3() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_3; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComplementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cComplementExclamationMarkKeyword_0_0 = (Keyword)cComplementAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cCondition1Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cCondition1ConditionParserRuleCall_1_0_1_0 = (RuleCall)cCondition1Assignment_1_0_1.eContents().get(0);
		private final Assignment cOperationAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperationOperationParserRuleCall_1_0_2_0 = (RuleCall)cOperationAssignment_1_0_2.eContents().get(0);
		private final Assignment cCondition2Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cCondition2ConditionParserRuleCall_1_0_3_0 = (RuleCall)cCondition2Assignment_1_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_1_0.eContents().get(1);
		
		//Condition:
		//	complement="!"? ("(" condition1=Condition operation=Operation condition2=Condition ")" | feature=[Feature]);
		public ParserRule getRule() { return rule; }

		//complement="!"? ("(" condition1=Condition operation=Operation condition2=Condition ")" | feature=[Feature])
		public Group getGroup() { return cGroup; }

		//complement="!"?
		public Assignment getComplementAssignment_0() { return cComplementAssignment_0; }

		//"!"
		public Keyword getComplementExclamationMarkKeyword_0_0() { return cComplementExclamationMarkKeyword_0_0; }

		//"(" condition1=Condition operation=Operation condition2=Condition ")" | feature=[Feature]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" condition1=Condition operation=Operation condition2=Condition ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//condition1=Condition
		public Assignment getCondition1Assignment_1_0_1() { return cCondition1Assignment_1_0_1; }

		//Condition
		public RuleCall getCondition1ConditionParserRuleCall_1_0_1_0() { return cCondition1ConditionParserRuleCall_1_0_1_0; }

		//operation=Operation
		public Assignment getOperationAssignment_1_0_2() { return cOperationAssignment_1_0_2; }

		//Operation
		public RuleCall getOperationOperationParserRuleCall_1_0_2_0() { return cOperationOperationParserRuleCall_1_0_2_0; }

		//condition2=Condition
		public Assignment getCondition2Assignment_1_0_3() { return cCondition2Assignment_1_0_3; }

		//Condition
		public RuleCall getCondition2ConditionParserRuleCall_1_0_3_0() { return cCondition2ConditionParserRuleCall_1_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_1_1_0() { return cFeatureFeatureCrossReference_1_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_1_0_1; }
	}

	public class ClassmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cActionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cActionModifiesKeyword_0_0_0 = (Keyword)cActionAssignment_0_0.eContents().get(0);
		private final Assignment cModifiesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cModifiesModifiesClassParserRuleCall_0_1_0 = (RuleCall)cModifiesAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cActionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cActionAddsKeyword_1_0_0 = (Keyword)cActionAssignment_1_0.eContents().get(0);
		private final Assignment cAddsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddsAddsClassParserRuleCall_1_1_0 = (RuleCall)cAddsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cActionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cActionRemoveKeyword_2_0_0 = (Keyword)cActionAssignment_2_0.eContents().get(0);
		private final Assignment cRemoveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRemoveRemoveClassParserRuleCall_2_1_0 = (RuleCall)cRemoveAssignment_2_1.eContents().get(0);
		
		//Classm:
		//	action="modifies" modifies=ModifiesClass | action="adds" adds=AddsClass | action="remove" remove=RemoveClass;
		public ParserRule getRule() { return rule; }

		//action="modifies" modifies=ModifiesClass | action="adds" adds=AddsClass | action="remove" remove=RemoveClass
		public Alternatives getAlternatives() { return cAlternatives; }

		//action="modifies" modifies=ModifiesClass
		public Group getGroup_0() { return cGroup_0; }

		//action="modifies"
		public Assignment getActionAssignment_0_0() { return cActionAssignment_0_0; }

		//"modifies"
		public Keyword getActionModifiesKeyword_0_0_0() { return cActionModifiesKeyword_0_0_0; }

		//modifies=ModifiesClass
		public Assignment getModifiesAssignment_0_1() { return cModifiesAssignment_0_1; }

		//ModifiesClass
		public RuleCall getModifiesModifiesClassParserRuleCall_0_1_0() { return cModifiesModifiesClassParserRuleCall_0_1_0; }

		//action="adds" adds=AddsClass
		public Group getGroup_1() { return cGroup_1; }

		//action="adds"
		public Assignment getActionAssignment_1_0() { return cActionAssignment_1_0; }

		//"adds"
		public Keyword getActionAddsKeyword_1_0_0() { return cActionAddsKeyword_1_0_0; }

		//adds=AddsClass
		public Assignment getAddsAssignment_1_1() { return cAddsAssignment_1_1; }

		//AddsClass
		public RuleCall getAddsAddsClassParserRuleCall_1_1_0() { return cAddsAddsClassParserRuleCall_1_1_0; }

		//action="remove" remove=RemoveClass
		public Group getGroup_2() { return cGroup_2; }

		//action="remove"
		public Assignment getActionAssignment_2_0() { return cActionAssignment_2_0; }

		//"remove"
		public Keyword getActionRemoveKeyword_2_0_0() { return cActionRemoveKeyword_2_0_0; }

		//remove=RemoveClass
		public Assignment getRemoveAssignment_2_1() { return cRemoveAssignment_2_1; }

		//RemoveClass
		public RuleCall getRemoveRemoveClassParserRuleCall_2_1_0() { return cRemoveRemoveClassParserRuleCall_2_1_0; }
	}

	public class ModifiesClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifiesClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassClassCrossReference_1_0 = (CrossReference)cClassAssignment_1.eContents().get(0);
		private final RuleCall cClassClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassClassCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsClassCrossReference_2_1_0 = (CrossReference)cExtendsAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldFieldmParserRuleCall_4_0 = (RuleCall)cFieldAssignment_4.eContents().get(0);
		private final Assignment cConstructorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstructorConstructorParserRuleCall_5_0 = (RuleCall)cConstructorAssignment_5.eContents().get(0);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodMethodmParserRuleCall_6_0 = (RuleCall)cMethodAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ModifiesClass:
		//	"class" class=[Class] ("extending" extends=[Class])? "{" field=Fieldm constructor=Constructor? method=Methodm "}";
		public ParserRule getRule() { return rule; }

		//"class" class=[Class] ("extending" extends=[Class])? "{" field=Fieldm constructor=Constructor? method=Methodm "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//class=[Class]
		public Assignment getClassAssignment_1() { return cClassAssignment_1; }

		//[Class]
		public CrossReference getClassClassCrossReference_1_0() { return cClassClassCrossReference_1_0; }

		//ID
		public RuleCall getClassClassIDTerminalRuleCall_1_0_1() { return cClassClassIDTerminalRuleCall_1_0_1; }

		//("extending" extends=[Class])?
		public Group getGroup_2() { return cGroup_2; }

		//"extending"
		public Keyword getExtendingKeyword_2_0() { return cExtendingKeyword_2_0; }

		//extends=[Class]
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//[Class]
		public CrossReference getExtendsClassCrossReference_2_1_0() { return cExtendsClassCrossReference_2_1_0; }

		//ID
		public RuleCall getExtendsClassIDTerminalRuleCall_2_1_0_1() { return cExtendsClassIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//field=Fieldm
		public Assignment getFieldAssignment_4() { return cFieldAssignment_4; }

		//Fieldm
		public RuleCall getFieldFieldmParserRuleCall_4_0() { return cFieldFieldmParserRuleCall_4_0; }

		//constructor=Constructor?
		public Assignment getConstructorAssignment_5() { return cConstructorAssignment_5; }

		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_5_0() { return cConstructorConstructorParserRuleCall_5_0; }

		//method=Methodm
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }

		//Methodm
		public RuleCall getMethodMethodmParserRuleCall_6_0() { return cMethodMethodmParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AddsClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddsClass");
		private final Assignment cClassAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClassClassParserRuleCall_0 = (RuleCall)cClassAssignment.eContents().get(0);
		
		//AddsClass:
		//	class=Class;
		public ParserRule getRule() { return rule; }

		//class=Class
		public Assignment getClassAssignment() { return cClassAssignment; }

		//Class
		public RuleCall getClassClassParserRuleCall_0() { return cClassClassParserRuleCall_0; }
	}

	public class RemoveClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveClass");
		private final Assignment cClassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassClassCrossReference_0 = (CrossReference)cClassAssignment.eContents().get(0);
		private final RuleCall cClassClassIDTerminalRuleCall_0_1 = (RuleCall)cClassClassCrossReference_0.eContents().get(1);
		
		//RemoveClass:
		//	class=[Class];
		public ParserRule getRule() { return rule; }

		//class=[Class]
		public Assignment getClassAssignment() { return cClassAssignment; }

		//[Class]
		public CrossReference getClassClassCrossReference_0() { return cClassClassCrossReference_0; }

		//ID
		public RuleCall getClassClassIDTerminalRuleCall_0_1() { return cClassClassIDTerminalRuleCall_0_1; }
	}

	public class MethodmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methodm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodmAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRemoveKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRemoveListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRemoveListRemovesMethodParserRuleCall_1_1_0 = (RuleCall)cRemoveListAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cModifiesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cModifiesListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cModifiesListModifiesMethodParserRuleCall_2_1_0 = (RuleCall)cModifiesListAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAddsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAddsListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAddsListAddsMethodParserRuleCall_3_1_0 = (RuleCall)cAddsListAssignment_3_1.eContents().get(0);
		
		//Methodm:
		//	{Methodm} ("remove" removeList+=RemovesMethod)* //('renames' renamesList+=RenamesMethod)*
		//	("modifies" modifiesList+=ModifiesMethod)* ("adds" addsList+=AddsMethod)*;
		public ParserRule getRule() { return rule; }

		//{Methodm} ("remove" removeList+=RemovesMethod)* //('renames' renamesList+=RenamesMethod)*
		//("modifies" modifiesList+=ModifiesMethod)* ("adds" addsList+=AddsMethod)*
		public Group getGroup() { return cGroup; }

		//{Methodm}
		public Action getMethodmAction_0() { return cMethodmAction_0; }

		//("remove" removeList+=RemovesMethod)*
		public Group getGroup_1() { return cGroup_1; }

		//"remove"
		public Keyword getRemoveKeyword_1_0() { return cRemoveKeyword_1_0; }

		//removeList+=RemovesMethod
		public Assignment getRemoveListAssignment_1_1() { return cRemoveListAssignment_1_1; }

		//RemovesMethod
		public RuleCall getRemoveListRemovesMethodParserRuleCall_1_1_0() { return cRemoveListRemovesMethodParserRuleCall_1_1_0; }

		//("modifies" modifiesList+=ModifiesMethod)*
		public Group getGroup_2() { return cGroup_2; }

		//"modifies"
		public Keyword getModifiesKeyword_2_0() { return cModifiesKeyword_2_0; }

		//modifiesList+=ModifiesMethod
		public Assignment getModifiesListAssignment_2_1() { return cModifiesListAssignment_2_1; }

		//ModifiesMethod
		public RuleCall getModifiesListModifiesMethodParserRuleCall_2_1_0() { return cModifiesListModifiesMethodParserRuleCall_2_1_0; }

		//("adds" addsList+=AddsMethod)*
		public Group getGroup_3() { return cGroup_3; }

		//"adds"
		public Keyword getAddsKeyword_3_0() { return cAddsKeyword_3_0; }

		//addsList+=AddsMethod
		public Assignment getAddsListAssignment_3_1() { return cAddsListAssignment_3_1; }

		//AddsMethod
		public RuleCall getAddsListAddsMethodParserRuleCall_3_1_0() { return cAddsListAddsMethodParserRuleCall_3_1_0; }
	}

	public class AddsMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddsMethod");
		private final Assignment cMethodAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_0 = (RuleCall)cMethodAssignment.eContents().get(0);
		
		//AddsMethod:
		//	method=Method;
		public ParserRule getRule() { return rule; }

		//method=Method
		public Assignment getMethodAssignment() { return cMethodAssignment; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_0() { return cMethodMethodParserRuleCall_0; }
	}

	public class ModifiesMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifiesMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifiesMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReturntypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturntypeTypeParserRuleCall_1_0 = (RuleCall)cReturntypeAssignment_1.eContents().get(0);
		private final Assignment cMethodRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMethodRefMethodRefCrossReference_2_0 = (CrossReference)cMethodRefAssignment_2.eContents().get(0);
		private final RuleCall cMethodRefMethodRefIDTerminalRuleCall_2_0_1 = (RuleCall)cMethodRefMethodRefCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyMethodBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////RenamesMethod:  (methodRef=[MethodRef])'('')' 'to' newMethodRef=MethodRef'('')'';';
		//ModifiesMethod:
		//	{ModifiesMethod} returntype=Type methodRef=[MethodRef] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//	body=MethodBody "}";
		public ParserRule getRule() { return rule; }

		//{ModifiesMethod} returntype=Type methodRef=[MethodRef] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//{ModifiesMethod}
		public Action getModifiesMethodAction_0() { return cModifiesMethodAction_0; }

		//returntype=Type
		public Assignment getReturntypeAssignment_1() { return cReturntypeAssignment_1; }

		//Type
		public RuleCall getReturntypeTypeParserRuleCall_1_0() { return cReturntypeTypeParserRuleCall_1_0; }

		//methodRef=[MethodRef]
		public Assignment getMethodRefAssignment_2() { return cMethodRefAssignment_2; }

		//[MethodRef]
		public CrossReference getMethodRefMethodRefCrossReference_2_0() { return cMethodRefMethodRefCrossReference_2_0; }

		//ID
		public RuleCall getMethodRefMethodRefIDTerminalRuleCall_2_0_1() { return cMethodRefMethodRefIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//body=MethodBody
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_7_0() { return cBodyMethodBodyParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class RemovesMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemovesMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMethodRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMethodRefMethodRefCrossReference_0_0 = (CrossReference)cMethodRefAssignment_0.eContents().get(0);
		private final RuleCall cMethodRefMethodRefIDTerminalRuleCall_0_0_1 = (RuleCall)cMethodRefMethodRefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RemovesMethod:
		//	methodRef=[MethodRef] "(" ")" ";";
		public ParserRule getRule() { return rule; }

		//methodRef=[MethodRef] "(" ")" ";"
		public Group getGroup() { return cGroup; }

		//methodRef=[MethodRef]
		public Assignment getMethodRefAssignment_0() { return cMethodRefAssignment_0; }

		//[MethodRef]
		public CrossReference getMethodRefMethodRefCrossReference_0_0() { return cMethodRefMethodRefCrossReference_0_0; }

		//ID
		public RuleCall getMethodRefMethodRefIDTerminalRuleCall_0_0_1() { return cMethodRefMethodRefIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FieldmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fieldm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldmAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRemoveKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRemoveListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRemoveListRemovesFieldParserRuleCall_1_1_0 = (RuleCall)cRemoveListAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAddsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAddsListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAddsListAddsFieldParserRuleCall_2_1_0 = (RuleCall)cAddsListAssignment_2_1.eContents().get(0);
		
		//Fieldm:
		//	{Fieldm} ("remove" removeList+=RemovesField)* //('renames' renamesList+=RenamesField)*
		//	("adds" addsList+=AddsField)*;
		public ParserRule getRule() { return rule; }

		//{Fieldm} ("remove" removeList+=RemovesField)* //('renames' renamesList+=RenamesField)*
		//("adds" addsList+=AddsField)*
		public Group getGroup() { return cGroup; }

		//{Fieldm}
		public Action getFieldmAction_0() { return cFieldmAction_0; }

		//("remove" removeList+=RemovesField)*
		public Group getGroup_1() { return cGroup_1; }

		//"remove"
		public Keyword getRemoveKeyword_1_0() { return cRemoveKeyword_1_0; }

		//removeList+=RemovesField
		public Assignment getRemoveListAssignment_1_1() { return cRemoveListAssignment_1_1; }

		//RemovesField
		public RuleCall getRemoveListRemovesFieldParserRuleCall_1_1_0() { return cRemoveListRemovesFieldParserRuleCall_1_1_0; }

		//("adds" addsList+=AddsField)*
		public Group getGroup_2() { return cGroup_2; }

		//"adds"
		public Keyword getAddsKeyword_2_0() { return cAddsKeyword_2_0; }

		//addsList+=AddsField
		public Assignment getAddsListAssignment_2_1() { return cAddsListAssignment_2_1; }

		//AddsField
		public RuleCall getAddsListAddsFieldParserRuleCall_2_1_0() { return cAddsListAddsFieldParserRuleCall_2_1_0; }
	}

	public class AddsFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddsField");
		private final Assignment cFieldAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFieldFieldParserRuleCall_0 = (RuleCall)cFieldAssignment.eContents().get(0);
		
		//AddsField:
		//	field=Field;
		public ParserRule getRule() { return rule; }

		//field=Field
		public Assignment getFieldAssignment() { return cFieldAssignment; }

		//Field
		public RuleCall getFieldFieldParserRuleCall_0() { return cFieldFieldParserRuleCall_0; }
	}

	public class RenamesFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenamesField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFieldRefFieldRefCrossReference_0_0 = (CrossReference)cFieldRefAssignment_0.eContents().get(0);
		private final RuleCall cFieldRefFieldRefIDTerminalRuleCall_0_0_1 = (RuleCall)cFieldRefFieldRefCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewFieldRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewFieldRefFieldRefParserRuleCall_2_0 = (RuleCall)cNewFieldRefAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RenamesField:
		//	fieldRef=[FieldRef] "to" newFieldRef=FieldRef ";";
		public ParserRule getRule() { return rule; }

		//fieldRef=[FieldRef] "to" newFieldRef=FieldRef ";"
		public Group getGroup() { return cGroup; }

		//fieldRef=[FieldRef]
		public Assignment getFieldRefAssignment_0() { return cFieldRefAssignment_0; }

		//[FieldRef]
		public CrossReference getFieldRefFieldRefCrossReference_0_0() { return cFieldRefFieldRefCrossReference_0_0; }

		//ID
		public RuleCall getFieldRefFieldRefIDTerminalRuleCall_0_0_1() { return cFieldRefFieldRefIDTerminalRuleCall_0_0_1; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//newFieldRef=FieldRef
		public Assignment getNewFieldRefAssignment_2() { return cNewFieldRefAssignment_2; }

		//FieldRef
		public RuleCall getNewFieldRefFieldRefParserRuleCall_2_0() { return cNewFieldRefFieldRefParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RemovesFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemovesField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFieldRefFieldRefCrossReference_0_0 = (CrossReference)cFieldRefAssignment_0.eContents().get(0);
		private final RuleCall cFieldRefFieldRefIDTerminalRuleCall_0_0_1 = (RuleCall)cFieldRefFieldRefCrossReference_0_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RemovesField:
		//	fieldRef=[FieldRef] ";";
		public ParserRule getRule() { return rule; }

		//fieldRef=[FieldRef] ";"
		public Group getGroup() { return cGroup; }

		//fieldRef=[FieldRef]
		public Assignment getFieldRefAssignment_0() { return cFieldRefAssignment_0; }

		//[FieldRef]
		public CrossReference getFieldRefFieldRefCrossReference_0_0() { return cFieldRefFieldRefCrossReference_0_0; }

		//ID
		public RuleCall getFieldRefFieldRefIDTerminalRuleCall_0_0_1() { return cFieldRefFieldRefIDTerminalRuleCall_0_0_1; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cBasicAlternatives_0_0 = (Alternatives)cBasicAssignment_0.eContents().get(0);
		private final Keyword cBasicVoidKeyword_0_0_0 = (Keyword)cBasicAlternatives_0_0.eContents().get(0);
		private final Keyword cBasicIntKeyword_0_0_1 = (Keyword)cBasicAlternatives_0_0.eContents().get(1);
		private final Keyword cBasicBooleanKeyword_0_0_2 = (Keyword)cBasicAlternatives_0_0.eContents().get(2);
		private final Assignment cClassrefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cClassrefClassCrossReference_1_0 = (CrossReference)cClassrefAssignment_1.eContents().get(0);
		private final RuleCall cClassrefClassIDTerminalRuleCall_1_0_1 = (RuleCall)cClassrefClassCrossReference_1_0.eContents().get(1);
		
		//Type:
		//	basic=("void" | "int" | "boolean") // 'String') | 
		//	| classref=[Class];
		public ParserRule getRule() { return rule; }

		//basic=("void" | "int" | "boolean") // 'String') | 
		//| classref=[Class]
		public Alternatives getAlternatives() { return cAlternatives; }

		//basic=("void" | "int" | "boolean")
		public Assignment getBasicAssignment_0() { return cBasicAssignment_0; }

		//"void" | "int" | "boolean"
		public Alternatives getBasicAlternatives_0_0() { return cBasicAlternatives_0_0; }

		//"void"
		public Keyword getBasicVoidKeyword_0_0_0() { return cBasicVoidKeyword_0_0_0; }

		//"int"
		public Keyword getBasicIntKeyword_0_0_1() { return cBasicIntKeyword_0_0_1; }

		//"boolean"
		public Keyword getBasicBooleanKeyword_0_0_2() { return cBasicBooleanKeyword_0_0_2; }

		//classref=[Class]
		public Assignment getClassrefAssignment_1() { return cClassrefAssignment_1; }

		//[Class]
		public CrossReference getClassrefClassCrossReference_1_0() { return cClassrefClassCrossReference_1_0; }

		//ID
		public RuleCall getClassrefClassIDTerminalRuleCall_1_0_1() { return cClassrefClassIDTerminalRuleCall_1_0_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTerminalExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTerminalExpressionTerminalExpressionParserRuleCall_0_0 = (RuleCall)cTerminalExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionReceiverAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_1_2_0 = (RuleCall)cMessageAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Expression:
		//	terminalExpression=TerminalExpression ({Expression.receiver=current} "." message=Message)* ("=" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//terminalExpression=TerminalExpression ({Expression.receiver=current} "." message=Message)* ("=" value=Expression)?
		public Group getGroup() { return cGroup; }

		//terminalExpression=TerminalExpression
		public Assignment getTerminalExpressionAssignment_0() { return cTerminalExpressionAssignment_0; }

		//TerminalExpression
		public RuleCall getTerminalExpressionTerminalExpressionParserRuleCall_0_0() { return cTerminalExpressionTerminalExpressionParserRuleCall_0_0; }

		//({Expression.receiver=current} "." message=Message)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.receiver=current}
		public Action getExpressionReceiverAction_1_0() { return cExpressionReceiverAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//message=Message
		public Assignment getMessageAssignment_1_2() { return cMessageAssignment_1_2; }

		//Message
		public RuleCall getMessageMessageParserRuleCall_1_2_0() { return cMessageMessageParserRuleCall_1_2_0; }

		//("=" value=Expression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMethodCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCallMethodCallParserRuleCall_0_0 = (RuleCall)cMethodCallAssignment_0.eContents().get(0);
		private final Assignment cFieldAccessAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFieldAccessFieldAccessParserRuleCall_1_0 = (RuleCall)cFieldAccessAssignment_1.eContents().get(0);
		
		//Message:
		//	methodCall=MethodCall | fieldAccess=FieldAccess;
		public ParserRule getRule() { return rule; }

		//methodCall=MethodCall | fieldAccess=FieldAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//methodCall=MethodCall
		public Assignment getMethodCallAssignment_0() { return cMethodCallAssignment_0; }

		//MethodCall
		public RuleCall getMethodCallMethodCallParserRuleCall_0_0() { return cMethodCallMethodCallParserRuleCall_0_0; }

		//fieldAccess=FieldAccess
		public Assignment getFieldAccessAssignment_1() { return cFieldAccessAssignment_1; }

		//FieldAccess
		public RuleCall getFieldAccessFieldAccessParserRuleCall_1_0() { return cFieldAccessFieldAccessParserRuleCall_1_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameMethodRefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameMethodRefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameMethodRefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsArgumentParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsArgumentParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	name=[MethodRef] "(" (args+=Argument ("," args+=Argument)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=[MethodRef] "(" (args+=Argument ("," args+=Argument)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=[MethodRef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[MethodRef]
		public CrossReference getNameMethodRefCrossReference_0_0() { return cNameMethodRefCrossReference_0_0; }

		//ID
		public RuleCall getNameMethodRefIDTerminalRuleCall_0_0_1() { return cNameMethodRefIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Argument ("," args+=Argument)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Argument
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Argument
		public RuleCall getArgsArgumentParserRuleCall_2_0_0() { return cArgsArgumentParserRuleCall_2_0_0; }

		//("," args+=Argument)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Argument
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Argument
		public RuleCall getArgsArgumentParserRuleCall_2_1_1_0() { return cArgsArgumentParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FieldAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAccess");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameFieldRefCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameFieldRefIDTerminalRuleCall_0_1 = (RuleCall)cNameFieldRefCrossReference_0.eContents().get(1);
		
		//FieldAccess:
		//	name=[FieldRef];
		public ParserRule getRule() { return rule; }

		//name=[FieldRef]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[FieldRef]
		public CrossReference getNameFieldRefCrossReference_0() { return cNameFieldRefCrossReference_0; }

		//ID
		public RuleCall getNameFieldRefIDTerminalRuleCall_0_1() { return cNameFieldRefIDTerminalRuleCall_0_1; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cThisAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cThisThisParserRuleCall_0_0 = (RuleCall)cThisAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cNewAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNewNewParserRuleCall_2_0 = (RuleCall)cNewAssignment_2.eContents().get(0);
		private final Assignment cCastAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCastCastParserRuleCall_3_0 = (RuleCall)cCastAssignment_3.eContents().get(0);
		private final Assignment cOriginalAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cOriginalOriginalParserRuleCall_4_0 = (RuleCall)cOriginalAssignment_4.eContents().get(0);
		private final Assignment cIntAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cIntInteroParserRuleCall_5_0 = (RuleCall)cIntAssignment_5.eContents().get(0);
		private final Assignment cStringAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cStringStringaParserRuleCall_6_0 = (RuleCall)cStringAssignment_6.eContents().get(0);
		private final Assignment cNullAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cNullNulloParserRuleCall_7_0 = (RuleCall)cNullAssignment_7.eContents().get(0);
		
		//TerminalExpression:
		//	this=This | variable=Variable | new=New | cast=Cast | original=Original | int=Intero | string=Stringa | null=Nullo;
		public ParserRule getRule() { return rule; }

		//this=This | variable=Variable | new=New | cast=Cast | original=Original | int=Intero | string=Stringa | null=Nullo
		public Alternatives getAlternatives() { return cAlternatives; }

		//this=This
		public Assignment getThisAssignment_0() { return cThisAssignment_0; }

		//This
		public RuleCall getThisThisParserRuleCall_0_0() { return cThisThisParserRuleCall_0_0; }

		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }

		//new=New
		public Assignment getNewAssignment_2() { return cNewAssignment_2; }

		//New
		public RuleCall getNewNewParserRuleCall_2_0() { return cNewNewParserRuleCall_2_0; }

		//cast=Cast
		public Assignment getCastAssignment_3() { return cCastAssignment_3; }

		//Cast
		public RuleCall getCastCastParserRuleCall_3_0() { return cCastCastParserRuleCall_3_0; }

		//original=Original
		public Assignment getOriginalAssignment_4() { return cOriginalAssignment_4; }

		//Original
		public RuleCall getOriginalOriginalParserRuleCall_4_0() { return cOriginalOriginalParserRuleCall_4_0; }

		//int=Intero
		public Assignment getIntAssignment_5() { return cIntAssignment_5; }

		//Intero
		public RuleCall getIntInteroParserRuleCall_5_0() { return cIntInteroParserRuleCall_5_0; }

		//string=Stringa
		public Assignment getStringAssignment_6() { return cStringAssignment_6; }

		//Stringa
		public RuleCall getStringStringaParserRuleCall_6_0() { return cStringStringaParserRuleCall_6_0; }

		//null=Nullo
		public Assignment getNullAssignment_7() { return cNullAssignment_7; }

		//Nullo
		public RuleCall getNullNulloParserRuleCall_7_0() { return cNullNulloParserRuleCall_7_0; }
	}

	public class InsertJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InsertJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInsertJavaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringALLTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InsertJava:
		//	{InsertJava} "<" String=ALL ">";
		public ParserRule getRule() { return rule; }

		//{InsertJava} "<" String=ALL ">"
		public Group getGroup() { return cGroup; }

		//{InsertJava}
		public Action getInsertJavaAction_0() { return cInsertJavaAction_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//String=ALL
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//ALL
		public RuleCall getStringALLTerminalRuleCall_2_0() { return cStringALLTerminalRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable="this";
		public ParserRule getRule() { return rule; }

		//variable="this"
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//"this"
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cParameterParameterCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cFieldRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cFieldRefFieldRefCrossReference_1_0 = (CrossReference)cFieldRefAssignment_1.eContents().get(0);
		private final RuleCall cFieldRefFieldRefIDTerminalRuleCall_1_0_1 = (RuleCall)cFieldRefFieldRefCrossReference_1_0.eContents().get(1);
		
		//Variable:
		//	parameter=[Parameter] | fieldRef=[FieldRef];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter] | fieldRef=[FieldRef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0_0() { return cParameterParameterCrossReference_0_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_0_1() { return cParameterParameterIDTerminalRuleCall_0_0_1; }

		//fieldRef=[FieldRef]
		public Assignment getFieldRefAssignment_1() { return cFieldRefAssignment_1; }

		//[FieldRef]
		public CrossReference getFieldRefFieldRefCrossReference_1_0() { return cFieldRefFieldRefCrossReference_1_0; }

		//ID
		public RuleCall getFieldRefFieldRefIDTerminalRuleCall_1_0_1() { return cFieldRefFieldRefIDTerminalRuleCall_1_0_1; }
	}

	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "New");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeClassCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeClassCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsArgumentParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//New:
		//	"new" type=[Class] "(" (args+=Argument ("," args+=Argument)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=[Class] "(" (args+=Argument ("," args+=Argument)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=[Class]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Class]
		public CrossReference getTypeClassCrossReference_1_0() { return cTypeClassCrossReference_1_0; }

		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_1_0_1() { return cTypeClassIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Argument ("," args+=Argument)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Argument
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Argument
		public RuleCall getArgsArgumentParserRuleCall_3_0_0() { return cArgsArgumentParserRuleCall_3_0_0; }

		//("," args+=Argument)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Argument
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Argument
		public RuleCall getArgsArgumentParserRuleCall_3_1_1_0() { return cArgsArgumentParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTypeClassCrossReference_0_2_0 = (CrossReference)cTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cTypeClassIDTerminalRuleCall_0_2_0_1 = (RuleCall)cTypeClassCrossReference_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_0_4_0 = (RuleCall)cExpressionAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// | ('(''(' type=[Class] ')' expression=TerminalExpression ')');
		//Cast:
		//	("(" "(" type=[Class] ")" expression=Expression) ")";
		public ParserRule getRule() { return rule; }

		//("(" "(" type=[Class] ")" expression=Expression) ")"
		public Group getGroup() { return cGroup; }

		//"(" "(" type=[Class] ")" expression=Expression
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//type=[Class]
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//[Class]
		public CrossReference getTypeClassCrossReference_0_2_0() { return cTypeClassCrossReference_0_2_0; }

		//ID
		public RuleCall getTypeClassIDTerminalRuleCall_0_2_0_1() { return cTypeClassIDTerminalRuleCall_0_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_4() { return cExpressionAssignment_0_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_4_0() { return cExpressionExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
	}

	public class OriginalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Original");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOriginalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOriginalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cParParameterCrossReference_3_0_0 = (CrossReference)cParAssignment_3_0.eContents().get(0);
		private final RuleCall cParParameterIDTerminalRuleCall_3_0_0_1 = (RuleCall)cParParameterCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cParParameterCrossReference_3_1_1_0 = (CrossReference)cParAssignment_3_1_1.eContents().get(0);
		private final RuleCall cParParameterIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cParParameterCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Original:
		//	{Original} "original" "(" (par+=[Parameter] ("," par+=[Parameter])*)? ")";
		public ParserRule getRule() { return rule; }

		//{Original} "original" "(" (par+=[Parameter] ("," par+=[Parameter])*)? ")"
		public Group getGroup() { return cGroup; }

		//{Original}
		public Action getOriginalAction_0() { return cOriginalAction_0; }

		//"original"
		public Keyword getOriginalKeyword_1() { return cOriginalKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(par+=[Parameter] ("," par+=[Parameter])*)?
		public Group getGroup_3() { return cGroup_3; }

		//par+=[Parameter]
		public Assignment getParAssignment_3_0() { return cParAssignment_3_0; }

		//[Parameter]
		public CrossReference getParParameterCrossReference_3_0_0() { return cParParameterCrossReference_3_0_0; }

		//ID
		public RuleCall getParParameterIDTerminalRuleCall_3_0_0_1() { return cParParameterIDTerminalRuleCall_3_0_0_1; }

		//("," par+=[Parameter])*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//par+=[Parameter]
		public Assignment getParAssignment_3_1_1() { return cParAssignment_3_1_1; }

		//[Parameter]
		public CrossReference getParParameterCrossReference_3_1_1_0() { return cParParameterCrossReference_3_1_1_0; }

		//ID
		public RuleCall getParParameterIDTerminalRuleCall_3_1_1_0_1() { return cParParameterIDTerminalRuleCall_3_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class InteroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Intero");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Intero:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class StringaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stringa");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Stringa:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NulloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nullo");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Nullo:
		//	value="null";
		public ParserRule getRule() { return rule; }

		//value="null"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"null"
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Argument:
		//	expression=Expression;
		public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	
	
	private ProgramElements pProgram;
	private ImportElements pImport;
	private FeaturesElements pFeatures;
	private FeatureElements pFeature;
	private ModuleElements pModule;
	private CoreElements pCore;
	private ClassElements pClass;
	private ConstructorElements pConstructor;
	private ConstructorSuperExpressionElements pConstructorSuperExpression;
	private ConstructorFieldExpressionElements pConstructorFieldExpression;
	private FieldElements pField;
	private FieldRefElements pFieldRef;
	private ParameterElements pParameter;
	private MethodElements pMethod;
	private MethodRefElements pMethodRef;
	private MethodBodyElements pMethodBody;
	private DeltaElements pDelta;
	private ConfigurationElements pConfiguration;
	private ConfigElements pConfig;
	private OperationElements pOperation;
	private ConditionElements pCondition;
	private ClassmElements pClassm;
	private ModifiesClassElements pModifiesClass;
	private AddsClassElements pAddsClass;
	private RemoveClassElements pRemoveClass;
	private MethodmElements pMethodm;
	private AddsMethodElements pAddsMethod;
	private ModifiesMethodElements pModifiesMethod;
	private RemovesMethodElements pRemovesMethod;
	private FieldmElements pFieldm;
	private AddsFieldElements pAddsField;
	private RenamesFieldElements pRenamesField;
	private RemovesFieldElements pRemovesField;
	private TypeElements pType;
	private ExpressionElements pExpression;
	private MessageElements pMessage;
	private MethodCallElements pMethodCall;
	private FieldAccessElements pFieldAccess;
	private TerminalExpressionElements pTerminalExpression;
	private InsertJavaElements pInsertJava;
	private ThisElements pThis;
	private VariableElements pVariable;
	private NewElements pNew;
	private CastElements pCast;
	private OriginalElements pOriginal;
	private InteroElements pIntero;
	private StringaElements pStringa;
	private NulloElements pNullo;
	private ArgumentElements pArgument;
	private TerminalRule tALL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DJGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	imports+=Import* features=Features? modulesList+=Module*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Features:
	//	"features" (featuresList+=Feature ("," featuresList+=Feature)*) "configurations" configuration=Configuration;
	public FeaturesElements getFeaturesAccess() {
		return (pFeatures != null) ? pFeatures : (pFeatures = new FeaturesElements());
	}
	
	public ParserRule getFeaturesRule() {
		return getFeaturesAccess().getRule();
	}

	//Feature:
	//	name=ID;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Module:
	//	{Module} (ntype="core" core=Core) | ntype="delta" delta=Delta;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Core:
	//	name+=[Feature] ("," name+=[Feature])* "{" classesList+=Class* "}";
	public CoreElements getCoreAccess() {
		return (pCore != null) ? pCore : (pCore = new CoreElements());
	}
	
	public ParserRule getCoreRule() {
		return getCoreAccess().getRule();
	}

	//Class:
	//	"class" name=ID ("extends" extends=[Class])? "{" field+=Field* constructor+=Constructor? method+=Method* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Constructor:
	//	name=[Class] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
	//	constructorSuperExpression=ConstructorSuperExpression? constructorFieldExpression+=ConstructorFieldExpression* "}";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//ConstructorSuperExpression:
	//	{ConstructorSuperExpression} ("super" "(" (parS+=[Parameter] ("," parS+=[Parameter])*)? ")" ";");
	public ConstructorSuperExpressionElements getConstructorSuperExpressionAccess() {
		return (pConstructorSuperExpression != null) ? pConstructorSuperExpression : (pConstructorSuperExpression = new ConstructorSuperExpressionElements());
	}
	
	public ParserRule getConstructorSuperExpressionRule() {
		return getConstructorSuperExpressionAccess().getRule();
	}

	//ConstructorFieldExpression:
	//	"this" "." field=[FieldRef] "=" parT=[Parameter] ";";
	public ConstructorFieldExpressionElements getConstructorFieldExpressionAccess() {
		return (pConstructorFieldExpression != null) ? pConstructorFieldExpression : (pConstructorFieldExpression = new ConstructorFieldExpressionElements());
	}
	
	public ParserRule getConstructorFieldExpressionRule() {
		return getConstructorFieldExpressionAccess().getRule();
	}

	//Field:
	//	type=Type reference=FieldRef ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	////FieldRef returns Variable : {FieldRef} name = ID;
	//FieldRef:
	//	name=ID;
	public FieldRefElements getFieldRefAccess() {
		return (pFieldRef != null) ? pFieldRef : (pFieldRef = new FieldRefElements());
	}
	
	public ParserRule getFieldRefRule() {
		return getFieldRefAccess().getRule();
	}

	////Parameter returns Variable : {Parameter} type=Type name=ID;
	//Parameter:
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Method:
	//	returntype=Type reference=MethodRef "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//MethodRef:
	//	name=ID;
	public MethodRefElements getMethodRefAccess() {
		return (pMethodRef != null) ? pMethodRef : (pMethodRef = new MethodRefElements());
	}
	
	public ParserRule getMethodRefRule() {
		return getMethodRefAccess().getRule();
	}

	//MethodBody:
	//	{MethodBody} (insertJava+=InsertJava | expressions+=Expression ";")* (return="return" expressionReturn=Expression?
	//	";")?;
	public MethodBodyElements getMethodBodyAccess() {
		return (pMethodBody != null) ? pMethodBody : (pMethodBody = new MethodBodyElements());
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//Delta:
	//	name=ID ("after" after+=[Delta] ("," after+=[Delta])*)? "when" condition+=Condition ("&&" condition+=Condition)* "{"
	//	classesList+=Classm* "}";
	public DeltaElements getDeltaAccess() {
		return (pDelta != null) ? pDelta : (pDelta = new DeltaElements());
	}
	
	public ParserRule getDeltaRule() {
		return getDeltaAccess().getRule();
	}

	//Configuration:
	//	(featureList+=Config ";")+;
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//Config:
	//	feature+=[Feature] ("," feature+=[Feature])*;
	public ConfigElements getConfigAccess() {
		return (pConfig != null) ? pConfig : (pConfig = new ConfigElements());
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}

	//Operation returns ecore::EString:
	//	"&&" | "||" | "->" | "<->";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Condition:
	//	complement="!"? ("(" condition1=Condition operation=Operation condition2=Condition ")" | feature=[Feature]);
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Classm:
	//	action="modifies" modifies=ModifiesClass | action="adds" adds=AddsClass | action="remove" remove=RemoveClass;
	public ClassmElements getClassmAccess() {
		return (pClassm != null) ? pClassm : (pClassm = new ClassmElements());
	}
	
	public ParserRule getClassmRule() {
		return getClassmAccess().getRule();
	}

	//ModifiesClass:
	//	"class" class=[Class] ("extending" extends=[Class])? "{" field=Fieldm constructor=Constructor? method=Methodm "}";
	public ModifiesClassElements getModifiesClassAccess() {
		return (pModifiesClass != null) ? pModifiesClass : (pModifiesClass = new ModifiesClassElements());
	}
	
	public ParserRule getModifiesClassRule() {
		return getModifiesClassAccess().getRule();
	}

	//AddsClass:
	//	class=Class;
	public AddsClassElements getAddsClassAccess() {
		return (pAddsClass != null) ? pAddsClass : (pAddsClass = new AddsClassElements());
	}
	
	public ParserRule getAddsClassRule() {
		return getAddsClassAccess().getRule();
	}

	//RemoveClass:
	//	class=[Class];
	public RemoveClassElements getRemoveClassAccess() {
		return (pRemoveClass != null) ? pRemoveClass : (pRemoveClass = new RemoveClassElements());
	}
	
	public ParserRule getRemoveClassRule() {
		return getRemoveClassAccess().getRule();
	}

	//Methodm:
	//	{Methodm} ("remove" removeList+=RemovesMethod)* //('renames' renamesList+=RenamesMethod)*
	//	("modifies" modifiesList+=ModifiesMethod)* ("adds" addsList+=AddsMethod)*;
	public MethodmElements getMethodmAccess() {
		return (pMethodm != null) ? pMethodm : (pMethodm = new MethodmElements());
	}
	
	public ParserRule getMethodmRule() {
		return getMethodmAccess().getRule();
	}

	//AddsMethod:
	//	method=Method;
	public AddsMethodElements getAddsMethodAccess() {
		return (pAddsMethod != null) ? pAddsMethod : (pAddsMethod = new AddsMethodElements());
	}
	
	public ParserRule getAddsMethodRule() {
		return getAddsMethodAccess().getRule();
	}

	////RenamesMethod:  (methodRef=[MethodRef])'('')' 'to' newMethodRef=MethodRef'('')'';';
	//ModifiesMethod:
	//	{ModifiesMethod} returntype=Type methodRef=[MethodRef] "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
	//	body=MethodBody "}";
	public ModifiesMethodElements getModifiesMethodAccess() {
		return (pModifiesMethod != null) ? pModifiesMethod : (pModifiesMethod = new ModifiesMethodElements());
	}
	
	public ParserRule getModifiesMethodRule() {
		return getModifiesMethodAccess().getRule();
	}

	//RemovesMethod:
	//	methodRef=[MethodRef] "(" ")" ";";
	public RemovesMethodElements getRemovesMethodAccess() {
		return (pRemovesMethod != null) ? pRemovesMethod : (pRemovesMethod = new RemovesMethodElements());
	}
	
	public ParserRule getRemovesMethodRule() {
		return getRemovesMethodAccess().getRule();
	}

	//Fieldm:
	//	{Fieldm} ("remove" removeList+=RemovesField)* //('renames' renamesList+=RenamesField)*
	//	("adds" addsList+=AddsField)*;
	public FieldmElements getFieldmAccess() {
		return (pFieldm != null) ? pFieldm : (pFieldm = new FieldmElements());
	}
	
	public ParserRule getFieldmRule() {
		return getFieldmAccess().getRule();
	}

	//AddsField:
	//	field=Field;
	public AddsFieldElements getAddsFieldAccess() {
		return (pAddsField != null) ? pAddsField : (pAddsField = new AddsFieldElements());
	}
	
	public ParserRule getAddsFieldRule() {
		return getAddsFieldAccess().getRule();
	}

	//RenamesField:
	//	fieldRef=[FieldRef] "to" newFieldRef=FieldRef ";";
	public RenamesFieldElements getRenamesFieldAccess() {
		return (pRenamesField != null) ? pRenamesField : (pRenamesField = new RenamesFieldElements());
	}
	
	public ParserRule getRenamesFieldRule() {
		return getRenamesFieldAccess().getRule();
	}

	//RemovesField:
	//	fieldRef=[FieldRef] ";";
	public RemovesFieldElements getRemovesFieldAccess() {
		return (pRemovesField != null) ? pRemovesField : (pRemovesField = new RemovesFieldElements());
	}
	
	public ParserRule getRemovesFieldRule() {
		return getRemovesFieldAccess().getRule();
	}

	//Type:
	//	basic=("void" | "int" | "boolean") // 'String') | 
	//	| classref=[Class];
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Expression:
	//	terminalExpression=TerminalExpression ({Expression.receiver=current} "." message=Message)* ("=" value=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Message:
	//	methodCall=MethodCall | fieldAccess=FieldAccess;
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//MethodCall:
	//	name=[MethodRef] "(" (args+=Argument ("," args+=Argument)*)? ")";
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//FieldAccess:
	//	name=[FieldRef];
	public FieldAccessElements getFieldAccessAccess() {
		return (pFieldAccess != null) ? pFieldAccess : (pFieldAccess = new FieldAccessElements());
	}
	
	public ParserRule getFieldAccessRule() {
		return getFieldAccessAccess().getRule();
	}

	//TerminalExpression:
	//	this=This | variable=Variable | new=New | cast=Cast | original=Original | int=Intero | string=Stringa | null=Nullo;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//InsertJava:
	//	{InsertJava} "<" String=ALL ">";
	public InsertJavaElements getInsertJavaAccess() {
		return (pInsertJava != null) ? pInsertJava : (pInsertJava = new InsertJavaElements());
	}
	
	public ParserRule getInsertJavaRule() {
		return getInsertJavaAccess().getRule();
	}

	//This:
	//	variable="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	//Variable:
	//	parameter=[Parameter] | fieldRef=[FieldRef];
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//New:
	//	"new" type=[Class] "(" (args+=Argument ("," args+=Argument)*)? ")";
	public NewElements getNewAccess() {
		return (pNew != null) ? pNew : (pNew = new NewElements());
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}

	//// | ('(''(' type=[Class] ')' expression=TerminalExpression ')');
	//Cast:
	//	("(" "(" type=[Class] ")" expression=Expression) ")";
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//Original:
	//	{Original} "original" "(" (par+=[Parameter] ("," par+=[Parameter])*)? ")";
	public OriginalElements getOriginalAccess() {
		return (pOriginal != null) ? pOriginal : (pOriginal = new OriginalElements());
	}
	
	public ParserRule getOriginalRule() {
		return getOriginalAccess().getRule();
	}

	//Intero:
	//	value=INT;
	public InteroElements getInteroAccess() {
		return (pIntero != null) ? pIntero : (pIntero = new InteroElements());
	}
	
	public ParserRule getInteroRule() {
		return getInteroAccess().getRule();
	}

	//Stringa:
	//	value=STRING;
	public StringaElements getStringaAccess() {
		return (pStringa != null) ? pStringa : (pStringa = new StringaElements());
	}
	
	public ParserRule getStringaRule() {
		return getStringaAccess().getRule();
	}

	//Nullo:
	//	value="null";
	public NulloElements getNulloAccess() {
		return (pNullo != null) ? pNullo : (pNullo = new NulloElements());
	}
	
	public ParserRule getNulloRule() {
		return getNulloAccess().getRule();
	}

	//Argument:
	//	expression=Expression;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//terminal ALL:
	//	"**Java:"->":Java**";
	public TerminalRule getALLRule() {
		return (tALL != null) ? tALL : (tALL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
