Execution and Debugging

* Execution

 Text about Jobs and launch support of Eclipse in general
  
 Eclipse supports asynchronous execution via so called Jobs, implemented in <org.eclipse.core.runtime.jobs.Job>. These Jobs can be scheduled with <Job.schedule>, which will execute the <run> method of a Job, which returns an <IStatus>.
  
 <JobChangeListeners> can be added to a Job and react to the <IStatus> returned by the <run> method of a Job.
  
** Java

 Text about the JavaJob

** Maude

 The <eu.hatsproject.absplugin.actions.MaudeJob> extends the default Job and overrides the run method offering compiling to .maude files and execution of such. To do so, one has to create a new MaudeJob, add a new MaudeJobChangeListener to it and schedule the Job.
  
 The probably most interesting part is the returned status of the jobs run method. The MaudeJob will always return an IStatus with severity <IStatus.INFO>, the actual state is encoded within the <code> of the <IStatus>. The following outcomes are possible:
 
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|| Code                      || What happened                                        || Reaction of the listener                                                    |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_OK>                |  files have been generated, but not executed          |  none                                                                        |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_INFO>              |  files have been generated, execution was successful  |  the message of the status (console output of Maude) will be printed on the  |
|                            |                                                       |  Eclipse console as Info (black)                                             |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_WARNING>           |  this code is not used by the MaudeJob                |  the message of the status will be printed on the Eclipse console as warning |
|                            |                                                       |  (yellow)                                                                    |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_ERROR_MAUDE>       |  Maude encountered an error during execution of the   |  the message of the status will be printed on the Eclipse console as error   |
|                            |  genrated .maude file                                 |  (red)                                                                       |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_ERROR>             |  Other errors have been encountered during compiling  |  An error message containing the message of the status will pop up           |
|                            |  or starting the Maude process                        |                                                                              |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_ERROR_MAUDE_PATH>  |  No file has been found at the Maude location         |  An error message will pop up. If this is dismissed, the  Maude Preference   |
|                            |  specified in the preferences                         |  Page will open and allow the user to specify a valid Maude path.            |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+
|  <MAUDE_USER_ABORT>        |  The user aborted the Maude Job                       |  An abort message is printed on the Eclipse console as error (red)           |
*----------------------------+-------------------------------------------------------+------------------------------------------------------------------------------+

 You may extend these by implementing new codes, but then have to adapt both the Job returning the new code as well as the listener which has to react on the new code appropriately.
  
 Like Java Jobs, there are three points at which a Maude Job is created and scheduled: 
  
  * The compile Maude / debug Maude Buttons (<eu.hatsproject.absplugin.actions.>)
  
  * the "Run as" menu (<eu.hatsproject.absplugin.shortcuts.LaunchMaudeShortcut>)

  * and the more configurable run configuration (<eu.hatsproject.absplugin.runconfig.MaudeRunConfiguration>) 
  
 At all these three points, the explained process of creating a job, adding a <MaudeJobChangeListener> and scheduling the job is followed.
  
 For further reference see the Javadoc and the code itself.
  
* Debugging

** General Architecture
 
 Generally, debugging is done by the ABSFrontend. The Eclipse plug-in creates and starts an <abs.backend.java.lib.runtime.ABSRuntime> and adds an internal scheduler and listeners to it. 
 
 Schedulers have to implement abs.backend.java.scheduling.TotalSchedulingStrategy and therefor contain a <choose> and a <schedule> method.
 
   * choose is always executed, when the debugger has finished a step and awaits selection of the next COG which should take a step
   
   * schedule is called, when a COG without a running task and more then one schedulable task is selected by choose. It determines which task of the chosen COG should be scheduled next.
  
   []
 
 Listeners implement methods, which are called on specific events occuring during debugging, e.g. creation of a new COG or termination of a task.
 
 The debug package is split into four parts or subpackages
 
  * <eu.hatsproject.absplugin.debug.scheduling> containing the <SchedulingStrategy> with all schedulers
  
  * <eu.hatsproject.absplugin.debug.model> which implements listeners / obeservers and augments the model with additional information
  
  * <eu.hatsproject.absplugin.debug.perspective> containing classes which constitute to the <ABSDebugPerspective>
  
  * <eu.hatsproject.absplugin.debug.views> containing views specific for the debug perspective.
  
  []
 
 For more details about these packeges see below.
 
 Note, that this debugger is NOT related to the Eclipse Debug API but implements everything manually.
 
** Debug Model 

 A short overview of the classes augmenting <abs.backend.java.debugging.DebugModel>

*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
|| Class                                                      || Implemented interface                            || Functionality                                                            |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
| eu.hatsproject.absplugin.debug.model.Debugger               | abs.backend.java.observing.SystemObserver         | manage model, start and terminate debug process, react on <newCOGCreated> |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
| eu.hatsproject.absplugin.debug.model.DebugModelListener     | abs.backend.java.debugging.DebugModelListener     | react on COG and Task creations and changes                               |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
| eu.hatsproject.absplugin.debug.model.ObjectCreationObserver | abs.backend.java.observing.ObjectCreationObserver | react on object creation and initialization                               |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
| eu.hatsproject.absplugin.debug.model.Objects                |                                                   | necessary to group objects and tasks in the debug viewer tree.            | 
| eu.hatsproject.absplugin.debug.model.Tasks                  |                                                   |                                                                           |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+
| eu.hatsproject.absplugin.debug.model.VariableValuePair      |                                                   | necessary for variable view to link field names with their values         |
*-------------------------------------------------------------+---------------------------------------------------+---------------------------------------------------------------------------+

 For more details about the model see documentation of <abs.backend.java.debugging.DebugModel> and related classes.

** Graphical User Interface (Perspective and Views)

 Extension points and classes for the debugging interface:

*---------------------------------+-------------------------------------+------------------------------------------------------------------------+
|| Feature                        || Extension Points                   || Classes                                                               |
*---------------------------------+-------------------------------------+------------------------------------------------------------------------+
| Debug Perspective               |  org.eclipse.ui.perspectives        |  eu.hatsproject.absplugin.dbeug.perspective.ABSDebugPerspectiveFactory |
*---------------------------------+-------------------------------------+------------------------------------------------------------------------+ 
| Debug View                      |  org.eclipse.ui.views               |  eu.hatsproject.absplugin.debug.views.debugview.DebugView              |
| Variable View                   |                                     |  eu.hatsproject.absplugin.debug.views.variablesview.VariablView        |
*---------------------------------+-------------------------------------+------------------------------------------------------------------------+
| Buttons                         |  org.eclipse.ui.viewActions         |  eu.hatsproject.absplugin.debug.DebugActionDelegate                    |
|                                 |                                     |  eu.hatsproject.absplugin.debug.SchedulerChoiceDelegate                |
*---------------------------------+-------------------------------------+------------------------------------------------------------------------+
| Hotkeys                         |  org.eclipse.ui.commands            |  eu.hatsproject.absplugin.debug.commands.ResumeCommandHandler          |
|                                 |                                     |  eu.hatsproject.absplugin.debug.commands.StepOverCommand               |
*---------------------------------+-------------------------------------+------------------------------------------------------------------------+

 Debugging of ABS files is done in a new <ABSDebugPerspective>. The <ABSDebugPerspectiveFactory> sets up the initial design of the perspective, containing the <DebugView> and the <VariableView>.
 
 The <DebugView> is the most important view for debugging. Here, a TreeViewer shows the current state of the debugged program. The <DebugTreeContentProvider> and <DebugTreeStyledLabelProvider> (found in <eu.hatsproject.absplugin.debug.views.debugview>) construct this tree out of a given <DebugModel> (which is found in the ABSFrontend at <abs.backend.java.debugging>), similar to the TreeViewer found in the {{{editor.html#ABS_outline_content_provider_ABSContentOutlineProvider}Outline}}
 
 The <VariableView> again is similar to the OutlinePage, classes are found at <eu.hatsproject.absplugin.debug.views.VariableView>. The only difference worth mentioning is the LabeProvider being an <org.eclipse.jface.viewers.ITableLabelProvider>, which results in the contents of the tree being shown in multiple columns. Classes implementing <ITableLabelProvider> need to implement the methods <getColumnImage> and <getColumnText> which are similar to the equivalently named methods in the conventional LabelProvider, but also take a column index as parameter and return only the value for a specific element in a specific column. So the elements returned by the ContentProvider need to contain data for each column of the table.
 
 Buttons are added to the DebugView with another extension point. Enablement of this buttons is set by the method <eu.hatsproject.absplugin.debug.DebugUtils.refreshButtonEnablement>, which is called whenever task is stepped, another task (or different element) is selected in the debug tree or the scheduler is changed. The enablement is set according to the currently selected scheduler, the selection of the debug tree and the steps that are currently possible.
 

** Scheduler (SchedulingStrategy)

 Text about our scheduler and interactive behaviour with Jans debugger.