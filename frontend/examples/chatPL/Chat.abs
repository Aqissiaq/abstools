module Chat;
import * from Management;

interface Client {}

// core: text-only Chat client
interface Text extends Client {
  Unit message(Client client, String msg);
}

class ClientImpl implements Client, Text {
  Unit message(Client client, String msg) {}
}

{
    Text c1 = new ClientImpl();
    Text c2 = new cog ClientImpl();
    c1.message(c2, "Hello");

    Connection conn = new ConnectionImpl();
    Reconfigurator r = new cog ReconfiguratorImpl(conn);
}



// delta that adds voice chat functionality
delta DVoice;
uses Chat;

adds interface Call { 
  Unit pickup();
  Unit hangup();
}
adds interface Voice {
  Call call(Client client);
}
adds class CallImpl implements Call {
  Unit pickup() {/*...*/}
  Unit hangup() {/*...*/}
}
modifies class ClientImpl adds Voice {
  adds Call call(Client client) { return new CallImpl(); }
}


// delta that adds video functionality
delta DVideo;
uses Chat;

adds interface Video {
  Call videoCall(Client client);
}

modifies class ClientImpl adds Video {
  adds Call videoCall(Client client) {/*...*/}
}

modifies interface Call {
  adds Unit startVideo();
  adds Unit stopVideo();
} 
modifies class CallImpl {
  adds Unit startVideo() {/*...*/}
  adds Unit stopVideo() {/*...*/}
}


// deltas that handle dynamic reconfigurations

delta DNoVideo;
uses Chat;

modifies interface Client {
    removes Unit startVideo();
    removes Unit stopVideo();
}
modifies class ClientImpl removes Video {
    removes Unit startVideo();
    removes Unit stopVideo();
}

delta DNoVoice;
uses Chat;

modifies class ClientImpl removes Voice {
    removes Unit call(Client client);
}

removes interface Call;
removes class CallImpl;



