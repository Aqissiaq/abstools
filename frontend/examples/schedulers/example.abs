module M;
import * from ABS.Scheduler;
import * from ABS.Meta;

interface C { Unit m(); }

class CImpl implements C {
    Unit m() {}
}

// FIFO : first in first out
def Process fifo (List<Process> l) = fifo_h(head(l), tail(l));

def Process fifo_h(Process p1, List<Process> l1) =
    case l1 {
        Nil => p1;
        Cons(p2,l2) => 
            case fifo_comp(p1, p2) {
                True  => fifo_h(p1,l2);
                False => fifo_h(p2,l2);
            };
    };

// fifo comparison
def Bool fifo_comp(Process p1, Process p2) = timeValue(arrival(p1)) <= timeValue(arrival(p2));


/* user-defined scheduler class
 * schedule() defers the scheduling decision to the fifo function
 */
class MyScheduler implements ProcessScheduler {
    Process schedule(List<Process> l) {
        return fifo(l);
    }
}

{
    
//    C obj = new [Scheduler: defaultscheduler(queue)] cog CImpl();

    C o = new cog CImpl();

    ObjectMirror om = reflect(o);
    Cog g = om.getCog();
    ProcessScheduler sched = new MyScheduler();
    g.setScheduler(sched);

}
