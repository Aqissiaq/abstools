/*
 * This file was generated by the Gradle 'init' task.
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/tutorial_java_projects.html
 */

// JastAdd plugin documentation at https://github.com/jastadd/jastaddgradle

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the application plugin to add support for building an application
    id 'application'
    id 'com.palantir.git-version' version '0.5.1'

    id 'org.jastadd' version '1.13.1'
    id 'antlr'
}

// application
mainClassName = 'abs.frontend.parser.Main'
distributions {
    main { baseName = 'absc' }
}

def version_details = versionDetails() // https://github.com/palantir/gradle-git-version
project.version = gitVersion().replaceAll(/^version_/, '')
sourceCompatibility = targetCompatibility = 1.8

dependencies {
    // https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management
    implementation 'commons-io:commons-io:2.5'
    implementation 'com.google.guava:guava:20.0'
    implementation "org.antlr:antlr4:4.6"
    implementation files('lib/choco-solver-2.1.1.jar')
    implementation 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
    implementation 'org.apfloat:apfloat:1.8.3'
    implementation 'org.sat4j:org.sat4j.core:2.3.0'
    implementation 'org.sat4j:org.sat4j.pb:2.3.0'
    implementation 'org.sat4j:org.sat4j.maxsat:2.3.0'
    implementation files('lib/semisolver.jar')

    compileOnly files('lib/jsr305.jar')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:3.0'
    testImplementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'

    jastadd2 'org.jastadd:jastadd:2.3.2'
    antlr 'org.antlr:antlr4:4.6'
}

repositories {
    jcenter()
}

// JastAdd
task generateJastAddAST(type: org.jastadd.JastAddTask) {
    outputDir = file('src/gen/main/jastadd')
    sources = fileTree(dir: 'src/main/java',
                       includes: ['**/*.ast', '**/*.jrag', '**/*.jadd'])
    options = [ '--rewrite=regular', '--visitCheck=false', '--debug',
               '--package=abs.frontend.ast']
}
compileJava.dependsOn 'generateJastAddAST'
sourceSets.main.java.srcDir 'src/gen/main/jastadd'

// antlr
generateGrammarSource {
    arguments += [ '-package', 'abs.frontend.antlr.parser' ]
    outputDirectory=file('src/gen/main/antlr')
}
compileJava.dependsOn 'generateGrammarSource'
sourceSets.main.java.srcDir 'src/gen/main/antlr'

// erlang
task compileErlangBackend(type: Exec) {
    workingDir 'src/main/resources/erlang/absmodel'
    commandLine 'escript', '../bin/rebar', 'compile'
}
jar.dependsOn 'compileErlangBackend'
clean {
    delete fileTree('src/main/resources/erlang/absmodel/').include('**/*.beam')
}

// jar
jar {
    baseName='absfrontend'
    manifest {
        attributes 'Main-Class': 'abs.frontend.parser.Main',
            'Implementation-Title': 'ABS Frontend',
            'Implementation-Version': version_details.lastTag.replaceAll(/^version_/, ''),
            'Bundle-Version': project.version,
            // This is wrong, but we use it anyway for the detailed
            // version string (java.lang.Package only has methods
            // getVersion and getSpecificationVersion)
            'Specification-Version': project.version
    }
    from configurations.runtimeClasspath
        .findAll { it.name.endsWith('jar') }
        .collect { zipTree(it) }
}

test {
    scanForTestClasses=false
    include '/abs/AllTests.class'
}
