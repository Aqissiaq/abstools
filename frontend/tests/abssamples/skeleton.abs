//$Id: skeleton.abs 1007 2010-01-19 10:33:57Z atorjusen $

//Interface declarations, extends is optional 
interface Foo1 {} 
interface Foo2 {}
interface Foo extends Foo1, Foo2 {} 

// "implements" is optional
class BazClass  {  }
class BazClass implements Foo1, Foo2 {  }

//Semicolon after variable or field declaration IFF there are declarations. 
//I.e 
//No semicolon if there are no declarations 
class FooClass implements Foo {  }


//Must have semicolon if there are declarations
class BarClass implements Foo { Int n , Field f ; }

interface Bar { } 

interface Buffer {

    Void init(Foo f, Bar b)
    Void append(Int i)
    Data remove()

}


//Class declarations 
class BoundedBuffer implements Buffer {
    
    //var_or_field_decl_list
    ListofInt buffer, 
    Int max , 
    Int n 
	;

    //Method list 
  
    Void init(Foo x, Bar y){
		
	Int x, Int y ; 


	return null ;
    
    }
	
    Void append(Int i){ skip; return null ; }

}
//MAIN
{
    //var_or_field_decl_list
    Int x , 
	Int y , 
	Bool z , 	
	Buffer o 	
	;
	//Stmts 
	//Assignments to pure expressions
	x = y ; 
	x = null ; 
	x = y.get ;
	x = true ;
	x = false ; 
	/* Assignments to expressions 
	   with side effects.
	 */
	x = new FooClass() ;
	x = o!init();
	x = o!init(y);
	x = o!init(y,z);
	x = o.init(y,z,w);
	x = init(y,z); 
	//Await statements 
	await y? ; 
	await y? && z? ; 
	await y? && z? && w?  ;
	// No boolean guards
	// await true ; 
	//skip, release, if_th_else
	skip ; 
	release ; 
	if x then y = true ; 
	if x then y = true ; else y = false ;
	if x then y = true ; else { y = false ; x = null ; } 
	

	//Stmtblock
	{ x = y ; skip ; await x? ; } 
    skip ;
	//Return  
    return null ;
}

