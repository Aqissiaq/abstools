// The core application consists of a database (type \textsf{Database})
// which is sent queries (type \textsf{Query}) to perform.
// The database spawns a new thread to deal with each incoming query by performing
// a new asynchronous method call.

Module MQDB;

interface Query { Bool perform(); }
interface Database { Bool perform(Query q); }

class Query(Nat min, Nat max) implements Query {
    Bool perform () {
    Time := now;
        await now >= t + min;
        return now <= t + max;
    }
}

class Database() implements Database {
    Bool perform(Query q) {
        q!perform();
        await q?;
        return q.get;
    }
}

// The client (type \textsf{Client}) to the database periodically fires off
// queries to the database at a given rate. The client also expects parameters
// giving the minimum and maximum time taken for queries.

class Client(Database db, Nat min, Nat max, Nat rate) {
    Unit run {
        Time t := now;
        Query q := new Query(min, max);
        Fut<Bool> rc := db.perform(q);
        await now >= t + rate;
        this!run();
        await rc?;
        Bool result := rc.get;
    }
}

The main class sets up the deployment component and associates it with a database
object. It creates a client and runs it. The methods \textsf{max()}, \textsf{min()},
\textsf{rate()} and \textsf{getComponent()} return default configuration parameters
and a default deployment component. These methods are candidates to
be replaced by applying delta modules, see
Subsection~\ref{sec:delta-modules} below.


class Main {
    Int max() { return 10;  // default maximum query time; }
    Int min() { return 5;   // default minimum query time; }
    Int rate() { return 10; // default rate of querying; }

    DeploymentComponent getComponent() {
        return component Core(1); // Default deployment component, explained below
    }
    Unit run() {
        DeploymentComponent dc = this.getComponent()
            Database db = new Database() in dc;
        Client c = new Client(this.min(), this.max(), this.rate());
    }
}

Unit main() {
    new Main().run();
}


The selected deployment component and other parameters are injected into the
core code using delta modules. The first three delta modules replace the
methods that create the deployment component, thereby allowing a different
deployment component to be created. The last two delta modules change the
methods that return the values of the configuration parameters specifying query
processing times and rates. All delta modules are parameterised by the
configuration parameters.


delta MultiCore(Int resources) {
    modifies Main {
        modifies DeploymentComponent getComponent {
            return component Core(resources);
        }
    }
}
delta MemMan(Int memory) {
    modifies Main {
        modifies DeploymentComponent getComponent {
            return component MemMan(memory);
        }
    }
}
delta Cloud(Int memory, Int resources) {
    modifies Main {
        modifies DeploymentComponent getComponent {
            return component Cloud(memory, resources);
        }
    }
}
delta QueryTimes(Int minTime, Int maxTime) {
    modifies Main {
        modifies Int min() { return minTime; }
        modifies Int max() { return maxTime; }
    }
}
delta QueryRate(Int qRate) {
    modifies Main {
        modifies Int rate() { return qRate; }
    }
}


The following \CL configuration script links the feature model with the deltas,
by describing the passing of attributes from selected features into the
appropriate delta modules.


productline Database {
    features MultiCore, Cloud, MemoryManager, QueryTimes, QueryRate;

    delta Core(Core.resources) when MultiCore;
    delta MemMan(MemoryManager.size) when MemoryManager;
    delta Cloud(Cloud.memory, Cloud.resources) when Cloud;
    delta QueryTimes(Times.min, Times.max) when Times;
    delta QueryRate(Rate.rate) when Rate;
}

product DbCloud (
        Cloud{ memory = 32, resources = 1000 },
        QueryRate{ rate = 20 }
        ) { main(); }

