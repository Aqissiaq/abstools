/*
 * BoundedBuffer.abs -- Bounded buffer example
 *
 * A first non-functioning ABS program. To test core parser.  
 *
 */

data Void { }
//data Int // builtin
data Data { }
data ListofInt { }
//data Bool // builtin
data IntList { IntNil , Cons(Int, IntList) } 

def Bool lt(Int x , Int y) = notimplemented


interface Buffer {

    Void init()
    Void append(Int i)
    Data remove()

}

interface Consumer {

} 

interface Producer {

}


class BoundedBuffer implements Buffer {
    
    //A bounded buffer
    ListofInt buffer; 
	Int max ;
	Int n 
	;
    
    // no assignments in variable declarations, so  we need an init method
    {
        buffer = nil ;
        max = 10 ;
        n = 0 ;
        return null ;
    }
    
    Void append(Int i){
        Void x 
        ;
        //await lt(n,max) ; // --- not implemented yet
        if (n_less_than_max)  { // no arithmetic 
            buffer = append_d_to_buffer; //no list operations 
            n = n_pluss_one; // no artihmetic 
        } else {
            //Synchronization without boolean guards
            suspend;
            //Try to append again 
            x = this.append(i);
        }
        //All methods must return something
        return null    ;
    }
    
    Int remove() {
        Int y 
        ; 
        //await n > 0 ; // --- No boolean guards in abs 
        if (n_larger_than_zero) {
            y = head(buffer); // no list  opreations 
            buffer = tail(buffer) ; //d.o. 
            n = n_minus_one ;  // no arithmetic
        } else {
            //Synchronization without boolean guards
            suspend;
            //Try to remove again
            y = this.remove();
		}
        return y ;
    }
    
}    

class Producer (Buffer b) implements Producer {
    
    Void loop(Int i) {
	
        //local vars 
        Void x ; 
	skip ; 
        b = b.append(i); 
        //cannot do a call without assignment Assume a "this" keyword
        x = this!loop(i_plus_one); //i+1
        return null ;
    }
}

class Consumer (Buffer b) implements Consumer {
    
    Void loop() {

        //local vars 
        Void x ;
	skip ; 
        b = b.remove(); 
        //cannot do a call without assignment 
        x = this!loop();
        return null ;
    }
    
}

//Main
{
    //Local vars 
    Buffer buff;
    Producer p;
    Consumer c;
    Void x ; 

    ;
    //Init 
    buff = new BoundedBuffer(); 
    skip ;   
    x = buff.init();
    p = new Producer(); 	
    x = p.init(buff);
    c = new Consumer();
    x = c.init(buff) ;
    x = p!loop(0);
    x = c!loop();
    return null;
}

