aspect VarUsage {


	syn lazy Set<String> Exp.getFreeVars();
	
	eq Exp.getFreeVars() = new HashSet<String>(0); 
	
	eq VarUse.getFreeVars() {
		HashSet<String> res = new HashSet<String>(1);
		res.add(getName());
		return res;
	}
	
	eq Binary.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getLeft().getFreeVars());
		res.addAll(getRight().getFreeVars());
		return res;
	}

	eq Unary.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getOperand().getFreeVars());
		return res;
	}
	
	eq LetExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getExp().getFreeVars());
		res.remove(getVar().getName());
		res.addAll(getVal().getFreeVars());
		return res;				
	}
	
	eq CaseExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getExpr().getFreeVars());
		for (CaseBranch b : getBranchs()) {
		   res.addAll(b.getFreeVars());
		}
		return res;
	}
	
	eq FnApp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq DataConstructorExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq Call.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getCallee().getFreeVars());
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq NewExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		for (PureExp e : getParams()) {
		   res.addAll(e.getFreeVars());
		}
		return res;
	}

	eq GetExp.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
        res.addAll(getPureExp().getFreeVars());
		return res;
	}

	syn lazy Collection<String> CaseBranch.getFreeVars() {
		HashSet<String> res = new HashSet<String>();
		res.addAll(getLeft().getFreeVars());
		res.addAll(getRight().getFreeVars());
		return res;
	}

	syn lazy Collection<String> Pattern.getFreeVars();
	
	eq Pattern.getFreeVars() = new HashSet<String>(0);
	
	eq PatternVarUse.getFreeVars() {
		HashSet<String> res = new HashSet<String>(1);
		res.add(getName());
		return res;		
	}
	
	eq ConstructorPattern.getFreeVars() {
		HashSet<String> res = new HashSet<String>(1);
		for (Pattern p : getParams()) {
			res.addAll(p.getFreeVars());
		}
		return res;		
	}
	
	
}