import java.util.Collection;
import abs.frontend.ast.InterfaceDecl;

aspect TypeHierarchy {

	// True if there is a cycle somewhere on the superinterface chain
	syn boolean InterfaceDecl.hasCycleOnExtendedInterfacesChain() = getSuperTypes().contains(this);

	interface HasTypeHierarchy {
		Collection<InterfaceDecl> getDirectSuperTypes();
	}

	InterfaceDecl implements HasTypeHierarchy;
	ClassDecl implements HasTypeHierarchy;

    /**
     * returns all direct subtypes of this interfaces:
     *  - all interfaces extending this interface
     *  - all classes implementing this interface
     * results are not cached
     */
	public Collection<Decl> InterfaceDecl.getDirectSubTypes() {
		return TypeHierarchyHelper.getDirectSubTypes(this);
	}
	
	/**
     * returns all direct subtypes of this interfaces:
     *  - all interfaces extending this interface
     *  - all classes implementing this interface
     * results are not cached
     */
    public Collection<Decl> InterfaceDecl.getSubTypes() {
        return TypeHierarchyHelper.getSubTypes(this);
    }

    /**
     * returns all direct supertypes
     * results are not cached
     */
    syn Collection<InterfaceDecl> Decl.getDirectSuperTypes() = Collections.emptySet();
    eq InterfaceDecl.getDirectSuperTypes() = TypeHierarchyHelper.getTypeDecls(getExtendedInterfaceUseList());
    eq ClassDecl.getDirectSuperTypes() = TypeHierarchyHelper.getTypeDecls(getImplementedInterfaceUseList());
    
    /**
     * returns all supertypes
     * results are not cached
     */
    public Collection<InterfaceDecl> HasTypeHierarchy.getSuperTypes() {
        return TypeHierarchyHelper.addSuperTypes(new HashSet<InterfaceDecl>(), this);
    }
}