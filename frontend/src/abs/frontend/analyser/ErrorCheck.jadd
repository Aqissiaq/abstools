import java.util.Collection;
import java.util.ArrayList;

aspect ErrorCheck {
  public Collection Model.errors() {
    Collection c = new ArrayList();
    collectErrors(c);
    return c;
  }

  // generic traversal that collects errors in AST
  public void ASTNode.collectErrors(Collection c) {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).collectErrors(c);
  }

  // add an error msg associated with a certain context
  protected void ASTNode.error(Collection c, String s) {
    c.add(getLine(getStart()) + ":" + getColumn(getStart()) + ": " + s);
  }

  // add error for cyclic interface inheritance hierarchy
  public void InterfaceDecl.collectErrors(Collection c) {
    super.collectErrors(c);
    if(hasCycleOnExtendedInterfacesChain())
      error(c, "Cyclic inheritance chain for interface: " + getName());
  }

  // add error for undeclared interfaces
  // TODO: generalise to check other IdUse's too.
  public void InterfaceTypeUse.collectErrors(Collection c) {
    super.collectErrors(c);
    if(decl().isUnknown())
      error(c, "Unknown interface: " + getName());
  }

  // add error for undeclared interfaces
  // TODO: generalise to check other IdUse's too.
  public void DataTypeUse.collectErrors(Collection c) {
    super.collectErrors(c);
    if(decl().isUnknown())
      error(c, "Unknown datatype: " + getName());
  }

  // add error for duplicate interfaces
  public void Model.collectErrors(Collection c) {
    super.collectErrors(c);
    if(duplicateTypeDecls().size() > 0) {
    	for (String name : duplicateTypeDecls()) {
        	error(c, "Duplicate type declaration: " + name);
    	}
    }
  }

}