import java.util.ArrayList;
import java.util.Set;
import java.util.Collections;
import abs.frontend.analyser.DuplicateChecks;

aspect DuplicateCheck {
	// duplicateTypeDecls() - list of duplicate type decl, i.e., type decls
	// declared with the same name
	syn lazy Set<String> Model.duplicateTypeDecls();
	
	// duplicateBehviorDecls() - list of duplicate behavior decl, i.e., behavior decls
	// declared with the same name
	syn lazy Set<String> Model.duplicateBehaviorDecls();

	
	// Equations for above attributes
	
	eq Model.duplicateTypeDecls() {
		// Note: must use fully qualified name to avoid conflicts with ast.List
		java.util.List<String> typeNames = new ArrayList<String>();

		for (Decl decl : getDecls()) {
			if (decl instanceof TypeDecl)
				typeNames.add(decl.getName());
		}
		
		return DuplicateChecks.findDuplicates(typeNames);
	}

	eq Model.duplicateBehaviorDecls() {
		// Note: must use fully qualified name to avoid conflicts with ast.List
		java.util.List<String> behaviorNames = new ArrayList<String>();

		for (Decl decl : getDecls()) {
			if (decl instanceof BehaviorDecl)
				behaviorNames.add(decl.getName());
		}
		
		return DuplicateChecks.findDuplicates(behaviorNames);
	}

}

// Local Variables:
// mode: java
// End:
