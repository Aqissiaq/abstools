aspect TypeAnalysis {

	// ***API***
  
	// *hasCycleOnExtendedInterfaceChain*
	// True if there is a cycle somewhere on the superinterface chain
	syn lazy boolean InterfaceDecl.hasCycleOnExtendedInterfacesChain() circular [true];
  
	
	// *hasCycleOnExtendedInterfacesChain* - true if there is a cycle somewhere on the extendedInterfaces chain
	eq InterfaceDecl.hasCycleOnExtendedInterfacesChain() {
		List<InterfaceTypeUse> refs = getExtendedInterfaceUses(); // names occuring in this declaration
		boolean cycleFound = false;

		for (InterfaceTypeUse ref : refs) {
			TypeDecl decl = ref.declaration(); // Note decl var. distinct from decl() method
			if (decl instanceof InterfaceDecl) {
				cycleFound = cycleFound || ((InterfaceDecl)decl).hasCycleOnExtendedInterfacesChain();
			} else { // Semantic errors in input program can cause dell==null
				if (decl != null)
					System.err.println("panic:  analysing reference to "+ref.getName()); // TODO: add some kind of ErrorObject that is later checked?
			    //       for now, we just ignore it!  FIXME!
			}
		}

		return cycleFound;
	}
	
}

// Local Variables:
// mode: java
// End:
