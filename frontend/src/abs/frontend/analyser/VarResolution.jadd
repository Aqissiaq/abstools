aspect VarResolution {

    // Resolve variable use to their reference place and rewrite
    // according to the definition (local variable reference, field
    // reference, function parameter reference)

    syn boolean Pattern.hasVariable(String name);
    eq PatternVar.hasVariable(String name) = name.equals(getVar().getName());
    eq ConstructorPattern.hasVariable(String name) {
        for (Pattern param : getParams())
            if (param.hasVariable(name)) return true;
        return false;   
    }
    eq LiteralPattern.hasVariable(String name) = false;
    eq UnderscorePattern.hasVariable(String name) = false;

    // Differentiate between function parameters and other variables.
    // FIXME: this does not consider shadowing rebinding of variables
    // inside the function body, e.g. via `case' expressions.
    eq FunctionDecl.getFunDef().functionParameters() = getParams();
    eq Block.getStmt(int index).functionParameters() = new List<VarOrFieldDecl>();
    eq CaseExp.getBranch(int index).functionParameters() {
        List<VarOrFieldDecl> result = new List<VarOrFieldDecl>();
        for (VarOrFieldDecl param : functionParameters())
            if (!getBranch(index).getLeft().hasVariable(param.getName()))
                result.add((VarOrFieldDecl)param.copy());
        return result;
    }
    eq LetExp.getExp().functionParameters() {
        List<VarOrFieldDecl> result = new List<VarOrFieldDecl>();
        // oh to have a remove-if ...
        for (VarOrFieldDecl param : functionParameters())
            if (!param.getName().equals(getVar().getName()))
                result.add((VarOrFieldDecl)param.copy());
        return result;
    }
    inh List<VarOrFieldDecl> Stmt.functionParameters();
    inh List<VarOrFieldDecl> Exp.functionParameters();

    syn boolean VarOrFieldUse.isFunctionParameter();
    eq VarOrFieldUse.isFunctionParameter() {
        for (VarOrFieldDecl param : functionParameters()) {
            if (param.getName().equals(getName())) return true;
        }
        return false;
    }

    rewrite VarOrFieldUse {
        when (isFunctionParameter() && !(this instanceof FunctionParamUse))
            to FunctionParamUse new FunctionParamUse(getName());
    }

}

// Local Variables:
// mode: java
// End:
