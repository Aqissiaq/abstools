import java.util.Map;

aspect ProdSolution {

    //propagate request for getting solution: 
    public boolean ASTNode.getSolution(String product, Map<String,Integer> sol) {
        boolean res = false;
        for(int i = 0; i < getNumChild(); i++)
            res = res || getChildNoTransform(i).getSolution(product, sol);
        return res;
    }


    // TODO: Model: get Module name, and propagate only if it matches.
    public boolean ModuleDecl.getSolution(String product, Map<String,Integer> sol) {
        if (product.startsWith(getName()+".")) {
//            System.out.println("Found module "+product+" - "+getName());
            for (Product p : getProducts()) {
                if (product.equals(p.qualifiedName())) {
                    for(Feature f : p.getFeatures())
                        f.getSolution(true,sol);
                    return true;
                }
            }
        }
//        else {
//            System.out.println("Wrong module "+product+" - "+getName());
//        }
        return false;
    }

//    public void Product.getSolution(String product, Map<String,Integer> sol) {
//        if (product.equalsIgnoreCase(getName())) {
//            for(int i = 0; i < getNumFeature(); i++)
//                getFeature(i).getSolution(true, sol);
//        }
//    }

    // store feature in solution
    public void Feature.getSolution(Boolean found, Map<String,Integer> sol) {
        if (found) {
            sol.put(getName(),new Integer(1));
            for(int i = 0; i < getNumAttrAssignment(); i++)
                getAttrAssignment(i).getSolution(true, sol);

        }
    }

    // store attribute in solution
    public void AttrAssignment.getSolution(Boolean found, Map<String,Integer> sol) {
        if (found) {
            Feature parent = (Feature) getParent().getParent();
            sol.put(parent.getName()+"."+getName(),getValue().getIntValue());
        }
    }

    abstract public Integer Value.getIntValue();
    public Integer IntVal.getIntValue() {
            return getValue();
    }
    public Integer BoolVal.getIntValue() {
            if (getValue()) return new Integer(1);
            else            return new Integer(0);
    }


}  
