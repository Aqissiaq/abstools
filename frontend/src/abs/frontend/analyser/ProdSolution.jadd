import java.util.Map;

aspect ProdSolution {

//    //propagate request for getting solution:
//    public boolean ASTNode.getSolution(String product, Map<String,Integer> sol) {
//        boolean res = false;
//        for(int i = 0; i < getNumChild(); i++)
//            res = res || getChildNoTransform(i).getSolution(product, sol);
//        return res;
//    }

    public boolean Model.getSolution(String product, Map<String,Integer> sol) {
        boolean res = false;
        for (CompilationUnit c : getCompilationUnits())
            res = res || c.getSolution(product,sol);
        return res;
    }

    public boolean CompilationUnit.getSolution(String product, Map<String,Integer> sol) {
        boolean res = false;
        for (ModuleDecl m : getModuleDecls())
            res = res || m.getSolution(product,sol);
        return res;
    }

    public boolean ModuleDecl.getSolution(String product, Map<String,Integer> sol) {
        if (product.startsWith(getName()+".")) {
            for (Product p : getProducts()) {
                if (product.equals(p.qualifiedName())) {
                    for(Feature f : p.getFeatures())
                        f.getSolution(true,sol);
                    return true;
                }
            }
        }
//        else {
//            System.out.println("Wrong module "+product+" - "+getName());
//        }
        return false;
    }


    public void Feature.getSolution(Boolean found, Map<String,Integer> sol) {
        if (found) {
            sol.put(getName(),new Integer(1));
            for(AttrAssignment attr : getAttrAssignments())
                sol.put(getName()+"."+attr.getName(),attr.getValue().getIntValue());
        }
    }

    abstract public Integer Value.getIntValue();
    public Integer IntVal.getIntValue() {
            return getValue();
    }
    public Integer BoolVal.getIntValue() {
            if (getValue()) return new Integer(1);
            else            return new Integer(0);
    }


}  
