aspect VarResolution {

    syn lazy VarOrFieldDecl VarOrFieldUse.getDecl();
    eq VarUse.getDecl() = lookupVarOrFieldName(getName(),false);
    eq FieldUse.getDecl() = lookupVarOrFieldName(getName(),true);

    syn lazy int Block.getNumVar() = getVars().size();
    
    syn lazy Collection<VarDecl> Block.getVars() {
        ArrayList<VarDecl> res = new ArrayList<VarDecl>();
        for (Stmt stmt : getStmts()) {
            if (stmt instanceof VarDeclStmt) {
                res.add(((VarDeclStmt) stmt).getVarDecl());
            } else if (stmt instanceof Block) {
                res.addAll(((Block)stmt).getVars());
            }
        }
        return res;
    }

    
    syn lazy PatternVarDecl Pattern.locallookupVarOrFieldName(String name, boolean fieldOnly);
    eq Pattern.locallookupVarOrFieldName(String name, boolean fieldOnly) = null;
    eq PatternVarUse.locallookupVarOrFieldName(String name, boolean fieldOnly) = null;
    eq PatternVar.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly && getVar().getName().equals(name))
            return getVar();
        return null;
    }
    eq ConstructorPattern.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly) {
            for (Pattern p : getParams()) {
                PatternVarDecl d = p.locallookupVarOrFieldName(name,fieldOnly);
                if (d != null)
                    return d;
            }
        }
        return null;
    }
    
    syn lazy VarOrFieldDecl Decl.locallookupVarOrFieldName(String name, boolean fieldOnly);
    eq Decl.locallookupVarOrFieldName(String name, boolean fieldOnly) = null;
    eq FunctionDecl.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        for (VarOrFieldDecl decl : getParams()) {
            if (decl.getName().equals(name))
                return decl;
        }
        return null;
    }
    
    eq ClassDecl.locallookupVarOrFieldName(String name, boolean fieldOnly) {
   	  for (ParamDecl p : getParams()) {
   		  if (p.getName().equals(name)) 
   			  return p;
   	  }
   	 
        for (FieldDecl d : getFields()) {
            if (d.getName().equals(name))
                return d;
        }
        return null;
    }

    eq Block.getStmt(int i).lookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly) {
            Stmt s = getStmt(i);
            if (s instanceof VarDeclStmt) {
                VarDeclStmt vds = (VarDeclStmt) s;
                VarOrFieldDecl d = vds.locallookupVarOrFieldName(name,fieldOnly);
                if (d != null)
                    return d;
            }
        }       
        if (i > 0)
            return getStmt(i-1).lookupVarOrFieldName(name,fieldOnly);
        else
            return lookupVarOrFieldName(name,fieldOnly);
    }
    
    
    syn lazy VarOrFieldDecl VarDeclStmt.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly) {
            if (getVarDecl().getName().equals(name))
                return getVarDecl();
        }
        return null;
    }
    
    syn lazy VarOrFieldDecl MethodSig.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly) {
            for (ParamDecl d : getParams()) {
                if (d.getName().equals(name))
                    return d;
            }
        }
        return null;
    }
    
    inh VarOrFieldDecl MethodImpl.lookupVarOrFieldName(String name, boolean fieldOnly);
    
    eq ClassDecl.getMethod(int i).lookupVarOrFieldName(String name, boolean fieldOnly) 
        = locallookupVarOrFieldName(name,fieldOnly);
    
    syn lazy VarOrFieldDecl MethodImpl.locallookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly) {
            VarOrFieldDecl d = getMethodSig().locallookupVarOrFieldName(name,fieldOnly);
            if (d != null) 
                return d;
        }
        return lookupVarOrFieldName(name,fieldOnly);
    }

    eq InterfaceDecl.getBody(int i).lookupVarOrFieldName(String name, boolean fieldOnly) 
        = getBody(i).locallookupVarOrFieldName(name,fieldOnly);
    
    eq MethodImpl.getMethodSig().lookupVarOrFieldName(String name, boolean fieldOnly) { 
        if (!fieldOnly) {
            VarOrFieldDecl d = getMethodSig().locallookupVarOrFieldName(name,fieldOnly);
            if (d != null) 
                return d;
        }

        return lookupVarOrFieldName(name,fieldOnly);
    }
    
    eq MethodImpl.getBlock().lookupVarOrFieldName(String name, boolean fieldOnly) {
        return locallookupVarOrFieldName(name,fieldOnly);
    }
    
    eq ModuleDecl.getBlock().lookupVarOrFieldName(String name, boolean fieldOnly) 
        = null;
    eq ModuleDecl.getDecl(int i).lookupVarOrFieldName(String name, boolean fieldOnly) 
        = getDecl(i).locallookupVarOrFieldName(name,fieldOnly);

    eq CaseExp.getBranch(int i).lookupVarOrFieldName(String name, boolean fieldOnly) {
     if (!fieldOnly) {
        VarOrFieldDecl d = getBranch(i).getLeft().locallookupVarOrFieldName(name,fieldOnly);
        if (d != null)
        return d;
     }
     return lookupVarOrFieldName(name,fieldOnly);
    }

    eq LetExp.getExp().lookupVarOrFieldName(String name, boolean fieldOnly) {
        if (!fieldOnly && getVar().getName().equals(name))
            return getVar();
        return lookupVarOrFieldName(name, fieldOnly);
    }
    
    inh VarOrFieldDecl Exp.lookupVarOrFieldName(String name, boolean fieldOnly);
    inh VarOrFieldDecl Stmt.lookupVarOrFieldName(String name, boolean fieldOnly);
    inh VarOrFieldDecl MethodSig.lookupVarOrFieldName(String name, boolean fieldOnly);
    inh VarOrFieldDecl PatternVarUse.lookupVarOrFieldName(String name, boolean fieldOnly);
    
    // replace unbound pattern variables with var decls
    rewrite PatternVarUse {
        when (lookupVarOrFieldName(getName(),false) == null)
            to PatternVar new PatternVar(new PatternVarDecl(getName()));
    }
    
}

// Local Variables:
// mode: java
// End:
