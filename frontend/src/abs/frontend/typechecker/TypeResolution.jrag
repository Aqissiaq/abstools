import java.util.HashSet;

aspect TypeResolution {
  
    // Find the type declaration for a type use.
  
    syn boolean Decl.isFunction() = false;
    syn boolean Decl.isClass() = false;
    syn boolean Decl.isDataType() = false;
    syn boolean Decl.isInterface() = false;
    syn boolean Decl.isTypeSyn() = false;
    syn boolean Decl.isTypeParameter() = false;
  
    eq ClassDecl.isClass() = true;
    eq FunctionDecl.isFunction() = true;
    eq InterfaceDecl.isInterface() = true;
    eq DataTypeDecl.isDataType() = true;
    eq TypeSynDecl.isTypeSyn() = true;
    eq TypeParameterDecl.isTypeParameter() = true;
  
    syn lazy String Name.getString();
    
    eq SimpleName.getString() = getName();
    eq QualifiedName.getString() {
        StringBuffer res = new StringBuffer();
        int i = 0;
        for (SimpleName n : getSimpleNames()) {
            if (i++ > 0) res.append('.');
        	res.append(n.getName());
        }
		return res.toString();
    }
  
    syn String Name.toString() = getString();
    syn String Name.getLastName();
    syn String SimpleName.getLastName() = getName();
    syn String QualifiedName.getLastName() {
    	return getSimpleName(getNumSimpleName()-1).getName();
    }
  
    // Declaration of *decl*

    syn lazy Collection<Decl> Model.getDecls() {
        ArrayList<Decl> res = new ArrayList<Decl>();
        for (CompilationUnit u : getCompilationUnits()) {
        	for (ModuleDecl mdecl : u.getModuleDecls()) {
            	for (Decl d : mdecl.getDecls()) {
                	res.add(d);
            	}
            }
        }
        return res;
    }
    
    syn lazy Block Model.getMainBlock() {
        for (CompilationUnit u : getCompilationUnits()) {
        	if (u.hasMainBlock())
        		return u.getMainBlock();
        }
        return null;
    }

    syn lazy Block CompilationUnit.getMainBlock() {
        for (ModuleDecl m: getModuleDecls()) {
        	if (m.hasBlock())
        		return m.getBlock();
        }
        return null;
    }
    
    syn lazy boolean Model.hasMainBlock() = getMainBlock() != null;
    syn lazy boolean CompilationUnit.hasMainBlock() = getMainBlock() != null;
    
    
    // *decl* refers to the appropriate declaration of the TypeUse or to
    // UnknownDecl if the declaration is missing
    syn lazy Decl TypeUse.getDecl();  
    //   Definitions of *decl*
    eq TypeUse.getDecl() = lookup(getName());
    
    syn lazy Decl Model.lookup(Name name) = localLookup(name);
    // Declaration of *lookup*
    // Finds a declaration (TypeDecl) based on a name, or attribute
    // UnknownDecl if not found
    //   Definitions of *lookup*
    eq Model.getCompilationUnit().lookup(Name name) = localLookup(name);
    eq ParametricDataTypeDecl.getDataConstructor().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getFunctionDef().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getTypeUse().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getParam().lookup(Name name) = localLookup(name);
    
    // ***Implementation***
    
    // Expose *lookup* at various places in the AST
    inh Decl CompilationUnit.lookup(Name name);
    inh Decl Exp.lookup(Name name);
    inh Decl ParametricDataTypeDecl.lookup(Name name);
    inh Decl ParametricFunctionDecl.lookup(Name name);
    
    // *localLookup* - look through the global declarations in the model
    syn lazy Decl Model.localLookup(Name name) {
        for (Decl d : getDecls())
            if (d.getName().equals(name))
                return d;
        return unknownDecl();
    }
    // look through local declarations in parametric datatype, or defer
    // to model
    syn lazy Decl ParametricDataTypeDecl.localLookup(Name name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    // look through local declarations in parametric function, or defer
    // to model
    syn lazy Decl ParametricFunctionDecl.localLookup(Name name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    
    rewrite UnresolvedTypeUse {
        when (getDecl().isInterface())
            to InterfaceTypeUse new InterfaceTypeUse(getName());
        when (getDecl().isDataType()) 
            to DataTypeUse new DataTypeUse(getName());
        when (getDecl().isTypeSyn())
            to DataTypeUse ((TypeSynDecl)getDecl()).getValue().copy();
        when (getDecl().isTypeParameter())
        	to TypeParameterUse new TypeParameterUse(getName());
    }
    
    
    syn lazy Decl FnApp.getDecl() = lookup(getName());
    
    inh lazy DataTypeDecl DataConstructor.getDecl();
    eq DataTypeDecl.getDataConstructor().getDecl() = this;
    
    syn lazy DataConstructor Model.localLookupDataConstructor(Name name) {
        for (Decl d : getDecls()) {
            if (d instanceof DataTypeDecl) {
                DataTypeDecl dataDecl = (DataTypeDecl)d;
                for (DataConstructor c : dataDecl.getDataConstructors()) {
                    if (c.getName().equals(name)) {
                        return c;
                    }
                }
            }
        }
        return null;
    }
    
    syn lazy DataConstructor Model.lookupDataConstructor(Name name);
    eq Model.lookupDataConstructor(Name name) = localLookupDataConstructor(name);
    //eq Model.getDecl().lookupDataConstructor(Name name) = localLookupDataConstructor(name);
    //eq Model.getBlock().lookupDataConstructor(Name name) = localLookupDataConstructor(name);
    
    inh DataConstructor CompilationUnit.lookupDataConstructor(Name name);
    eq Model.getCompilationUnit().lookupDataConstructor(Name name) = localLookupDataConstructor(name);

    inh DataConstructor DataConstructorExp.lookupDataConstructor(Name name);
    inh DataConstructor Pattern.lookupDataConstructor(Name name);
    
    syn lazy DataConstructor DataConstructorExp.getDecl() {
        return lookupDataConstructor(this.getConstructor());
    }
    
    syn lazy Decl Decl.getContextDecl() = this;
    eq MethodImpl.getBlock().getContextDecl() = getContextDecl();
    eq ModuleDecl.getBlock().getContextDecl() = unknownDecl();
    eq ClassDecl.getInitBlock().getContextDecl() = getContextDecl();
    eq ClassDecl.getMethod().getContextDecl() = getContextDecl();
    inh Decl Stmt.getContextDecl();
    inh Decl Exp.getContextDecl();
    inh Decl MethodImpl.getContextDecl();
    
    eq MethodImpl.getBlock().getContextMethod() = this;
    eq ClassDecl.getInitBlock().getContextMethod() = null;
    eq ModuleDecl.getBlock().getContextMethod() = null;
    inh MethodImpl Stmt.getContextMethod();
    
    
    syn lazy MethodImpl ClassDecl.lookupMethod(String name) {
   	 for (MethodImpl m : getMethods()) {
   		 if (m.getMethodSig().getName().equals(name))
   			 return m;
   	 }
   	 return null;
    }
    
    syn lazy MethodSig InterfaceDecl.lookupMethod(String name) {
        for (MethodSig d : getBodys()) {
            if (d.getName().equals(name))
                return d;
        }
        
        for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
            InterfaceDecl id = (InterfaceDecl) u.getDecl();
            MethodSig s = id.lookupMethod(name);
            if (s != null)
                return s;
        }
        
        return null;
    }
}

// Local Variables:
// mode: java
// End:
