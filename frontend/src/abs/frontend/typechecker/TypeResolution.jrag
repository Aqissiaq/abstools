import java.util.HashSet;

aspect TypeResolution {
  
    // Find the type declaration for a type use.
  
    syn boolean Decl.isFunction() = false;
    syn boolean Decl.isClass() = false;
    syn boolean Decl.isDataType() = false;
    syn boolean Decl.isInterface() = false;
    syn boolean Decl.isTypeSyn() = false;
    syn boolean Decl.isTypeParameter() = false;
  
    eq ClassDecl.isClass() = true;
    eq FunctionDecl.isFunction() = true;
    eq InterfaceDecl.isInterface() = true;
    eq DataTypeDecl.isDataType() = true;
    eq TypeSynDecl.isTypeSyn() = true;
    eq TypeParameterDecl.isTypeParameter() = true;
  
    // Declaration of *decl*

    // *decl* refers to the appropriate declaration of the TypeUse or to
    // UnknownDecl if the declaration is missing
    syn lazy TypeDecl TypeUse.getDecl();  
    //   Definitions of *decl*
    eq TypeUse.getDecl() = (TypeDecl) lookup(getName());
    
    syn lazy Decl Model.lookup(String name) = localLookup(name);
    // Declaration of *lookup*
    // Finds a declaration (TypeDecl) based on a name, or attribute
    // UnknownDecl if not found
    //   Definitions of *lookup*
    eq Model.getDecl().lookup(String name) = localLookup(name);
    eq Model.getBlock().lookup(String name) = localLookup(name); // Model's main block
    eq ParametricDataTypeDecl.getDataConstructor().lookup(String name) = localLookup(name);
    eq ParametricFunctionDecl.getFunDef().lookup(String name) = localLookup(name);
    eq ParametricFunctionDecl.getTypeUse().lookup(String name) = localLookup(name);
    eq ParametricFunctionDecl.getParam().lookup(String name) = localLookup(name);

    // ***Implementation***
    
    // Expose *lookup* at various places in the AST
    inh Decl Exp.lookup(String name);
    inh Decl ParametricDataTypeDecl.lookup(String name);
    inh Decl ParametricFunctionDecl.lookup(String name);
    
    // *localLookup* - look through the global declarations in the model
    syn lazy Decl Model.localLookup(String name) {
        for (Decl d : getDecls())
            if (d.getName().equals(name))
                return d;
        return unknownDecl();
    }
    // look through local declarations in parametric datatype, or defer
    // to model
    syn lazy Decl ParametricDataTypeDecl.localLookup(String name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    // look through local declarations in parametric function, or defer
    // to model
    syn lazy Decl ParametricFunctionDecl.localLookup(String name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    
    rewrite UnresolvedTypeUse {
        when (getDecl().isInterface())
            to InterfaceTypeUse new InterfaceTypeUse(getName());
        when (getDecl().isDataType()) 
            to DataTypeUse new DataTypeUse(getName());
        when (getDecl().isTypeSyn())
            to DataTypeUse ((TypeSynDecl)getDecl()).getValue().copy();
        when (getDecl().isTypeParameter())
        	to TypeParameterUse new TypeParameterUse(getName());
    }
    
    
    syn lazy Decl FnApp.getDecl() = lookup(getName());
    
    inh lazy DataTypeDecl DataConstructor.getDecl();
    eq DataTypeDecl.getDataConstructor().getDecl() = this;
    
    syn lazy DataConstructor Model.localLookupDataConstructor(String name) {
        for (Decl d : getDecls()) {
            if (d instanceof DataTypeDecl) {
                DataTypeDecl dataDecl = (DataTypeDecl)d;
                for (DataConstructor c : dataDecl.getDataConstructors()) {
                    if (c.getName().equals(name)) {
                        return c;
                    }
                }
            }
        }
        return null;
    }
    
    syn lazy DataConstructor Model.lookupDataConstructor(String name);
    eq Model.lookupDataConstructor(String name) = localLookupDataConstructor(name);
    eq Model.getDecl().lookupDataConstructor(String name) = localLookupDataConstructor(name);
    eq Model.getBlock().lookupDataConstructor(String name) = localLookupDataConstructor(name);
    
    inh DataConstructor DataConstructorExp.lookupDataConstructor(String name);
    inh DataConstructor Pattern.lookupDataConstructor(String name);
    
    syn lazy DataConstructor DataConstructorExp.getDecl() {
        return lookupDataConstructor(this.getConstructor());
    }
    
    syn lazy Decl Decl.getContextDecl() = this;
    eq MethodImpl.getBlock().getContextDecl() = getContextDecl();
    eq Model.getBlock().getContextDecl() = unknownDecl();
    eq ClassDecl.getMethod().getContextDecl() = getContextDecl();
    inh Decl Stmt.getContextDecl();
    inh Decl Exp.getContextDecl();
    inh Decl MethodImpl.getContextDecl();
    
    eq MethodImpl.getBlock().getContextMethod() = this;
    eq Model.getBlock().getContextMethod() = null;
    inh MethodImpl Stmt.getContextMethod();
    
    
    syn lazy MethodImpl ClassDecl.lookupMethod(String name) {
   	 for (MethodImpl m : getMethods()) {
   		 if (m.getMethodSig().getName().equals(name))
   			 return m;
   	 }
   	 return null;
    }
    
    syn lazy MethodSig InterfaceDecl.lookupMethod(String name) {
        for (MethodSig d : getBodys()) {
            if (d.getName().equals(name))
                return d;
        }
        return null;
    }
}

// Local Variables:
// mode: java
// End:
