import java.util.HashSet;

aspect TypeResolution {
  
    // Find the type declaration for a type use.
  
    syn boolean Decl.isFunction() = false;
    syn boolean Decl.isClass() = false;
    syn boolean Decl.isDataType() = false;
    syn boolean Decl.isDataConstructor() = false;
    syn boolean Decl.isInterface() = false;
    syn boolean Decl.isTypeSyn() = false;
    syn boolean Decl.isTypeParameter() = false;
  
    eq ClassDecl.isClass() = true;
    eq FunctionDecl.isFunction() = true;
    eq InterfaceDecl.isInterface() = true;
    eq DataTypeDecl.isDataType() = true;
    eq DataConstructor.isDataConstructor() = true;
    eq TypeSynDecl.isTypeSyn() = true;
    eq TypeParameterDecl.isTypeParameter() = true;
  
    syn List Name.toNameList();
    eq SimpleName.toNameList() = new List().add(new SimpleName(this.getName()));
    eq QualifiedName.toNameList() {
       List res = new List();
       for (SimpleName n : getSimpleNames()) {
           res.add(new SimpleName(n.getName()));
       }
       return res;
    }
  
    syn Boolean Name.isSimple();
    eq SimpleName.isSimple() = true;
    eq QualifiedName.isSimple() = false;
  
    syn lazy String Name.getString();
    
    eq SimpleName.getString() = getName();
    eq QualifiedName.getString() {
        StringBuffer res = new StringBuffer();
        int i = 0;
        for (SimpleName n : getSimpleNames()) {
            if (i++ > 0) res.append('.');
        	res.append(n.getName());
        }
		return res.toString();
    }
  
    syn String Name.toString() = getString();
    syn SimpleName Name.getLastName();
    syn SimpleName SimpleName.getLastName() = this;
    syn SimpleName QualifiedName.getLastName() {
    	return getSimpleName(getNumSimpleName()-1);
    }
    syn Name QualifiedName.getModuleName() {
    	ArrayList<String> res = new ArrayList<String>();
        for (int i=0; i < getNumSimpleName()-1; i++) {
            SimpleName n = getSimpleName(i);
        	res.add(n.getName());
        }
		return QualifiedNameUtil.create(res);
    }
  
    // Declaration of *decl*


	syn lazy Collection<QualifiedName> ModuleDecl.getExportedNames() {
	   ArrayList<QualifiedName> res = new ArrayList<QualifiedName>();
	   for (Export e : this.getExports()) {
		   if (e instanceof StarExport) {
			   for (Decl d : this.getDeclList()) {
				   res.add(QualifiedNameUtil.create(this.getName(), d.getName()));
			   }
		   } else if (e instanceof NamedExport) {
			   NamedExport ne = (NamedExport) e;
			   for (Name n : ne.getNames()) {
				   res.add(TypeCheckerHelper.getImportedName(this,n));
			   }
		   }
	   }
	   return res;
	}

    syn lazy Collection<Decl> Model.getDecls() {
        ArrayList<Decl> res = new ArrayList<Decl>();
        for (CompilationUnit u : getCompilationUnits()) {
        	for (ModuleDecl mdecl : u.getModuleDecls()) {
            	for (Decl d : mdecl.getDecls()) {
                	res.add(d);
            	}
            }
        }
        return res;
    }
    
    syn lazy Block Model.getMainBlock() {
        for (CompilationUnit u : getCompilationUnits()) {
        	if (u.hasMainBlock())
        		return u.getMainBlock();
        }
        return null;
    }

    syn lazy Block CompilationUnit.getMainBlock() {
        for (ModuleDecl m: getModuleDecls()) {
        	if (m.hasBlock())
        		return m.getBlock();
        }
        return null;
    }
    
    syn lazy boolean Model.hasMainBlock() = getMainBlock() != null;
    syn lazy boolean CompilationUnit.hasMainBlock() = getMainBlock() != null;
    
    
    // *decl* refers to the appropriate declaration of the TypeUse or to
    // UnknownDecl if the declaration is missing
    syn lazy Decl TypeUse.getDecl();  
    //   Definitions of *decl*
    eq TypeUse.getDecl() = lookup(getName());
    
    syn lazy ModuleDecl Model.lookupModule(Name name) {
    	for (CompilationUnit u : getCompilationUnits()) {
			for (ModuleDecl d : u.getModuleDecls()) {
				if (d.getName().equals(name)) {
					return d;
				}
			}    			
    	}
    	return null;
    }
    
    inh ModuleDecl CompilationUnit.lookupModule(Name name);
    inh ModuleDecl ModuleDecl.lookupModule(Name name);
    eq CompilationUnit.getModuleDecl().lookupModule(Name name) = lookupModule(name);
    eq Model.getCompilationUnit().lookupModule(Name name) = lookupModule(name);
    
    
    syn lazy Decl Model.lookup(Name name) = localLookup(name);

    // UnknownDecl if not found
    eq Model.getCompilationUnit().lookup(Name name) = localLookup(name);
    eq ParametricDataTypeDecl.getDataConstructor().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getFunctionDef().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getTypeUse().lookup(Name name) = localLookup(name);
    eq ParametricFunctionDecl.getParam().lookup(Name name) = localLookup(name);
    
    // Expose *lookup* at various places in the AST
    inh Decl CompilationUnit.lookup(Name name);
    inh Decl ModuleDecl.lookup(Name name);
    inh Decl Exp.lookup(Name name);
    inh Decl Pattern.lookup(Name name);
    inh Decl ParametricDataTypeDecl.lookup(Name name);
    inh Decl ParametricFunctionDecl.lookup(Name name);

	eq CompilationUnit.getModuleDecl(int i).lookup(Name name) {
		ModuleDecl mod = getModuleDecl(i);
		Decl d = mod.localLookup(name);
		if (d != unknownDecl())
			return d;
			
		Name qualName = TypeCheckerHelper.getImportedName(mod,name);
		if (qualName != null) {			
	    	lookup(qualName);
	    } else {	
	   		return unknownDecl();
	    } 			
	}	    
    
    
    syn lazy Decl ModuleDecl.localLookup(Name name) {
       SimpleName simpleName = null; 
       if (!name.isSimple()) {
          Name moduleName = ((QualifiedName)name).getModuleName();
          if (moduleName.toString().equals(getName().toString())) {
          	 simpleName = name.getLastName();
          }
       } else {
         simpleName = (SimpleName) name;
       }
       
       if (simpleName != null) {
          for (Decl d : getDecls()) {
            if (d.getName().equals(simpleName.getName()))
		        return d;       
		        
            if (d instanceof DataTypeDecl) {
                DataTypeDecl dataDecl = (DataTypeDecl)d;
                for (DataConstructor c : dataDecl.getDataConstructors()) {
                    if (c.getName().equals(simpleName.getName())) {
                        return c;
                    }
                }
            }
		        
		  }
       }
       return unknownDecl();
    }
    
    // *localLookup* - look through the global declarations in the model
    syn lazy Decl Model.localLookup(Name name) {
    	if (name.isSimple())
    	    return unknownDecl();
    	QualifiedName qn = (QualifiedName) name;
    	ModuleDecl md = lookupModule(qn.getModuleName());
    	return md.localLookup(name);
    }
    
    
    // look through local declarations in parametric datatype, or defer
    // to model
    syn lazy Decl ParametricDataTypeDecl.localLookup(Name name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    // look through local declarations in parametric function, or defer
    // to model
    syn lazy Decl ParametricFunctionDecl.localLookup(Name name) {
        for (TypeParameterDecl d : getTypeParameters())
            if (d.getName().equals(name))
                return d;
        return lookup(name);
    }
    
    rewrite UnresolvedTypeUse {
        when (getDecl().isInterface())
            to InterfaceTypeUse new InterfaceTypeUse(getName());
        when (getDecl().isDataType()) 
            to DataTypeUse new DataTypeUse(getName());
        when (getDecl().isTypeSyn())
            to DataTypeUse ((TypeSynDecl)getDecl()).getValue().copy();
        when (getDecl().isTypeParameter())
        	to TypeParameterUse new TypeParameterUse(getName());
    }
    
    
    syn lazy Decl FnApp.getDecl() = lookup(getName());
    
    inh lazy DataTypeDecl DataConstructor.getDataTypeDecl();
    eq DataTypeDecl.getDataConstructor().getDataTypeDecl() = this;
    eq ModuleDecl.getDecl().getDataTypeDecl() = null; // never called
    
    syn lazy Decl DataConstructorExp.getDecl() {
        return lookup(this.getConstructor());
    }
    
    syn lazy Decl Decl.getContextDecl() = this;
    eq MethodImpl.getBlock().getContextDecl() = getContextDecl();
    eq ModuleDecl.getBlock().getContextDecl() = unknownDecl();
    eq ClassDecl.getInitBlock().getContextDecl() = getContextDecl();
    eq ClassDecl.getMethod().getContextDecl() = getContextDecl();
    inh Decl Stmt.getContextDecl();
    inh Decl Exp.getContextDecl();
    inh Decl MethodImpl.getContextDecl();
    
    eq MethodImpl.getBlock().getContextMethod() = this;
    eq ClassDecl.getInitBlock().getContextMethod() = null;
    eq ModuleDecl.getBlock().getContextMethod() = null;
    inh MethodImpl Stmt.getContextMethod();
    
    
    syn lazy MethodImpl ClassDecl.lookupMethod(String name) {
   	 for (MethodImpl m : getMethods()) {
   		 if (m.getMethodSig().getName().equals(name))
   			 return m;
   	 }
   	 return null;
    }
    
    syn lazy MethodSig InterfaceDecl.lookupMethod(String name) {
        for (MethodSig d : getBodys()) {
            if (d.getName().equals(name))
                return d;
        }
        
        for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
            InterfaceDecl id = (InterfaceDecl) u.getDecl();
            MethodSig s = id.lookupMethod(name);
            if (s != null)
                return s;
        }
        
        return null;
    }
}

// Local Variables:
// mode: java
// End:
