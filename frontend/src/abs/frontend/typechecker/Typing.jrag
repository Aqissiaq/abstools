import abs.common.*;

import abs.frontend.typechecker.*;
import java.util.Map;

aspect Typing {
    
    syn Type Model.getUnitType() = new DataTypeType((DataTypeDecl)lookup("Unit"));
    syn Type Model.getIntType() = new DataTypeType((DataTypeDecl)lookup("Int"));
    syn Type Model.getBoolType() = new DataTypeType((DataTypeDecl)lookup("Bool"));
    syn Type Model.getStringType() = new DataTypeType((DataTypeDecl)lookup("String"));
    syn lazy Type Model.getFutType(Type typeArg) = new DataTypeType((DataTypeDecl)lookup("Fut"), typeArg);

    eq Model.getBlock().getUnitType() = getUnitType();
    eq Model.getBlock().getIntType() = getIntType();
    eq Model.getBlock().getBoolType() = getBoolType();
    eq Model.getBlock().getStringType() = getStringType();
    eq Model.getBlock().getFutType(Type typeArg) = getFutType(typeArg);

    inh Type Exp.getUnitType();
    inh Type Exp.getIntType();
    inh Type Exp.getBoolType();
    inh Type Exp.getStringType();
    inh Type Exp.getFutType(Type typeArg);
    
    inh Type Stmt.getUnitType();
    inh Type Stmt.getBoolType();

    inh Type Guard.getBoolType();
    
    eq Model.getDecl().getUnitType() = getUnitType();
    eq Model.getDecl().getIntType() = getIntType();
    eq Model.getDecl().getBoolType() = getBoolType();
    eq Model.getDecl().getStringType() = getStringType();
    eq Model.getDecl().getFutType(Type typeArg) = getFutType(typeArg);

    inh Type Decl.getUnitType();
    inh Type Decl.getIntType();
    inh Type Decl.getBoolType();
    inh Type Decl.getStringType();
    inh Type Decl.getFutType(Type typeArg);
    
    eq ClassDecl.getMethod().getUnitType() = getUnitType();
    inh Type MethodImpl.getUnitType();

    syn lazy Type Decl.getType();
    
    eq ClassDecl.getType() = new UnionType(getImplementedInterfaceUses());
    eq FunctionDecl.getType() = getTypeUse().getType();

    eq DataTypeDecl.getType() {
        return new DataTypeType(this);
    }
    eq ParametricDataTypeDecl.getType() { 
   	 return new DataTypeType(this); 
    }
    eq InterfaceDecl.getType() { 
        return new InterfaceType(this);
    }
    eq TypeParameterDecl.getType() { 
        return new TypeParameter(this);
    }
    eq TypeSynDecl.getType() { 
        return getValue().getType(); 
    }
    
    eq UnknownDecl.getType() = UnknownType.INSTANCE;
    
    syn lazy Type VarOrFieldDecl.getType() = UnknownType.INSTANCE;
    eq TypedVarOrFieldDecl.getType() = getAccess().getType();
    eq PatternVarDecl.getType() {
   	 PatternVar v = (PatternVar) getParent(); 
   	 return v.getType();
    }
    
    /* STMTS */
    syn Type Stmt.getType() = getUnitType();
    eq ReturnStmt.getType() = getRetExp().getType();
    
    /* EXPRESSIONS */
    
    syn lazy Type Exp.getType();
    eq AsyncCall.getType() {  
        Type t = getCallee().getType();
        MethodSig s = t.lookupMethod(getMethod());
        if (s == null)
            return UnknownType.INSTANCE;
        return getFutType(s.getReturnType().getType());
    }

    eq SyncCall.getType() { 
        Type t = getCallee().getType();
        MethodSig s = t.lookupMethod(getMethod());
        if (s == null)
            return UnknownType.INSTANCE;
        return s.getReturnType().getType();
    }
    eq GetExp.getType() = getPureExp().getType();
    eq NewExp.getType() {
        Decl d = lookup(getClassRef());
        if (d == null) return UnknownType.INSTANCE;
        return d.getType();
    }
    
    eq FieldUse.getType() { 
        VarOrFieldDecl d = getDecl();
        if (d == null) return UnknownType.INSTANCE;
        return d.getType();
    }
    eq VarUse.getType() { 
        VarOrFieldDecl d = getDecl();
        if (d == null) return UnknownType.INSTANCE;
        return d.getType();
    }
    eq TypeUse.getType() = getDecl().getType();
    eq ParametricDataTypeUse.getType() {
        Decl d = getDecl();
        if (d == null || !(d instanceof ParametricDataTypeDecl))
            return UnknownType.INSTANCE;
        
        return new DataTypeType((ParametricDataTypeDecl)d,getParams());
    }
    
    eq ArithmeticExp.getType() = getIntType();
    eq BoolExp.getType() = getBoolType();
    eq RelationalExpr.getType() = getBoolType();
    eq CaseExp.getType() = getBranch(0).getType(); 
    eq FnApp.getType() {
       Decl d = lookup(getName());
       if (d == null || !d.isFunction()) return UnknownType.INSTANCE;
   	 
   	 Type declaredResultType = ((FunctionDecl)d).getTypeUse().getType();
   	 if (declaredResultType.isTypeParameter() && d instanceof ParametricFunctionDecl) {
   		 ParametricFunctionDecl funDecl = (ParametricFunctionDecl) d;
   		 Map<TypeParameter, Type> typeBinding = TypeCheckerHelper.getTypeParamBindingFromParamDecl(funDecl.getParams(),getParams());
   		 return TypeCheckerHelper.applyBinding(typeBinding, declaredResultType);
   	 } else {
   		 return declaredResultType;
   	 }
    }
    eq DataConstructorExp.getType() {
   	 DataConstructor d = lookupDataConstructor(this.getConstructor());
   	 if (d == null) return UnknownType.INSTANCE;

   	 DataTypeDecl dataDecl = d.getDecl();
   	 Type declaredResultType = dataDecl.getType();
   	 if (declaredResultType.isTypeParameter() && dataDecl instanceof ParametricDataTypeDecl) {
   		 Map<TypeParameter, Type> typeBinding = TypeCheckerHelper.getTypeParamBindingFromDataTypeUse(d.getConstructorArgs(),getParams());
   		 return TypeCheckerHelper.applyBinding(typeBinding, declaredResultType);
   	 } else {
   		 return declaredResultType;
   	 }
   	 
    }
    eq FunVar.getType() { throw new NotImplementedYetException("Type Checker",this); }
    eq LetExp.getType() = getExp().getType();
    eq IntLiteral.getType() = getIntType();
    eq StringLiteral.getType() =  getStringType();
    eq NullExp.getType() = NullType.INSTANCE;
    eq ThisExp.getType() = getContextDecl().getType();
    eq MinusExp.getType() = getIntType();
    eq NegExp.getType() = getBoolType();
    
    syn lazy Type CaseBranch.getType() = getRight().getType();

    inh Type CaseBranch.getPatternExpType();
    eq CaseExp.getBranch(int i).getPatternExpType() = getExpr().getType();
    
    syn lazy Type Pattern.getType();
    eq ConstructorPattern.getType() = getInhType();
    eq PatternVar.getType() = getInhType();  
    eq UnderscorePattern.getType() = AnyType.INSTANCE;
    eq LiteralPattern.getType() = getLiteral().getType();
    
    inh Type Pattern.getInhType();
    eq CaseBranch.getLeft().getInhType() {
        return getPatternExpType();
    }
    eq ConstructorPattern.getParam(int i).getInhType() {
        DataConstructor d = lookupDataConstructor(this.getConstructor());
        if (d == null) return null;
        if (i >= d.getNumConstructorArg()) 
            return UnknownType.INSTANCE;

        Type declaredType = d.getConstructorArg(i).getType(); 
        
        Type dataType = getType();
        if (dataType.isUnknownType())
            return UnknownType.INSTANCE;

        DataTypeType dt = (DataTypeType) dataType;
        return dt.substituteTypeParams(declaredType);
    }

}