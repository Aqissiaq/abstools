// -*- mode: java; tab-width: 4; -*-

aspect GenerateMaude {

    // FIXME: this does not consider shadowing rebinding of variables
    // inside the function body
    eq Block.getStmt(int index).functionParameters() = new List<VarOrFieldDecl>();
    eq FunctionDecl.getFunDef().functionParameters() = getParams();
    inh List<VarOrFieldDecl> Stmt.functionParameters();
    inh List<VarOrFieldDecl> Exp.functionParameters();

    syn boolean VarOrFieldUse.isFunctionParameter();
    eq VarOrFieldUse.isFunctionParameter() {
        for (VarOrFieldDecl param : functionParameters()) {
            if (param.getName().equals(getName())) return true;
        }
        return false;
    }

    // New rule!  Everyone can expect sufficient whitespace to be set
    // up, but has to leave whitespace at the end if needed.

    public void Model.generateMaude(java.io.PrintStream stream) {
        stream.println("in abs-interpreter\n\nmod PROGRAM is\nprotecting ABS-SIMULATOR .\n");
        for (Decl decl : getDecls()) {
        	decl.generateMaude(stream);
        }
        if (hasBlock()) {
        	getBlock().generateMaude(stream);
        }
        stream.println("endm");
    }

	abstract public void Decl.generateMaude(java.io.PrintStream stream);

	public void InterfaceDecl.generateMaude(java.io.PrintStream stream) {
		stream.println("*** Interface code ...");
	}

	public void DataTypeDecl.generateMaude(java.io.PrintStream stream) {
		stream.println("*** Datatype " + getName());
	}

	public void TypeSynDecl.generateMaude(java.io.PrintStream stream) {
		stream.println("*** Type synonym: Datatype " + getName());
	}

	
	public void FunctionDecl.generateMaude(java.io.PrintStream stream) {
		boolean inList = false;
		stream.print("eq \"" + getName() + "\"(");
		for (VarOrFieldDecl param : getParams()) {
			if (inList == false) inList = true; else stream.print(" :: ");
			stream.print(param.getName() + ":Data");
		}
		stream.print(") =\n   ") ;
		getFunDef().generateMaude(stream);
        stream.println(".");
	}

    abstract public void Exp.generateMaude(java.io.PrintStream stream);

    public void Access.generateMaude(java.io.PrintStream stream) {
        stream.println("--- Hey, I didn't expect this to be generated! " + getClass().toString());
    }

    abstract public void Exp.generateMaudeAsStatement(java.io.PrintStream stream, String var);
    public void PureExp.generateMaudeAsStatement(java.io.PrintStream stream, String var)
    {
        stream.print("noStmt");
    }

    public void EffExp.generateMaude(java.io.PrintStream stream) {
        stream.println("--- Hey, you used a side-effecting expression as a normal one! " + getClass().toString());
    }
    public void AsyncCall.generateMaudeAsStatement(java.io.PrintStream stream, String var)
    {
        boolean inlist = false;
        stream.print("call(@ \"" + var + "\", ");
        getCallee().generateMaude(stream);
        stream.print(", " + getMethod() + ", ");
        if (getNumParam() == 0) {
            stream.print("emp");
        } else {
            stream.print("(");
            for (PureExp param : getParams()) {
                if (inlist) stream.print(":: "); else inlist = true;
                param.generateMaude(stream);
            }
            stream.print(")");
        }
        stream.print(") ");
    }

    public void SyncCall.generateMaudeAsStatement(java.io.PrintStream stream, String var)
    {
        boolean inlist = false;
        stream.print("call(@ \"" + var + "_future\", ");
        getCallee().generateMaude(stream);
        stream.print(", " + getMethod() + ", ");
        if (getNumParam() == 0) {
            stream.print("emp");
        } else {
            stream.print("(");
            for (PureExp param : getParams()) {
                if (inlist) stream.print(":: "); else inlist = true;
                param.generateMaude(stream);
            }
            stream.print(")");
        }
        stream.print(") ; get( @ \"" + var + "_future\", @ \"" + var + "\") ");
    }

    public void GetExp.generateMaudeAsStatement(java.io.PrintStream stream, String var)
    {
        stream.print("get(");
        getPureExp().generateMaude(stream);
        stream.print(", @ \"" + var + "\") ");        
    }

    public void NewExp.generateMaudeAsStatement(java.io.PrintStream stream, String var)
    {
        boolean inlist = false;
        stream.print("new(@ \"" + var + "\", \"" + getClassRef() + "\", ");
        if (getNumParam() == 0) {
            stream.print("emp");
        } else {
            stream.print("(");
            for (PureExp param : getParams()) {
                if (inlist) stream.print(":: "); else inlist = true;
                param.generateMaude(stream);
            }
            stream.print(")");
        }
        stream.print(") ");
    }

    abstract public void LiteralExp.generateMaude(java.io.PrintStream stream);

    public void StringLiteral.generateMaude(java.io.PrintStream stream) {
        stream.print("\"str\"[\"" + getContent() + "\"] ");
    }

    public void IntLiteral.generateMaude(java.io.PrintStream stream) {
        stream.print("\"int\"[" + getContent() + "] ");
    }

    public void BoolLiteral.generateMaude(java.io.PrintStream stream) {
        stream.print("\"bool\"[" + getContent().toLowerCase() + "] ");
    }

    syn String Unary.maudePrefixOperator();
    eq MinusExp.maudePrefixOperator() = "-";
    eq NegExp.maudePrefixOperator() = "~";
    public void Unary.generateMaude(java.io.PrintStream stream) {
        stream.print("\"" + maudePrefixOperator() + "\"( ");
        getOperand().generateMaude(stream);
        stream.print(") ");
    }

    syn String Binary.maudeInfixOperator();
    eq EqExp.maudeInfixOperator() = "=";
    eq NotEqExp.maudeInfixOperator() = "/=";
    eq AndBoolExp.maudeInfixOperator() = "&&";
    eq OrBoolExp.maudeInfixOperator() = "||";
    eq LTExp.maudeInfixOperator() = "<";
    eq GTExp.maudeInfixOperator() = ">";
    eq LTEQExp.maudeInfixOperator() = "<=";
    eq GTEQExp.maudeInfixOperator() = ">=";
    eq AddAddExp.maudeInfixOperator() = "+";
    eq SubAddExp.maudeInfixOperator() = "-";
    eq MultMultExp.maudeInfixOperator() = "*";
    eq DivMultExp.maudeInfixOperator() = "/";
    eq ModMultExp.maudeInfixOperator() = "%";
    public void Binary.generateMaude(java.io.PrintStream stream) {
        stream.print("\"" + maudeInfixOperator() + "\"( ");
        getLeft().generateMaude(stream);
        stream.print(":: ");
        getRight().generateMaude(stream);
        stream.print(") ");
    }

    public void ThisExp.generateMaude(java.io.PrintStream stream) {
        stream.print("@ \"this\" ");
    }

    public void NullExp.generateMaude(java.io.PrintStream stream) {
        stream.print("null ");
    }

    public void DataConstructorExp.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        stream.print("\"" + getConstructor() + "\"[ ");
        for (PureExp param : getParams()) {
            if (inlist) stream.print(":: "); else inlist = true;
            param.generateMaude(stream);
        }
        stream.print("] ");
    }

	public void VarOrFieldUse.generateMaude(java.io.PrintStream stream) {
        if (isFunctionParameter()) {
            stream.print(getName() + ":Data ");
        } else {
            stream.print("@ \"" + getName() + "\" ");
        }
	}

    public void FunVar.generateMaude(java.io.PrintStream stream) {
        stream.print(getName() + ":Data ");
    }

    public void FnApp.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        stream.print("\"" + getName() + "\"( ");
        for (PureExp param : getParams()) {
            if (inlist) stream.print(":: "); else inlist = true;
            param.generateMaude(stream);
        }
        stream.print(") ");
    }

    public void LetExp.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        stream.print("let @ \"" + getVar().getName() + "\" = ");
        getVal().generateMaude(stream);
        stream.print("in ");
        getExp().generateMaude(stream);
    }

	public void CaseExp.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
		stream.print("case " );
		getExpr().generateMaude(stream);
		stream.print("of { ");
		for (CaseBranch branch : getBranchess()) {
            if (inlist) stream.print("; "); else inlist = true;
			branch.generateMaude(stream);
		}
		stream.print("} ");
	}
	
	public void CaseBranch.generateMaude(java.io.PrintStream stream) {
		getLeft().generateMaude(stream);
        stream.print("=> ");
        getRight().generateMaude(stream);
	}
	
	abstract public void Pattern.generateMaude(java.io.PrintStream stream);

    public void UnderscorePattern.generateMaude(java.io.PrintStream stream) {
        stream.print("@ \"_\" ");
    }

    public void PatternVar.generateMaude(java.io.PrintStream stream) {
        getVar().generateMaude(stream);
    }

    public void LiteralPattern.generateMaude(java.io.PrintStream stream) {
        getLiteral().generateMaude(stream);
    }

    public void ConstructorPattern.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        stream.print("\"" + getConstructor() + "\"[ ");
        for (Pattern pattern : getParamList()) {
            if (inlist) stream.print(":: "); else inlist = true;
            pattern.generateMaude(stream);
        }
        stream.print("] ");
    }

	public void UnknownDecl.generateMaude(java.io.PrintStream stream) {
		stream.println("--- Unknown declaration " + getName());
	}

    public void ClassDecl.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
		stream.println("< " + getName() + " : Class |");
        stream.print("  Param: ");
        if (getNumParam() == 0) {
            stream.print("noVid");
        } else {
            stream.print("(");
            for (ParamDecl param : getParams()) {
                if (inlist) stream.print(", "); else inlist = true;
                stream.print("@ \"" + param.getName() + "\"");
            }
            stream.print(")");
        }
        stream.print(",\n  Att: ");
        if (getBody().getNumField() == 0) {
            stream.print("noSubst");
        } else {
            inlist = false;
            for (VarDecl field : getBody().getFields()) {
                if (inlist) stream.print(":: "); else inlist = true;
                stream.print("@ \"" + field.getName() + "\" |-> null ");
            }
        }
        stream.print(",\n  Mtds: ");
        // DANGER: here we generate a method list from 2 sources: the
        // init block and the defined methods.  `inlist's value carries
        // meaning across these two blocks.
        inlist = false;
        if (getBody().hasInitBlock()) {
            // hand-craft "init" method
            stream.print("< \"init\" : Method | Param: noVid, Att: noSubst");
            stream.print(",\n      Code: ");
            if (getBody().getInitBlock().getNumStmt() == 0) {
                stream.print("noStmt");
            } else {
                inlist = false;
                for (Stmt stmt : getBody().getInitBlock().getStmts()) {
                    if (inlist) stream.print("; "); else inlist = true;
                    stmt.generateMaude(stream);
                }
            }
            inlist = true;
        }
        if (getBody().getNumMethod() == 0) {
            stream.print("noMethod");
        } else {
            stream.print("(");
            for (Method method : getBody().getMethods()) {
                if (inlist) stream.print(",\n    "); else inlist = true;
                method.generateMaude(stream);
            }
            stream.print(")");
        }
        stream.println(",\n  Ocnt: 0 > ");
	}
	
    public void Method.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        stream.print("< \"" + getMethodSig().getName() + "\" : Method | Param: ");
        if (getMethodSig().getNumParam() == 0) {
            stream.print("noVid");
        } else {
            stream.print("(");
            for (ParamDecl param : getMethodSig().getParams()) {
                if (inlist) stream.print(", "); else inlist = true;
                stream.print("@ \"" + param.getName() + "\"");
            }
            stream.print(")");
        }
        stream.print(", Att: ");
        if (getBlock().getNumField() == 0) {
            stream.print("noSubst");
        } else {
            inlist = false;
            for (VarDecl var : getBlock().getFields()) {
                if (inlist) stream.print(":: "); else inlist = true;
                stream.print("@ \"" + var.getName() + "\" |-> null ");
            }
        }
        stream.print(",\n      Code: ");
        if (getBlock().getNumStmt() == 0) {
            stream.print("noStmt");
        } else {
            inlist = false;
            for (Stmt stmt : getBlock().getStmts()) {
                if (inlist) stream.print("; "); else inlist = true;
                stmt.generateMaude(stream);
            }
        }
        stream.print("> ");
    }

    abstract public void Stmt.generateMaude(java.io.PrintStream stream);

    public void SkipStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("skip ");
    }

    public void EmptyStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("noStmt ");
    }


    public void AssignStmt.generateMaude(java.io.PrintStream stream) {
        if (getValue() instanceof PureExp) {
            stream.print("assign( @ \"" + getVar().getName() + "\"; ");
            getValue().generateMaude(stream);
            stream.print(") ");
        } else {
            getValue().generateMaudeAsStatement(stream, getVar().getName());
        }
    }

    public void ReturnStmt.generateMaude(java.io.PrintStream stream) {
        if (getRetExp() instanceof PureExp) {
            stream.print("return( ");
            getRetExp().generateMaude(stream);
            stream.print(") ");
        } else {
            getRetExp().generateMaudeAsStatement(stream, "_");
            stream.print("; return(@ \"_\") " );
        }
    }

    abstract public void Guard.generateMaude(java.io.PrintStream stream);

    public void ClaimGuard.generateMaude(java.io.PrintStream stream) {
        stream.print("?(");
        getVar().generateMaude(stream);
        stream.print(") ");
    }

    public void AndGuard.generateMaude(java.io.PrintStream stream) {
        stream.print("\"&&\"(");
        getLeft().generateMaude(stream);
        stream.print(":: ");
        getRight().generateMaude(stream);
        stream.print(") ");
    }

    public void ExpGuard.generateMaude(java.io.PrintStream stream) {
        getPureExp().generateMaude(stream);
    }

    public void SuspendStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("release ");
    }

    public void AwaitStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("await ");
        getGuard().generateMaude(stream);
    }

    public void IfStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("if ");
        getCondition().generateMaude(stream);
        stream.print("th ");
        getThen().generateMaude(stream);
        stream.print("el ");
        if (hasElse()) {
            getElse().generateMaude(stream);
        } else {
            stream.print("noStmt ");
        }
        stream.print("fi ");
    }

    public void ExpressionStmt.generateMaude(java.io.PrintStream stream) {
        getExp().generateMaudeAsStatement(stream, "_");
    }

    public void WhileStmt.generateMaude(java.io.PrintStream stream) {
        stream.print("while ");
        getCondition().generateMaude(stream);
        stream.print("do ");
        getBody().generateMaude(stream);
        stream.print("od ");
    }

	public void StmtBlock.generateMaude(java.io.PrintStream stream) {
        boolean inlist = false;
        if (getNumStmt() == 0) {
            stream.print("noStmt ");
        } else {
            for (Stmt stmt : getStmts()) {
                if (inlist) stream.print("; "); else inlist = true;
                stmt.generateMaude(stream);
            }
        }
	}

    public void Block.generateMaude(java.io.PrintStream stream) {
        stream.println("--- Block");
    }
}
