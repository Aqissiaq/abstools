import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.delta.exceptions.*;


aspect OriginalCallResolver {
    
    public void Model.resolveOriginalCalls(ArrayList<DeltaDecl> deltas) {
        Collections.reverse(deltas);
        for (DeltaDecl delta : deltas) {
            delta.resolveOriginalCalls();
        }
    }

    // TODO
    public void DeltaDecl.resolveOriginalCalls() {
        /*
         * for each class modifier
         *      for each (Add|Modify)MethodModifier m
         *          for each original() call
         *              find the target - 
         *              replace call with call to target
         */
        
       for (ClassModifier cm : this.getClassModifiers()) {
           cm.resolveOriginalCalls();
      }
    }
    

    public abstract void ClassModifier.resolveOriginalCalls();
    
    public void AddClassModifier.resolveOriginalCalls() {
        for (MethodImpl m : this.getClassDecl().getMethods()) {
            // find calls
            Block block = m.getBlock();
            for (Stmt s : block.getStmts()) {
                System.out.println(this.deltaName() + "> " + s);
            }
        }
        
    }
    
    public void RemoveClassModifier.resolveOriginalCalls() {}
    public void ModifyClassModifier.resolveOriginalCalls() {}


}
    