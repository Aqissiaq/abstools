import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.delta.exceptions.*;


aspect OriginalCallResolver {
    
    public void Model.resolveOriginalCalls(ArrayList<DeltaDecl> deltas) {
        Collections.reverse(deltas);
        for (DeltaDecl delta : deltas) {
            delta.resolveOriginalCalls();
        }
    }

    // TODO
    public void DeltaDecl.resolveOriginalCalls() {
        /*
         * calling original() only seems to make sense in a delta that *modifies* 
         * an existing class when *modifying* a method in that class,
         * so we only deal with this case.
         */
        for (ClassModifier cm : this.getClassModifiers()) {
           if (cm instanceof ModifyClassModifier)
               for (Modifier m : ((ModifyClassModifier)cm).getModifiers())
                   if (m instanceof ModifyMethodModifier)
                       ((ModifyMethodModifier)m).resolveOriginalCalls();
        }
    }
    
    public void ModifyMethodModifier.resolveOriginalCalls() {
        MethodImpl method = getMethodImpl();
        // find calls
        Block block = method.getBlock();
        for (Stmt s : block.getStmts()) {
            System.out.println(this.deltaName() + "> " + s);
            for (Annotation a : s.getAnnotations()) {
                System.out.println("> " + a);              
            }

            //                if (s instanceof OriginalCall) {
            //                    System.out.println("O");                    
            //                }
        }
    }
    


}
    