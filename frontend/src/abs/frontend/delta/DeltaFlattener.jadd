import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.delta.exceptions.*;

aspect Flattener {
    /* Configure a product
     * 
     * This is the top level method, which does everything from
     * finding the features of a given product, finding the sequence of 
     * associated deltas, and applying them.
     */
    public void Model.configureProduct(String id) throws WrongProgramArgumentException,ASTNodeNotFoundException {
        Product prod = this.findProduct(id);
        System.out.println("configuring product: " + prod.qualifiedName());

        ArrayList<DeltaDecl> deltas = this.getSortedDeltas(prod);

        System.out.print("applicable deltas: ");
        for (DeltaDecl delta : deltas)
            System.out.print(delta.qualifiedName() + ", ");
        System.out.println("");

        System.out.println("\n=================================================================\n");

        // TODO resolve original() calls
        this.resolveOriginalCalls(deltas);
        
        System.out.println("\n=================================================================\n");

        // apply the applicable deltas in the given order
        for (DeltaDecl delta : deltas)
            this.applyDelta(delta);
        
        System.out.println("\n=================================================================\n");
    }
    
    //propagate
    public void ASTNode.applyDelta(DeltaDecl delta) throws ASTNodeNotFoundException {
        for(int i = 0; i < getNumChild(); i++) {
            getChildNoTransform(i).applyDelta(delta);
        }
    }

    public void ModuleDecl.applyDelta(DeltaDecl delta) throws ASTNodeNotFoundException {
        String moduleid = this.getName();

        //if DeltaDecl was defined in *this* module, apply its ClassModifiers...
        if (delta.moduleName().equals(moduleid)) {
            System.out.println("**D** applying Delta" + delta.qualifiedName());
            for (ClassModifier cmod : delta.getClassModifiers()) {
                System.out.println("==C== applying " + cmod);
                cmod.applyTo(this);
            }
        }
    }

    
    /**************************************************************************
     * ClassModifiers are applied to Modules
     * - add/remove/modify classes
     */
    public abstract void ClassModifier.applyTo(ModuleDecl md) throws ASTNodeNotFoundException;

    public void RemoveClassModifier.applyTo(ModuleDecl md) throws ASTNodeNotFoundException {
        // find class by name
        String classname = this.getName();
        int found = -1;
        for (int i = 0; i < md.getNumDecl(); i++) {
            Decl d = md.getDecl(i);
            if (d instanceof ClassDecl)
                if (d.getName().equals(classname)) {
                    found = i;
                    break;
                }
        }
        if (found >= 0)
            //remove ClassDecl
            md.getDecls().removeChild(found);
        else
            throw new ASTNodeNotFoundException("ClassDecl " + md.getName() + "." + classname);
    }

    public void AddClassModifier.applyTo(ModuleDecl md) {
        md.getDecls().addChild(this.getClassDecl().fullCopy());
    }

    public void ModifyClassModifier.applyTo(ModuleDecl md) throws ASTNodeNotFoundException {
        // find class by name
        String classname = this.getName();
        int found = -1;
        for (int i = 0; i < md.getNumDecl(); i++) {
            Decl d = md.getDecl(i);
            if (d instanceof ClassDecl)
                if (d.getName().equals(classname)) {
                    found = i;
                    break;
                }
        }
        if (found >= 0)
            // apply all modifiers
            for (Modifier mod : this.getModifiers()) {
                System.out.println("--M-- applying " + mod);
                mod.applyTo((ClassDecl) md.getDecl(found));
            }
        else
            throw new ASTNodeNotFoundException("ClassDecl " + md.getName() + "." + classname);
    }

    /**************************************************************************
     * Modifiers are applied to Classes
     * - add/remove/modify methods
     * - add/remove fields
     */
    public abstract void Modifier.applyTo(ClassDecl cd) throws ASTNodeNotFoundException;

    public void RemoveMethodModifier.applyTo(ClassDecl cd) throws ASTNodeNotFoundException {
        MethodSig mysig = this.getMethodSig();

        // in given ClassDecl: find MethodDecl that matches sig
        int found = -1;
        for (int i = 0; i < cd.getNumMethod(); i++) {
            MethodSig sig = cd.getMethod(i).getMethodSig();
            if (sig.matches(mysig)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            // remove MethodImpl from list
            cd.getMethods().removeChild(found);
        else
            throw new ASTNodeNotFoundException("MethodDecl " + cd.qualifiedName() + "." + mysig);
    }

    public void AddMethodModifier.applyTo(ClassDecl cd) {
        cd.addMethod(this.getMethodImpl().fullCopy());
    }

    public void ModifyMethodModifier.applyTo(ClassDecl cd) throws ASTNodeNotFoundException {
        MethodSig mysig = this.getMethodImpl().getMethodSig();

        // in given ClassDecl: find MethodDecl that matches sig
        int found = -1;
        for (int i = 0; i < cd.getNumMethod(); i++) {
            MethodSig sig = cd.getMethod(i).getMethodSig();
            if (sig.matches(mysig)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            // replace MethodImpl
            cd.getMethods().setChild(this.getMethodImpl().fullCopy(), found);
        else
            throw new ASTNodeNotFoundException("MethodDecl " + cd.qualifiedName() + "." + mysig);
    }

    public void RemoveFieldModifier.applyTo(ClassDecl cd) throws ASTNodeNotFoundException {
        FieldDecl myfield = this.getFieldDecl();

        // in given ClassDecl: find FieldDecl that matches this
        int found = -1;
        for (int i = 0; i < cd.getNumField(); i++) {
            FieldDecl field = cd.getField(i);
            if (field.matches(myfield)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            cd.getFields().setChild(this.getFieldDecl().fullCopy(), found);
        else
            throw new ASTNodeNotFoundException("FieldDecl " + cd.qualifiedName() + "." + myfield);
    }

    public void AddFieldModifier.applyTo(ClassDecl cd) {
        cd.addField(this.getFieldDecl().fullCopy());
    }
}
