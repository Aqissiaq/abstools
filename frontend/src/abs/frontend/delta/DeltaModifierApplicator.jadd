import java.util.Map;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.delta.exceptions.*;
import abs.common.*;
import abs.frontend.parser.*;

/*
 * Collection of methods to be added to the various Modifiers inside a delta:
 * - ModuleModifiers, which can be 
 *   OOModifiers, which in turn contain: 
 *     - AddClassModifier, RemoveClassModifier, ModifyClassModifier
 *     - AddInterfaceModifier, ModifyInterfaceModifier
 *   FunctionalModifiers, which in turn contain:
 *     - AddFunctionModifier, AddDataTypeModifier, AddTypeSynModifier
 */
aspect DeltaModifierApplicator {

    abstract public void ModuleModifier.apply() throws DeltaModellingException;

    /**************************************************************************
     * OOModifiers add/remove/modify classes or interfaces
     * they are applied to Modules
     */
    
    public void AddClassModifier.apply() throws DeltaModellingException {
        ModuleDecl module = findModule();
        ClassDecl cls = getClassDecl().fullCopy();
        cls.setName(getSimpleName());
        module.getDecls().addChild(cls);
    }
    
    public void RemoveClassModifier.apply() throws DeltaModellingException {
        ClassDecl cls = findClass();
        ModuleDecl module = cls.getModule();
        module.getDecls().removeChild(module.getDecls().getIndexOfChild(cls));
    }

    public void ModifyClassModifier.apply() throws DeltaModellingException {
        ClassDecl cls = findClass();
        if (cls == null)
           throw new DeltaModellingException(getDelta(), 
                " wants to modify class [" + getName() + "], which was not found.");

        
        // add any interfaces added by the ClassModifier
        for (InterfaceTypeUse iface : this.getAddedInterfaces()) {
            cls.addImplementedInterfaceUse(iface.fullCopy());
        }

        // remove any interfaces removed by the ClassModifier
        for (InterfaceTypeUse toRemove : this.getRemovedInterfaces()) {
            boolean found = false;
            for (InterfaceTypeUse iface : cls.getImplementedInterfaceUseList()) {
                if (iface.getName().equals(toRemove.getName())) {
                    cls.getImplementedInterfaceUseList().removeChild(cls.getImplementedInterfaceUseList().getIndexOfChild(iface));
                    found = true;
                    break;
                }
            }
            if (! found)
                throw new DeltaModellingException(getDelta(), 
                    " wants to remove interface [" + toRemove.getName() + "] from class [" + cls.getName() 
                    + "]. However, the class does not implement said interface.");
        }

        // apply all modifiers
        for (Modifier mod : this.getModifiers()) {
            mod.applyTo(cls);
        }
    }
    
    public void AddInterfaceModifier.apply() throws DeltaModellingException {
        ModuleDecl module = findModule();
        InterfaceDecl decl = getInterfaceDecl().fullCopy();
        decl.setName(getSimpleName());
        module.getDecls().addChild(decl);
    }
    public void ModifyInterfaceModifier.apply() throws DeltaModellingException {
        InterfaceDecl iface = this.findInterface();
        // apply all modifiers
        for (MethodSigModifier mod : this.getMethodSigModifiers()) {
            mod.applyTo(iface);
        }
    }
    
    /**************************************************************************
     * FunctionalModifiers add functions, data types and type synonyms
     * they are applied to Modules
     */

    public String AddFunctionModifier.toString() {
        return "adds function " + getFunctionDecl().getName();
    }
    
    public void AddFunctionModifier.apply() throws DeltaModellingException {
        ModuleDecl module = findModule();
        module.getDecls().addChild(this.getFunctionDecl().fullCopy());
    }
    
    public String AddDataTypeModifier.toString() {
        return "adds data type " + getDataTypeDecl().getName();
    }
    
    public void AddDataTypeModifier.apply() throws DeltaModellingException {
        ModuleDecl module = findModule();
        
        DataTypeDecl dtd = this.getDataTypeDecl().fullCopy();
        module.getDecls().addChild(dtd);
        for (DataConstructor c : dtd.getDataConstructors()) {
            int i = 0;
            for (ConstructorArg ca : c.getConstructorArgs()) {
                if (ca.hasSelectorName()) {
                    module.getDecls().addChild(new ASTPreProcessor().createSelectorFunctionForDeltaApplication(dtd, c, ca, i));
                }
                i++;
            }
        }
    }
    
    public String AddTypeSynModifier.toString() {
        return "adds type synonym " + getTypeSynDecl().getName();
    }
    
    public void AddTypeSynModifier.apply() throws DeltaModellingException {
        ModuleDecl module = findModule();
        module.getDecls().addChild(this.getTypeSynDecl().fullCopy());
    }


    /**************************************************************************
     * helper method
     * find the ModuleDecl to which this ModuleModifier applies
     * if qualified => easy; if unqualified => look in delta's 'uses' list.
     */
    public ModuleDecl ModuleModifier.findModule() throws DeltaModellingException {
        String moduleid;
        Name name = new Name(getName());
        if (name.isSimple()) {
            // assume the module name was specified in a 'uses' statement
            // For now we only check the first used module - does having multiple 'uses' statements ever make sense?
            // If not, FIXME change the syntax accordingly.
            try {
                moduleid = getDelta().getDeltaAccess(0).getModuleName();
            } catch(NullPointerException e) {
                throw new DeltaModellingException(getDelta(),"Unqualified name of modified entity requires "
                        + "a \'uses\' statement inside the delta, to determine the module to be modified.");
            }
        } else {
            moduleid = name.getModuleName();
        }            

        for (ModuleDecl module : getModel().getModuleDecls()) {
            if (module.getName().equals(moduleid)) {
                return module;
            }
        }
        throw new DeltaModellingException(getDelta(), 
                " wants to modify module [" + moduleid + "], which was not found.");
    }


    
    /**************************************************************************
     * helper methods
     * find the (Class or Interface) Decl which should be modified by this OOModifier
     */
    public ClassDecl ClassModifier.findClass() {
        //System.out.println("=== Delta " + getDelta().getName() + " looking for ClassDecl: " + this.getName());
        try {
            ModuleDecl module = findModule();
            for (Decl decl : module.getDecls()) {
                if (decl instanceof ClassDecl && decl.getName().equals(this.getSimpleName()))
                    return (ClassDecl) decl;
            }
            // not found
            throw new DeltaModellingException(getDelta(), 
                    " wants to modify class [" + this.getSimpleName() + "], which was not found in module [" + module.getName() + "].");
        } catch (DeltaModellingException e) { return null; }
    }

    public InterfaceDecl InterfaceModifier.findInterface() throws DeltaModellingException {
        //System.out.println("=== Delta " + getDelta().getName() + " looking for InterfaceDecl: " + this.getName());

        ModuleDecl module = findModule();
        for (Decl decl : module.getDecls()) {
            if (decl instanceof InterfaceDecl && decl.getName().equals(this.getSimpleName()))
                return (InterfaceDecl) decl;
        }
        // not found
        throw new DeltaModellingException(getDelta(), 
                " wants to modify interface [" + this.getSimpleName() + "], which was not found in module [" + module.getName() + "].");
    }

    
    /**************************************************************************
     * Modifiers are applied to Classes
     * - add/remove/modify methods
     * - add/remove fields
     */
    public abstract void Modifier.applyTo(ClassDecl cd) throws DeltaModellingException;

    public void RemoveMethodModifier.applyTo(ClassDecl cd) throws DeltaModellingException {
        MethodSig mysig = this.getMethodSig();

        // in given ClassDecl: find MethodDecl that matches sig
        int found = -1;
        for (int i = 0; i < cd.getNumMethod(); i++) {
            MethodSig sig = cd.getMethod(i).getMethodSig();
            if (sig.matches(mysig)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            // remove MethodImpl from list
            cd.getMethods().removeChild(found);
        else
            throw new DeltaModellingException(getDelta(), 
                    " wants to remove method [" + mysig + "], which was not found in class [" + cd.qualifiedName() + "].");
    }

    public void AddMethodModifier.applyTo(ClassDecl cd) {
        assert cd != null;
        assert getMethodImpl() != null;
        cd.addMethod(getMethodImpl().fullCopy());
    }

    public void ModifyMethodModifier.applyTo(ClassDecl cd) throws DeltaModellingException {
        MethodSig mysig = this.getMethodImpl().getMethodSig();

        // in given ClassDecl: find MethodDecl that matches sig
        int found = -1;
        for (int i = 0; i < cd.getNumMethod(); i++) {
            MethodSig sig = cd.getMethod(i).getMethodSig();
            if (sig.matches(mysig)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            // replace MethodImpl
            cd.getMethods().setChild(this.getMethodImpl().fullCopy(), found);
        else
            throw new DeltaModellingException(getDelta(), 
                    " wants to modify method [" + mysig + "], which was not found in class [" + cd.qualifiedName() + "].");
    }

    public void RemoveFieldModifier.applyTo(ClassDecl cd) throws DeltaModellingException {
        FieldDecl myfield = this.getFieldDecl();

        // in given ClassDecl: find FieldDecl that matches this
        int found = -1;
        for (int i = 0; i < cd.getNumField(); i++) {
            FieldDecl field = cd.getField(i);
            if (field.matches(myfield)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            cd.getFields().removeChild(found);
        else
            throw new DeltaModellingException(getDelta(), 
                    " wants to remove field [" + myfield + "], which was not found in class [" + cd.qualifiedName() + "].");
    }

    public void AddFieldModifier.applyTo(ClassDecl cd) {
        cd.addField(this.getFieldDecl().fullCopy());
    }
    
    /**************************************************************************
     * MethodSigModifiers are applied to Interfaces
     * - add/remove method signatures
     */
    public abstract void MethodSigModifier.applyTo(InterfaceDecl iface) throws DeltaModellingException;

    public void AddMethodSigModifier.applyTo(InterfaceDecl iface) throws DeltaModellingException {
        iface.addBody(this.getMethodSig().fullCopy());
    }
    public void RemoveMethodSigModifier.applyTo(InterfaceDecl iface) throws DeltaModellingException {
        MethodSig mysig = this.getMethodSig();

        // in given InterfaceDecl: find MethodSig that matches mysig
        int found = -1;
        for (int i = 0; i < iface.getNumBody(); i++) {
            MethodSig sig = iface.getBody(i);
            if (sig.matches(mysig)) {
                found = i;
                break;
            }
        }
        if (found >= 0)
            // remove MethodSig
            iface.getBodys().removeChild(found);
        else
            throw new DeltaModellingException(getDelta(), 
                    " wants to remove method signature [" + mysig + "], which was not found in interface [" + iface.qualifiedName() + "].");
    }
    
    
}
