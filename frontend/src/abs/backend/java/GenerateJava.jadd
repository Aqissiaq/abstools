// -*- mode: java; tab-width: 4; -*-

import java.io.*;
import abs.backend.java.*;

aspect GenerateJava {

    public void Model.generateJava(String packageName, PrintStream stream) {
        if (packageName != null) {
            stream.println("package "+packageName+";");
        }
        
        stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
        
        
        for (Decl decl : getDecls()) {
            decl.generateJava(stream);
        }
    }

    public void Model.generateJava(PrintStream stream) {
        generateJava(null,stream);
    }
    
    abstract void Decl.generateJava(PrintStream stream);

    public void InterfaceDecl.generateJava(PrintStream stream) {
        stream.print("interface "+getName()+" extends ABSInterfaceType");
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        stream.println(" {");
        stream.println("}");
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        stream.print("class "+getName()+" implements ABSClassType");
        for (InterfaceTypeUse use : getImplementedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        
        ClassDecl d = null;
        stream.println(" {");
        stream.println("}");
    }

    public void DataTypeDecl.generateJava(PrintStream stream) {
        stream.println("class "+getName()+" implements ABSDataType {");
        stream.println("}");
    }
    
    public void FunctionDecl.generateJava(PrintStream stream) {
        String typeArg = getTypeUse().getName();
        stream.println("class "+getName()+" implements ABSFunction<"+typeArg+"> {");
        stream.println("   public "+typeArg+" apply() {");
        stream.println("      return null;");
        stream.println("   }");
        stream.println("}");
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        stream.println("// WARNING: Unkown decl "+getName());
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        
    }
}
