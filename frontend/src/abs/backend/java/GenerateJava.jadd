// -*- mode: java; tab-width: 4; -*-

import java.io.*;
import abs.backend.java.*;
import abs.backend.java.lib.*;
import abs.frontend.ast.*;

aspect GenerateJava {

    public void Model.generateJava(String packageName, PrintStream stream) {
        if (packageName != null) {
            stream.println("package "+packageName+";");
        }
        
        stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
        if (hasBlock()) {
            Block block = getBlock();
            stream.println("public class Main {");
            stream.print("   public static void main(String[] args) ");
            block.generateJava("   ",stream);
            stream.println("}");
        }
        
        for (Decl decl : getDecls()) {
            decl.generateJava(stream);
        }
    }

    public void Model.generateJava(PrintStream stream) {
        generateJava(null,stream);
    }
    
    abstract void Decl.generateJava(PrintStream stream);

    public void InterfaceDecl.generateJava(PrintStream stream) {
        stream.print("interface "+getName()+" extends ABSInterfaceType");
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        stream.println(" {");
        
        for (MethodSig s : getBodys()) {
      	  s.generateJava("   ", stream);
      	  stream.println(";");
        }
        
        stream.println("}");
    }
    
    public void MethodSig.generateJava(String indent, PrintStream stream) {
   	  stream.print(indent+"public ");
   	  getReturnType().generateJava(stream);
   	  stream.print(" "+getName()+"(");
   	  boolean first = true;
   	  for (ParamDecl d : getParams()) {
   		  if (!first)
   			  stream.print(", ");
   		  d.generateJava(stream);
   		  first = false;
   	  }
   	  stream.print(")");
    }
    
    public void ParamDecl.generateJava(PrintStream stream) {
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName());
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        stream.print("class "+getName()+" implements ABSClassType");
        for (InterfaceTypeUse use : getImplementedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        
        ClassDecl d = null;
        stream.println(" {");
        for (FieldDecl f : getFields()) {
      	  f.generateJava("   ", stream);
        }
        for (MethodImpl m : getMethods()) {
      	  m.generateJava("   ", stream);
        }
        stream.println("}");
    }
    
    public void MethodImpl.generateJava(String indent, PrintStream stream) {
   	 getMethodSig().generateJava(indent,stream);
   	 boolean addReturn = false;
   	 if (getMethodSig().getReturnType().getType().isUnitType()) {
   		 if (getBlock().getNumStmt() == 0 ||
   		     (! (getBlock().getStmt(getBlock().getNumStmt()-1) instanceof ReturnStmt))) {
   			 addReturn = true;
   		 }
   	 }
   	 getBlock().generateJava(indent, stream, addReturn);
    }
    
    public void FieldDecl.generateJava(String indent, PrintStream stream) {
   	 stream.print(indent);
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName()+";");
    }
    

    public void DataTypeDecl.generateJava(PrintStream stream) {
        stream.println("class "+getName()+" implements ABSDataType {");
        stream.println("}");
    }
    
    public void FunctionDecl.generateJava(PrintStream stream) {
        String typeArg = getTypeUse().getName();
        stream.println("class "+getName()+" implements ABSFunction<"+typeArg+"> {");
        stream.println("   public "+typeArg+" apply() {");
        stream.println("      return null;");
        stream.println("   }");
        stream.println("}");
    }

    public void TypeParameterDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void Block.generateJava(String indent, PrintStream stream) {
   	 generateJava(indent,stream,false);
    }    
    
    public void Block.generateJava(String indent, PrintStream stream, boolean addReturn) {
        stream.println(" {");
        String newIndent = incIndent(indent);
        for (Stmt stmt : getStmts()) {
            stmt.generateJava(newIndent,stream);
        }

        if (addReturn) 
       	    stream.println(indent+"return null;"); // TODO: Fix Unit return
        stream.println(indent+"}");
    }
    
    public void VarDecl.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getAccess().generateJava(stream);
        stream.print(" "+getName()+" = null;");
    }
    
    
    /* 
     * STATEMENTS
     */
    
    public abstract void Stmt.generateJava(String indent, PrintStream stream);
    
    public void VarDeclStmt.generateJava(String indent, PrintStream stream) {
        getVarDecl().generateJava(indent,stream);
    }
    
    public void AssignStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getVar().generateJava(stream);
        stream.print(" = ");
        getValue().generateJava(stream);
        stream.println(";");
    }

    public void AwaitStmt.generateJava(String indent, PrintStream stream) {
   	 stream.print(indent+JavaBackendConstants.ABSRUNTIME+".await(");
   	 getGuard().generateJava(stream);
   	 stream.println(");");
    }

    public void ExpressionStmt.generateJava(String indent, PrintStream stream) {
   	  stream.print(indent);
   	  getExp().generateJava(stream);
   	  stream.println(";");
    }

    public void IfStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"if (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getThen().generateJava(indent,stream);
        if (hasElse()) {
            stream.print(indent+"else");
            getElse().generateJava(indent,stream);
        }
    }

    public void ReturnStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"return ");
        getRetExp().generateJava(stream);
        stream.println(";");
    }

    public void SkipStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+";");
    }

    public void SuspendStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+JavaBackendConstants.ABSRUNTIME+".suspend();");
    }

    public void WhileStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"while (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getBody().generateJava(indent,stream);
    }
    
    public void AssertStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    /*
     * GUARDS
     */
    
    public abstract void Guard.generateJava(PrintStream stream);

    public void AndGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.ANDGUARD+"(");
   	 getLeft().generateJava(stream);
   	 stream.print(",");
   	 getRight().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ClaimGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.CLAIMGUARD+"(");
   	 getVar().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ExpGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.EXPGUARD+"() { public ABSBool evaluateExp() { return ");
   	 getPureExp().generateJava(stream);
   	 stream.print("; }}");
    }
    
    /* 
     * EXPRESSIONS
     */

    public abstract void Exp.generateJava(PrintStream stream);

    public void AsyncCall.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void SyncCall.generateJava(PrintStream stream) {
        getCallee().generateJava(stream);
        stream.print("."+getMethod()+"(");
        boolean first = true;
        for (PureExp e : getParams()) {
      	  if (!first) 
      		  stream.print(", ");

      	   e.generateJava(stream);
   		  first = false;
        }
        stream.print(")");
    }

    public void GetExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void NewExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void DataTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }

    public void InterfaceTypeUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }

    public void TypeParameterUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void UnresolvedTypeUse.generateJava(PrintStream stream) {
        throw new JavaBackendException(this,"Type "+getName()+" is unresolved!");
    }

    public void FieldUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void VarUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }
    
    public void CaseExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void FnApp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void DataConstructorExp.generateJava(PrintStream stream) {
        DataConstructor c = lookupDataConstructor(this.getConstructor());
        DataTypeDecl decl = c.getDecl();
        
        if (decl.getName().equals("Bool")) {
            stream.print(ABSBool.class.getName());
            stream.print(".fromBoolean(");
            stream.print(getConstructor().toLowerCase());
            stream.print(")");
        } else {
            throw new NotImplementedYetException(this);
        }
    }

    public void LetExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void IntLiteral.generateJava(PrintStream stream) {
        stream.print(ABSInteger.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void StringLiteral.generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void NullExp.generateJava(PrintStream stream) {
        stream.print("null");
    }

    public void ThisExp.generateJava(PrintStream stream) {
        stream.print("this");
    }

    public void MinusExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void NegExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void AddAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".add(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void SubAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".subtract(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void DivMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".divide(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void ModMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".mod(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void MultMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".multiply(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void AndBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".and(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void OrBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".or(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void EqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".eq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void NotEqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".notEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gtEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".ltEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".lt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public String ASTNode.incIndent(String indent) {
        return indent+"   ";
    }
    
    
    
}
