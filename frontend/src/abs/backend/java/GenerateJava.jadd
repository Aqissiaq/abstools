// -*- mode: java; tab-width: 4; -*-

import java.io.*;
import abs.backend.java.*;
import abs.backend.java.lib.*;
import abs.frontend.ast.*;

aspect GenerateJava {

    public void Model.generateJava(String packageName, PrintStream stream) {
        if (packageName != null) {
            stream.println("package "+packageName+";");
        }
        
        stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
        if (hasBlock()) {
            Block block = getBlock();
            stream.println("public class Main {");
            stream.print("   public static void main(String[] args) ");
            block.generateJava("   ",stream);
            stream.println("}");
        }
        
        for (Decl decl : getDecls()) {
            decl.generateJava(stream);
        }
    }

    public void Model.generateJava(PrintStream stream) {
        generateJava(null,stream);
    }
    
    abstract void Decl.generateJava(PrintStream stream);

    public void InterfaceDecl.generateJava(PrintStream stream) {
        stream.print("interface "+getName()+" extends ABSInterfaceType");
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        stream.println(" {");
        stream.println("}");
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        stream.print("class "+getName()+" implements ABSClassType");
        for (InterfaceTypeUse use : getImplementedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        
        ClassDecl d = null;
        stream.println(" {");
        stream.println("}");
    }

    public void DataTypeDecl.generateJava(PrintStream stream) {
        stream.println("class "+getName()+" implements ABSDataType {");
        stream.println("}");
    }
    
    public void FunctionDecl.generateJava(PrintStream stream) {
        String typeArg = getTypeUse().getName();
        stream.println("class "+getName()+" implements ABSFunction<"+typeArg+"> {");
        stream.println("   public "+typeArg+" apply() {");
        stream.println("      return null;");
        stream.println("   }");
        stream.println("}");
    }

    public void TypeParameterDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void Block.generateJava(String indent, PrintStream stream) {
        stream.println("{ ");
        String newIndent = incIndent(indent);
        for (VarDecl varDecl : getVars()) {
            varDecl.generateJava(newIndent,stream);
        }
        
        for (Stmt stmt : getStmts()) {
            stmt.generateJava(newIndent,stream);
        }
        
        stream.println(indent+"}");
    }
    
    public void VarDecl.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getAccess().generateJava(stream);
        stream.print(" "+getName()+" = null;");
    }
    
    
    /* 
     * STATEMENTS
     */
    
    public abstract void Stmt.generateJava(String indent, PrintStream stream);
    
    public void AssignStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getVar().generateJava(stream);
        stream.print(" = ");
        getValue().generateJava(stream);
        stream.println(";");
    }

    public void AwaitStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void EmptyStmt.generateJava(String indent, PrintStream stream) {
        stream.println(indent+";");
    }

    public void ExpressionStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void IfStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void ReturnStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void SkipStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void SuspendStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void WhileStmt.generateJava(String indent, PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    

    /* 
     * EXPRESSIONS
     */

    public abstract void Exp.generateJava(PrintStream stream);

    public void AsyncCall.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void SyncCall.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void GetExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void NewExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void FutureTypeUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void DataTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }

    public void InterfaceTypeUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }

    public void TypeParameterUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void UnresolvedTypeUse.generateJava(PrintStream stream) {
        throw new JavaBackendException(this,"Type "+getName()+" is unresolved!");
    }

    public void FieldUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void FunctionParamUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void VarUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }
    
    public void CaseExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void FnApp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void DataConstructorExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void FunVar.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void LetExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void BoolLiteral.generateJava(PrintStream stream) {
        stream.print(ABSBool.class.getName());
        stream.print(".fromBoolean(");
        stream.print(getContent().toLowerCase());
        stream.print(")");
    }

    public void IntLiteral.generateJava(PrintStream stream) {
        stream.print(ABSInteger.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void StringLiteral.generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void NullExp.generateJava(PrintStream stream) {
        stream.print("null");
    }

    public void ThisExp.generateJava(PrintStream stream) {
        stream.print("this");
    }

    public void MinusExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void NegExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void AddAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".add(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void SubAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".subtract(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void DivMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".divide(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void ModMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".mod(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void MultMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".multiply(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void AndBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".and(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void OrBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".or(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void EqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".eq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void NotEqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".notEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gtEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".ltEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".lt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public String ASTNode.incIndent(String indent) {
        return indent+"   ";
    }
}
