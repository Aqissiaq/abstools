// -*- mode: java; tab-width: 4; -*-

import java.io.*;
import abs.backend.java.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.frontend.ast.*;

aspect GenerateJava {

    public void Model.generateJava(String packageName, PrintStream stream) {
        if (packageName != null) {
            stream.println("package "+packageName+";");
        }
        
        stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
        if (hasMainBlock()) {
            Block block = getMainBlock();
            stream.println("public class Main {");
            stream.print("   public static void main(java.lang.String[] args) ");
            block.generateJava("   ",stream);
            stream.println("}");
        }
        
        for (Decl decl : getDecls()) {
            decl.generateJava(stream);
        }
    }

    public void Model.generateJava(PrintStream stream) {
        generateJava(null,stream);
    }
    
    abstract void Decl.generateJava(PrintStream stream);

    public void InterfaceDecl.generateJava(PrintStream stream) {
        stream.print("interface "+getName()+" extends ABSInterfaceType");
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        stream.println(" {");
        
        for (MethodSig s : getBodys()) {
      	  s.generateJava("   ", stream);
      	  stream.println(";");
        }
        
        stream.println("}");
    }
    
    public void MethodSig.generateJava(String indent, PrintStream stream) {
   	  stream.print(indent+"public ");
   	  getReturnType().generateJava(stream);
   	  stream.print(" "+getName());
   	  JavaGeneratorHelper.generateParams(stream, getParams());
    }
    
    public void ParamDecl.generateJava(PrintStream stream) {
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName());
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        stream.print("class "+getName()+" extends "+ABSObject.class.getName()+" implements "+ABSClassType.class.getName());
        for (InterfaceTypeUse use : getImplementedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        
        ClassDecl d = null;
        stream.println(" {");
        
        for (ParamDecl p : getParams()) {
            stream.print("   private final ");
            p.generateJava(stream);
            stream.println(";");
        }
        
        for (FieldDecl f : getFields()) {
      	  f.generateJava("   private ", stream);
        }
        
        // constructor
        stream.print("   public "+getName());
        JavaGeneratorHelper.generateParams(stream, getParams());
        stream.println(" {");
        for (ParamDecl p : getParams()) {
            stream.println("      this."+p.getName()+" = "+p.getName()+";");
        }
        if (hasInitBlock()) {
            getInitBlock().generateJava("      ",stream);
        }
        stream.println("   }");

        
        for (MethodImpl m : getMethods()) {
      	  m.generateJava("   ", stream);
        }
        stream.println("}");
    }
    
    public void MethodImpl.generateJava(String indent, PrintStream stream) {
   	 getMethodSig().generateJava(indent,stream);
   	 boolean addReturn = false;
   	 if (getMethodSig().getReturnType().getType().isUnitType()) {
   		 if (getBlock().getNumStmt() == 0 ||
   		     (! (getBlock().getStmt(getBlock().getNumStmt()-1) instanceof ReturnStmt))) {
   			 addReturn = true;
   		 }
   	 }
   	 getBlock().generateJava(indent, stream, addReturn);
    }
    
    public void FieldDecl.generateJava(String indent, PrintStream stream) {
   	 stream.print(indent);
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName()+";");
    }
    

    public void DataTypeDecl.generateJava(PrintStream stream) {
        stream.println("abstract class "+getName()+" extends ABSDataType {");
        stream.println("}");
        
        
        for (DataConstructor c : getDataConstructors()) {
          String constructorClassName = "ABSConstructor__"+c.getName();
      	  stream.println("class "+constructorClassName+" extends "+getName()+" {");
      	  int i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.print("   public final ");
      		  stream.println(JavaBackend.getJavaType(u)+" arg"+i+";");
      		  i++;
      	  }
      	  
      	  stream.print("   public "+constructorClassName+"(");
           boolean first = true;
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  if (first)
      			  first = false;
      		  else 
      			  stream.print(",");
      		  stream.print("   final ");
      		  stream.print(JavaBackend.getJavaType(u)+" arg"+i);
      		  i++;
      	  }
           stream.println(") {");
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.println("this.arg"+i+" = arg"+i+";");
      		  i++;
      	  }
           stream.println("   }");
           
           // eq method
           stream.println("   public ABSBool eq(ABSDataType o) {");
           stream.println("      if (! (o instanceof "+constructorClassName+")) return ABSBool.FALSE;");
           stream.println("      "+constructorClassName+" other = ("+constructorClassName+") o;");
           
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.println("if (!this.arg"+i+".eq(other.arg"+i+").toBoolean()) return ABSBool.FALSE;");
      		  i++;
      	  }
           
           stream.println("      return ABSBool.TRUE;");
           stream.println("   }");
           
           // match method
           stream.println("   public boolean match("+PatternConstructor.class.getName()+" c, "+PatternBinding.class.getName()+" b) {");
           stream.println("       if (!c.constructorName.equals(\""+c.getName()+"\")) return false;");
           i = 0;
           for (DataTypeUse u : c.getConstructorArgs()) {
               stream.println("       if (!c.subpattern["+i+"].match(this.arg"+i+",b)) return false;");
               i++;
           }
           stream.println("      return true;");
           stream.println("   }");
           
           
           stream.println("}");
      	  
        }
        
        
    }
    
    public void FunctionDecl.generateJava(PrintStream stream) {
        stream.println("final class ABSFunction__"+getName()+" implements ABSFunction {");
        stream.println("   private ABSFunction__"+getName()+"() { }");
        stream.print("   public static ");
        getTypeUse().generateJava(stream);
        stream.print(" apply");
        JavaGeneratorHelper.generateParams(stream,getParams());
        stream.println(" {");
        stream.print("      return ");
        getFunDef().generateJava(stream);
        stream.println(";");
        stream.println("   }");
        stream.println("}");
    }

    public void TypeParameterDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void Block.generateJava(String indent, PrintStream stream) {
   	 generateJava(indent,stream,false);
    }    
    
    public void Block.generateJava(String indent, PrintStream stream, boolean addReturn) {
        stream.println(" {");
        String newIndent = incIndent(indent);
        for (Stmt stmt : getStmts()) {
            stmt.generateJava(newIndent,stream);
        }
        
        if (this instanceof MainBlock) {
            for (VarDecl v : getVars()) {
                if (v.getName().equals("testresult")) {
                    stream.println(indent+"System.out.println(testresult.toBoolean());");
                }
            }
        }
        
        if (addReturn) 
       	    stream.println(indent+"return ABSUnit.UNIT;"); // TODO: Fix Unit return
        stream.println(indent+"}");
    }
    
    public void VarDecl.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getAccess().generateJava(stream);
        stream.print(" "+getName()+" = ");
        
        if (hasInitExp()) {
            getInitExp().generateJava(stream);
        } else {
            stream.print("null");
        }
        stream.print(";");
        
    }
    
    
    /* 
     * STATEMENTS
     */
    
    public abstract void Stmt.generateJava(String indent, PrintStream stream);
    
    public void VarDeclStmt.generateJava(String indent, PrintStream stream) {
        getVarDecl().generateJava(indent,stream);
    }
    
    public void AssignStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getVar().generateJava(stream);
        stream.print(" = ");
        getValue().generateJava(stream);
        stream.println(";");
    }

    public void AwaitStmt.generateJava(String indent, PrintStream stream) {
   	 stream.print(indent+JavaBackendConstants.ABSRUNTIME+".await(");
   	 getGuard().generateJava(stream);
   	 stream.println(");");
    }

    public void ExpressionStmt.generateJava(String indent, PrintStream stream) {
   	  stream.print(indent);
   	  getExp().generateJava(stream);
   	  stream.println(";");
    }

    public void IfStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"if (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getThen().generateJava(indent,stream);
        if (hasElse()) {
            stream.print(indent+"else");
            getElse().generateJava(indent,stream);
        }
    }

    public void ReturnStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"return ");
        getRetExp().generateJava(stream);
        stream.println(";");
    }

    public void SkipStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+";");
    }

    public void SuspendStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+JavaBackendConstants.ABSRUNTIME+".suspend();");
    }

    public void WhileStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"while (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getBody().generateJava(indent,stream);
    }
    
    public void AssertStmt.generateJava(String indent, PrintStream stream) {
        //throw new NotImplementedYetException(this);
    }
    
    /*
     * GUARDS
     */
    
    public abstract void Guard.generateJava(PrintStream stream);

    public void AndGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.ANDGUARD+"(");
   	 getLeft().generateJava(stream);
   	 stream.print(",");
   	 getRight().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ClaimGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.CLAIMGUARD+"(");
   	 getVar().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ExpGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.EXPGUARD+"() { public ABSBool evaluateExp() { return ");
   	 getPureExp().generateJava(stream);
   	 stream.print("; }}");
    }
    
    /* 
     * EXPRESSIONS
     */

    public abstract void Exp.generateJava(PrintStream stream);

    public void AsyncCall.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void SyncCall.generateJava(PrintStream stream) {
        getCallee().generateJava(stream);
        stream.print("."+getMethod());
        JavaGeneratorHelper.generateArgs(stream,getParams());
    }

    public void GetExp.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }

    public void NewExp.generateJava(PrintStream stream) {
        stream.print("new "+getClassRef());
        JavaGeneratorHelper.generateArgs(stream,getParams());
    }

    public void DataTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }

    public void InterfaceTypeUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }

    public void TypeParameterUse.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void UnresolvedTypeUse.generateJava(PrintStream stream) {
        throw new JavaBackendException(this,"Type "+getName()+" is unresolved!");
    }

    public void FieldUse.generateJava(PrintStream stream) {
        stream.print("this."+getName());
    }

    public void VarUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }
    
    public void CaseExp.generateJava(PrintStream stream) {
       stream.print("new Case<");
       String varType = JavaBackend.getQualifiedString(getExpr().getType());
       stream.print(varType);
       stream.print(',');
       String expType = JavaBackend.getQualifiedString(getType());
       stream.println(expType+">() {");
       stream.println("      public "+expType+" of(final "+varType+" __ABS_value) { ");
       int i = 0;
       for (CaseBranch b : getBranchs()) {
           String bindingName = "__ABS_binding"+i;
          stream.print("final "+PatternBinding.class.getName()+" "+bindingName+" = ");
          Pattern pattern = b.getLeft();
          pattern.generateJava(stream);
          stream.println(".match(__ABS_value);");
      	  stream.print("if ("+bindingName+" != null) ");
      	  stream.println("return new Object() {");
      	  stream.print("  public "+expType+" execute(");
          ArrayList<PatternVar> freeVars = pattern.getFreeVars();
          boolean first = true;
          for (PatternVar var : freeVars) {
              if (first) first = false;
              else stream.print(",");
              stream.print(JavaBackend.getQualifiedString(var.getType()));
              stream.print(" "+var.getVar().getName());
          }
          stream.print(") { return ");
          b.getRight().generateJava(stream);
          stream.print("; }");
      	  stream.print("}.execute(");
          first = true;
          for (int j = 0; j < freeVars.size(); j++) {
              if (first) first = false;
              else stream.print(",");
              stream.print("("); 
              stream.print(JavaBackend.getQualifiedString(freeVars.get(j).getType()));
              stream.print(") ");
              stream.print(bindingName+".getBinding("+j+")");
          }
      	  stream.println(");");
      	  i++;
       }
       stream.println("throw new "+UnmatchedCaseException.class.getName()+"();"); // TODO: throw UnmatchedCaseException
       stream.print("}}.of(");
       getExpr().generateJava(stream);
       stream.print(")");
    }
       
    public void Pattern.generateJava(PrintStream stream) {
        throw new NotImplementedYetException(this);
    }
    
    public void ConstructorPattern.generateJava(PrintStream stream) {
        stream.print("new "+PatternConstructor.class.getName()+"(\""+getConstructor()+"\"");
        for (Pattern p : getParams()) {
            stream.print(",");
            p.generateJava(stream);
        }
        stream.print(")");
    }
    
    public void PatternVar.generateJava(PrintStream stream) {
        stream.print("new "+PatternVariable.class.getName()+"(\""+getVar().getName()+"\")");
    }
    
    public void UnderscorePattern.generateJava(PrintStream stream) {
        stream.print("new "+AnyPattern.class.getName()+"()");
    }
    
    public void PatternVarUse.generateJava(PrintStream stream) {
        stream.print("new "+PatternValue.class.getName()+"("+getName()+")");
        
    }
 
    public void FnApp.generateJava(PrintStream stream) {
   	 stream.print("ABSFunction__"+getName()+".apply");
   	 JavaGeneratorHelper.generateArgs(stream,getParams());
   	 
    }

    public void DataConstructorExp.generateJava(PrintStream stream) {
        DataConstructor c = lookupDataConstructor(this.getConstructor());
        DataTypeDecl decl = c.getDecl();
        String name = decl.getName();
        if (name.equals("Bool")) {
            stream.print(ABSBool.class.getName());
            stream.print(".fromBoolean(");
            stream.print(getConstructor().toLowerCase());
            stream.print(")");
        } else {
      	  stream.print("new ABSConstructor__"+getConstructor());
      	  JavaGeneratorHelper.generateArgs(stream,getParams());
        }
    }

    public void LetExp.generateJava(PrintStream stream) {
        stream.print("new Let<");
        String varType = JavaBackend.getQualifiedString(getVar().getType());
        stream.print(varType);
        stream.print(',');
        String expType = JavaBackend.getQualifiedString(getExp().getType());
        stream.print(expType+">() { public "+expType);
        stream.print(" in(final "+varType+" "+getVar().getName()+") { ");
        stream.print("return ");
        getExp().generateJava(stream);
        stream.print("; }}.in(");
        getVal().generateJava(stream);
        stream.print(")");
        
    }

    public void IntLiteral.generateJava(PrintStream stream) {
        stream.print(ABSInteger.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void StringLiteral.generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void NullExp.generateJava(PrintStream stream) {
        stream.print("null");
    }

    public void ThisExp.generateJava(PrintStream stream) {
        stream.print("this");
    }

    public void MinusExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void NegExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void AddAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".add(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void SubAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".subtract(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void DivMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".divide(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void ModMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".mod(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void MultMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".multiply(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void AndBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".and(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void OrBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".or(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void EqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".eq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void NotEqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".notEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gtEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".ltEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".lt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public String ASTNode.incIndent(String indent) {
        return indent+"   ";
    }
    
    
    
}
