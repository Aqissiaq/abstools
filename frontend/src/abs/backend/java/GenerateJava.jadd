// -*- mode: java; tab-width: 4; -*-

import java.io.*;
import abs.backend.java.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.frontend.ast.*;

aspect GenerateJava {

    public void Model.generateJava(String packageName, PrintStream stream) {
        if (packageName != null) {
            stream.println("package "+packageName+";");
        }
        
        stream.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
        if (hasMainBlock()) {
            Block block = getMainBlock();
            stream.println("public class Main extends "+ABSObject.class.getName()+" {");
            stream.println("   public static void main(java.lang.String[] args) {");
		    stream.println("       "+ABSRuntime.class.getName()+".systemStarted();");            
            stream.println("       "+COG.class.getName()+" cog = new "+COG.class.getName()+"(Main.class);");
            stream.println("       Main main = new Main(cog);");
            stream.println("       "+ABSRuntime.class.getName()+".cogCreated(main);");
            stream.println("       "+ABSRuntime.class.getName()+".asyncCall(new MainTask(main));");
            stream.println("   }");

            stream.println("   public java.lang.String getClassName() { return \"Main\"; }");
            stream.println("   public Main("+COG.class.getName()+" cog) { super(cog); }");
            
            stream.println("   static class MainTask extends "+Task.class.getName()+"<Main> {");
            stream.println("      public MainTask(Main target) { super(null,target); }");
            stream.println("      public Object execute() { target.start(); return null;}");
            stream.println("      public java.lang.String methodName() { return \"start\"; }");
            stream.println("   }");

            // main block
            stream.print("   public void start() ");
            block.generateJava("   ",stream);
            stream.println("}");
            
            
        }
        
        for (Decl decl : getDecls()) {
            decl.generateJava(stream);
        }
    }

    public void Model.generateJava(PrintStream stream) {
        generateJava(null,stream);
    }
    
    abstract void Decl.generateJava(PrintStream stream);

    public void InterfaceDecl.generateJava(PrintStream stream) {
        stream.print("interface "+getName()+" extends "+ABSInterface.class.getName());
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        stream.println(" {");
        
        for (MethodSig s : getBodys()) {
      	  s.generateJava("   ", stream);
      	  stream.println(";");
        }
        
        stream.println("}");
    }
    
    public void MethodSig.generateJava(String indent, PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        
   	  stream.print(indent+"public ");
   	  getReturnType().generateJava(stream);
   	  stream.print(" "+getName());
   	  JavaGeneratorHelper.generateParams(stream, getParams());
    }
    
    public void ParamDecl.generateJava(PrintStream stream) {
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName());
    }

    public void ClassDecl.generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        
        stream.print("class "+getName()+" extends "+ABSObject.class.getName()+" implements "+ABSClass.class.getName());
        for (InterfaceTypeUse use : getImplementedInterfaceUses()) {
            stream.print(", "+use.getName());
        }
        
        ClassDecl d = null;
        stream.println(" {");
        
        for (ParamDecl p : getParams()) {
            stream.print("   private ");
            p.generateJava(stream);
            stream.println(";");
        }
        
        for (FieldDecl f : getFields()) {
      	  f.generateJava("   private ", stream);
        }
        
        // constructor
        stream.print("   public "+getName());
        JavaGeneratorHelper.generateParams(stream, getParams());
        stream.println(" {");
        for (ParamDecl p : getParams()) {
            stream.println("      this."+p.getName()+" = "+p.getName()+";");
        }
        if (hasInitBlock()) {
            getInitBlock().generateJava("      ",stream);
        }
        
        stream.println("       getCOG().objectCreated(this);");
        stream.println("   }");

	    stream.println("   protected ABSValue getFieldValue(java.lang.String __ABS_fieldName) throws java.lang.NoSuchFieldException {");
        for (ParamDecl p : getParams()) {
            stream.println("   if (\""+p.getName()+"\".equals(__ABS_fieldName)) return "+p.getName()+";");
        }
        
        for (FieldDecl f : getFields()) {
            stream.println("   if (\""+f.getName()+"\".equals(__ABS_fieldName)) return "+f.getName()+";");
        }
        stream.println("       return super.getFieldValue(__ABS_fieldName);");
	    	    	
	    stream.println("   }");  

		stream.println("   public java.lang.String getClassName() { return \""+getName()+"\"; }");

        // static constructor method for new cog C
        stream.print("   public static "+getName()+" __ABS_createNewCOG");
        JavaGeneratorHelper.generateParams(stream, getParams());
        stream.println(" {");
        stream.println("       final "+COG.class.getName()+" __ABS_cog = new "+COG.class.getName()+"("+getName()+".class);");
        stream.println("       final "+ABSThread.class.getName()+" __ABS_thread = "+ABSRuntime.class.getName()+".getCurrentThread();");
        stream.println("       final "+COG.class.getName()+" __ABS_oldCOG = "+ABSRuntime.class.getName()+".getCurrentCOG();");
        stream.println("       __ABS_thread.setCOG(__ABS_cog);");
        stream.println("       try { ");
        stream.print("            "+getName()+" __ABS_result = new "+getName());
        JavaGeneratorHelper.generateParamArgs(stream,getParams());
        stream.println(";");
        stream.println("          "+ABSRuntime.class.getName()+".cogCreated(__ABS_result);");
        stream.println("          return __ABS_result;");
        stream.println("       } finally {");
        stream.println("           __ABS_thread.setCOG(__ABS_oldCOG);");
        stream.println("       }");
        stream.println("   }");
        
        // methods
        for (MethodImpl m : getMethods()) {
      	  m.generateJava("   ", stream);
        }
        stream.println("}");
    }
    
    public void MethodImpl.generateJava(String indent, PrintStream stream) {
   	 getMethodSig().generateJava(indent,stream);
   	 boolean addReturn = false;
   	 if (getMethodSig().getReturnType().getType().isUnitType()) {
   		 if (getBlock().getNumStmt() == 0 ||
   		     (! (getBlock().getStmt(getBlock().getNumStmt()-1) instanceof ReturnStmt))) {
   			 addReturn = true;
   		 }
   	 }
   	 stream.println("{ __ABS_checkSameCOG(); ");
   	 getBlock().generateJava(indent, stream, addReturn);
     stream.print("}");
    }
    
    public void FieldDecl.generateJava(String indent, PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
   	 stream.print(indent);
   	 getAccess().generateJava(stream);
   	 stream.print(" "+getName());
   	 if (hasInitExp()) {
   	     stream.print(" = ");
   	     getInitExp().generateJava(stream);
   	 }
   	 stream.println(";");
    }
    

    public void DataTypeDecl.generateJava(PrintStream stream) {
        stream.print("abstract class "+getName());
        if (this instanceof ParametricDataTypeDecl) {
      	  ParametricDataTypeDecl pfd = (ParametricDataTypeDecl) this;
      	  JavaGeneratorHelper.generateTypeParameters(stream,pfd.getTypeParameters(), true);
        }
        
        stream.println(" extends ABSDataType {");
        stream.println("}");
        
        
        for (DataConstructor c : getDataConstructors()) {
          String constructorClassName = "ABSConstructor__"+c.getName();
      	  stream.print("class "+constructorClassName);
      	  if (this instanceof ParametricDataTypeDecl) {
      		  ParametricDataTypeDecl pfd = (ParametricDataTypeDecl) this;
      		  JavaGeneratorHelper.generateTypeParameters(stream,pfd.getTypeParameters(), true);
      	  }
      	  
      	  stream.print(" extends "+getName());
      	  if (this instanceof ParametricDataTypeDecl) {
      		  ParametricDataTypeDecl pfd = (ParametricDataTypeDecl) this;
      		  JavaGeneratorHelper.generateTypeParameters(stream,pfd.getTypeParameters(), false);
      	  }
      	  stream.println(" {");

      	  int i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.print("   public final ");
      		  stream.println(JavaBackend.getJavaType(u)+" arg"+i+";");
      		  i++;
      	  }
      	  
      	  stream.print("   public "+constructorClassName+"(");
           boolean first = true;
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  if (first)
      			  first = false;
      		  else 
      			  stream.print(",");
      		  stream.print("   final ");
      		  stream.print(JavaBackend.getJavaType(u)+" arg"+i);
      		  i++;
      	  }
           stream.println(") {");
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.println("this.arg"+i+" = arg"+i+";");
      		  i++;
      	  }
           stream.println("   }");
           
		   stream.print("   protected ABSValue[] getArgs() { return new ABSValue[] {");
		   i=0;
      	   for (DataTypeUse u : c.getConstructorArgs()) {
      	      if (i > 0)
      	      	stream.print(",");
      		  stream.print("this.arg"+i);
      		  i++;
      	   }
		   stream.println("};}");
           
           stream.println("   public java.lang.String getConstructorName() { return \""+c.getName()+"\" ;} ");
           
           // eq method
           stream.println("   public ABSBool eq(ABSValue o) {");
           stream.println("      if (! (o instanceof "+constructorClassName+")) return ABSBool.FALSE;");
           stream.println("      "+constructorClassName+" other = ("+constructorClassName+") o;");
           
      	  i = 0;
      	  for (DataTypeUse u : c.getConstructorArgs()) {
      		  stream.println("if (!this.arg"+i+".eq(other.arg"+i+").toBoolean()) return ABSBool.FALSE;");
      		  i++;
      	  }
           
           stream.println("      return ABSBool.TRUE;");
           stream.println("   }");
           
           // match method
           stream.println("   public boolean match("+PatternConstructor.class.getName()+" c, "+PatternBinding.class.getName()+" b) {");
           stream.println("       if (!c.constructorName.equals(\""+c.getName()+"\")) return false;");
           i = 0;
           for (DataTypeUse u : c.getConstructorArgs()) {
               stream.println("       if (!c.subpattern["+i+"].match(this.arg"+i+",b)) return false;");
               i++;
           }
           stream.println("      return true;");
           stream.println("   }");
           
           
           stream.println("}");
      	  
        }
        
        
    }
    
    public void FunctionDecl.generateJava(PrintStream stream) {
       if (getFunctionDef() instanceof BuiltinFunctionDef) 
           return;
        
   	  String className = "ABSFunction__"+getName();
        stream.print("final class "+className);
        stream.println(" implements ABSFunction {");
        stream.println("   private "+className+"() { }");
        stream.print("   public static ");
        if (this instanceof ParametricFunctionDecl) {
      	  ParametricFunctionDecl pfd = (ParametricFunctionDecl) this;
      	  JavaGeneratorHelper.generateTypeParameters(stream,pfd.getTypeParameters(), true);
        }
        
        getTypeUse().generateJava(stream);
        stream.print(" apply");
        JavaGeneratorHelper.generateParams(stream,getParams());
        stream.println(" {");
        stream.print("      return ");
        getFunctionDef().generateJava(stream);
        stream.println(";");
        stream.println("   }");
        stream.println("}");
    }

    public void FunctionDef.generateJava(PrintStream stream) { }

    public void ExpFunctionDef.generateJava(PrintStream stream) {
        getRhs().generateJava(stream);
    }
    
    public void BuiltinFunctionDef.generateJava(PrintStream stream) {
   	  stream.print("null");
    }
    
    public void TypeParameterDecl.generateJava(PrintStream stream) {
        // is never called
    }

    public void UnknownDecl.generateJava(PrintStream stream) {
        // is never called for type-correct programs
    }

    public void TypeSynDecl.generateJava(PrintStream stream) {
        // generate nothing as type synonyms do not appear in the Java outout
    }
    
    public void Block.generateJava(String indent, PrintStream stream) {
   	 generateJava(indent,stream,false);
    }    
    
    public void Block.generateJava(String indent, PrintStream stream, boolean addReturn) {
        stream.println(" {");
        String newIndent = incIndent(indent);
        for (Stmt stmt : getStmts()) {
            stmt.generateJava(newIndent,stream);
        }
        
        if (this instanceof MainBlock) {
            for (VarDecl v : getVars()) {
                if (v.getName().equals("testresult")) {
                    stream.println(indent+"System.out.println(\"__ABS_TESTRESULT=\"+testresult.toBoolean());");
                }
            }
        }
        
        if (addReturn) 
       	    stream.println(indent+"return ABSUnit.UNIT;"); // TODO: Fix Unit return
        stream.println(indent+"}");
    }
    
    public void VarDecl.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getAccess().generateJava(stream);
        stream.print(" "+getName()+" = ");
        
        if (hasInitExp()) {
            getInitExp().generateJava(stream);
        } else {
            stream.print("null");
        }
        stream.print(";");
        
    }
    
    
    /* 
     * STATEMENTS
     */
    
    public abstract void Stmt.generateJava(String indent, PrintStream stream);
    
    public void VarDeclStmt.generateJava(String indent, PrintStream stream) {
        getVarDecl().generateJava(indent,stream);
        stream.println();
    }
    
    public void AssignStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent);
        getVar().generateJava(stream);
        stream.print(" = ");
        getValue().generateJava(stream);
        stream.println(";");
    }

    public void AwaitStmt.generateJava(String indent, PrintStream stream) {
   	 stream.print(indent+JavaBackendConstants.ABSRUNTIME+".await(");
   	 getGuard().generateJava(stream);
   	 stream.println(");");
    }

    public void ExpressionStmt.generateJava(String indent, PrintStream stream) {
   	  stream.print(indent);
   	  getExp().generateJava(stream);
   	  stream.println(";");
    }

    public void IfStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"if (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getThen().generateJava(indent,stream);
        if (hasElse()) {
            stream.print(indent+"else");
            getElse().generateJava(indent,stream);
        }
    }

    public void ReturnStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"return ");
        getRetExp().generateJava(stream);
        stream.println(";");
    }

    public void SkipStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+";");
    }

    public void SuspendStmt.generateJava(String indent, PrintStream stream) {
   	 stream.println(indent+JavaBackendConstants.ABSRUNTIME+".suspend();");
    }

    public void WhileStmt.generateJava(String indent, PrintStream stream) {
        stream.print(indent+"while (");
        getCondition().generateJava(stream);
        stream.print(".toBoolean())");
        getBody().generateJava(indent,stream);
    }
    
    public void AssertStmt.generateJava(String indent, PrintStream stream) {
        //throw new NotImplementedYetException(this);
    }
    
    /*
     * GUARDS
     */
    
    public abstract void Guard.generateJava(PrintStream stream);

    public void AndGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.ANDGUARD+"(");
   	 getLeft().generateJava(stream);
   	 stream.print(",");
   	 getRight().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ClaimGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.CLAIMGUARD+"(");
   	 getVar().generateJava(stream);
   	 stream.print(")");
    }
    
    public void ExpGuard.generateJava(PrintStream stream) { 
   	 stream.print("new "+JavaBackendConstants.EXPGUARD+"() { public ABSBool evaluateExp() { return ");
   	 getPureExp().generateJava(stream);
   	 stream.print("; }}");
    }
    
    /* 
     * EXPRESSIONS
     */

    public abstract void Exp.generateJava(PrintStream stream);

	public void UnresolvedExp.generateJava(PrintStream stream) { throw new UnsupportedOperationException(); }

    public void AsyncCall.generateJava(PrintStream stream) {
        stream.print(ABSRuntime.class.getName()+".asyncCall(");
        String targetType = JavaBackend.getQualifiedString(getCallee().getType());
        stream.print("new "+Task.class.getName()+"<"+targetType+">(this,");
        getCallee().generateJava(stream);
        stream.print(") {");
        int i = 0;
        for (PureExp e : getParams()) {
            stream.print(JavaBackend.getQualifiedString(e.getType())+" arg"+i+";");
            i++;
        }
        
        stream.print(" protected ABSValue[] getArgs() { return new ABSValue[] { ");
        i = 0;
        for (PureExp e : getParams()) {
            if (i > 0) stream.print(",");
            stream.print("arg"+i);
            i++;
        }
        stream.print(" }; } ");
        
        stream.print("    public "+Task.class.getName()+"<?> init(");
        i = 0;
        for (PureExp e : getParams()) {
            if (i > 0) stream.print(",");
            stream.print(JavaBackend.getQualifiedString(e.getType())+" _arg"+i);
            i++;
        }
        stream.print(") {");
        for (i = 0; i < getNumParam(); i++) {
            stream.print("arg"+i+" = _arg"+i+";");
        }
        stream.print(" return this; }"); 
        
        stream.print(" public java.lang.String methodName() { return \""+getMethod()+"\"; }");
        
        stream.print(" public Object execute() {");
        stream.print(" return target."+getMethod()+"(");
        for (i = 0; i < getNumParam(); i++) {
            if (i > 0) stream.print(",");
            stream.print("arg"+i);
        }
        stream.print(");");
        stream.println(" }}");
        stream.print("     .init");
        JavaGeneratorHelper.generateArgs(stream,getParams());
        stream.print(")");
    }
    
    public void SyncCall.generateJava(PrintStream stream) {
        getCallee().generateJava(stream);
        stream.print("."+getMethod());
        JavaGeneratorHelper.generateArgs(stream,getParams());
    }

    public void GetExp.generateJava(PrintStream stream) {
        DataTypeType t = (DataTypeType) getPureExp().getType();
        // assume to be of type Fut<V>
        if (!t.isFutureType() || !t.hasTypeArgs())
            return;
        
        Type typeArg = t.getTypeArg(0);
        if (!(getParent() instanceof ExpressionStmt)) {
            stream.print("("+JavaBackend.getQualifiedString(typeArg)+")");
        }
   	  getPureExp().generateJava(stream);
        stream.print(".get()");
    }

    public void NewExp.generateJava(PrintStream stream) {
        if (getCog().equals("cog")) {
            stream.print(JavaBackend.getQualifiedString(getClassName())+".__ABS_createNewCOG");
        } else {
            stream.print("new "+JavaBackend.getQualifiedString(getClassName()));
        }
        JavaGeneratorHelper.generateArgs(stream,getParams());
    }

    public void DataTypeUse.generateJava(PrintStream stream) {
        stream.print(JavaBackend.getJavaType(this));
    }

    public void InterfaceTypeUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }

    public void TypeParameterUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }
    
    public void UnresolvedTypeUse.generateJava(PrintStream stream) {
        throw new JavaBackendException(this,"Type "+getName()+" is unresolved!");
    }

    public void FieldUse.generateJava(PrintStream stream) {
        stream.print("this."+getName());
    }

    public void VarUse.generateJava(PrintStream stream) {
        stream.print(getName());
    }
    
    public void CaseExp.generateJava(PrintStream stream) {
       stream.print("new Case<");
       String varType = JavaBackend.getQualifiedString(getExpr().getType());
       stream.print(varType);
       stream.print(',');
       String expType = JavaBackend.getQualifiedString(getType());
       stream.println(expType+">() {");
       stream.println("      public "+expType+" of(final "+varType+" __ABS_value) { ");
       int i = 0;
       for (CaseBranch b : getBranchs()) {
           String bindingName = "__ABS_binding"+i;
          stream.print("final "+PatternBinding.class.getName()+" "+bindingName+" = ");
          Pattern pattern = b.getLeft();
          pattern.generateJava(stream);
          stream.println(".match(__ABS_value);");
      	  stream.print("if ("+bindingName+" != null) ");
      	  stream.println("return new Object() {");
      	  stream.print("  public "+expType+" execute(");
          ArrayList<PatternVar> freeVars = pattern.getFreeVars();
          boolean first = true;
          for (PatternVar var : freeVars) {
              if (first) first = false;
              else stream.print(",");
              stream.print("final "+JavaBackend.getQualifiedString(var.getType()));
              stream.print(" "+var.getVar().getName());
          }
          stream.print(") { return ");
          b.getRight().generateJava(stream);
          stream.print("; }");
      	  stream.print("}.execute(");
          first = true;
          for (int j = 0; j < freeVars.size(); j++) {
              if (first) first = false;
              else stream.print(",");
              stream.print("("); 
              stream.print(JavaBackend.getQualifiedString(freeVars.get(j).getType()));
              stream.print(") ");
              stream.print(bindingName+".getBinding("+j+")");
          }
      	  stream.println(");");
      	  i++;
       }
       stream.println("throw new "+UnmatchedCaseException.class.getName()+"();"); // TODO: throw UnmatchedCaseException
       stream.print("}}.of(");
       getExpr().generateJava(stream);
       stream.print(")");
    }
       
    public abstract void Pattern.generateJava(PrintStream stream);
    
    public void ConstructorPattern.generateJava(PrintStream stream) {
        stream.print("new "+PatternConstructor.class.getName()+"(\""+getConstructor()+"\"");
        for (Pattern p : getParams()) {
            stream.print(",");
            p.generateJava(stream);
        }
        stream.print(")");
    }
    
    public void PatternVar.generateJava(PrintStream stream) {
        stream.print("new "+PatternVariable.class.getName()+"(\""+getVar().getName()+"\")");
    }
    
    public void UnderscorePattern.generateJava(PrintStream stream) {
        stream.print("new "+AnyPattern.class.getName()+"()");
    }
    
    public void PatternVarUse.generateJava(PrintStream stream) {
        stream.print("new "+PatternValue.class.getName()+"("+getName()+")");
    }
    
    public void LiteralPattern.generateJava(PrintStream stream) {
   	  stream.print("new "+PatternValue.class.getName()+"(");
   	  getLiteral().generateJava(stream);
   	  stream.print(")");
    }
    
    public void UnresolvedPattern.generateJava(PrintStream stream) { }
 
    public void FnApp.generateJava(PrintStream stream) {
   	 
   	 // Have to explicitly type the call due to a bug in the JastAdd Java
   	 // compiler that generates wrong code otherwise.
   	 FunctionDecl d = (FunctionDecl)getDecl();
     
     if (d.getFunctionDef() instanceof BuiltinFunctionDef) {
         JavaGeneratorHelper.generateBuiltInFnApp(stream,this);
         return;
     }
     
     stream.print("ABSFunction__"+getName()+".");
     Type declaredResultType = d.getTypeUse().getType();
     if (d instanceof ParametricFunctionDecl) {
         ParametricFunctionDecl funDecl = (ParametricFunctionDecl) d;
         Map<TypeParameter, Type> typeBinding = TypeCheckerHelper.getTypeParamBindingFromParamDecl(funDecl.getParams(),getParams());

         StringBuffer buf = new StringBuffer();
         buf.append("<");
         boolean first = true;
         for (TypeParameterDecl tp : funDecl.getTypeParameters()) {
             Type t = typeBinding.get((TypeParameter)tp.getType());
             if (first) first = false;
             else buf.append(",");
             if (t == null) {
                 buf = null;
                 break;
             } else if (t.isBoundedType() && !((BoundedType)t).hasBoundType()) {
                 buf = null;
                 break;
             } else {
                 buf.append(JavaBackend.getQualifiedString(t));
             }
         }
         
         if (buf != null) {
             stream.print(buf.toString());
             stream.print(">");
         }
     } 
     
   	 stream.print("apply");
   	 JavaGeneratorHelper.generateArgs(stream,getParams());
   	 
    }

    public void DataConstructorExp.generateJava(PrintStream stream) {
        DataConstructor c = lookupDataConstructor(this.getConstructor());
        DataTypeDecl decl = c.getDecl();
        String name = decl.getName();
        if (name.equals("Bool")) {
            stream.print(ABSBool.class.getName());
            stream.print(".fromBoolean(");
            stream.print(getConstructor().getLastName());
            stream.print(")");
        } else if (name.equals("Unit")) {
            stream.print("ABSUnit.UNIT");
        } else {
      	  stream.print("new ABSConstructor__"+getConstructor());
      	  if (decl instanceof ParametricDataTypeDecl) {
      		  DataTypeType type = (DataTypeType) this.getType();
      		  if (type.hasTypeArgs()) {
      			  /*
      			  stream.print("<");
      			  boolean first = true;
      			  for (Type typeArg : type.getTypeArgs()) {
      				  if (first) first = false;
      				  else stream.print(",");
      				  JavaBackend.getQualifiedString(typeArg);
      			  }
      			  stream.print(">");
      			  */
      		  }
      	  }
      	  JavaGeneratorHelper.generateArgs(stream,getParams());
        }
    }

    public void LetExp.generateJava(PrintStream stream) {
        stream.print("new Let<");
        String varType = JavaBackend.getQualifiedString(getVar().getType());
        stream.print(varType);
        stream.print(',');
        String expType = JavaBackend.getQualifiedString(getExp().getType());
        stream.print(expType+">() { public "+expType);
        stream.print(" in(final "+varType+" "+getVar().getName()+") { ");
        stream.print("return ");
        getExp().generateJava(stream);
        stream.print("; }}.in(");
        getVal().generateJava(stream);
        stream.print(")");
        
    }

    public void IntLiteral.generateJava(PrintStream stream) {
        stream.print(ABSInteger.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void StringLiteral.generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        stream.print(getContent());
        stream.print("\")");
    }

    public void NullExp.generateJava(PrintStream stream) {
        stream.print("null");
    }

    public void ThisExp.generateJava(PrintStream stream) {
        stream.print("this");
    }

    public void MinusExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void NegExp.generateJava(PrintStream stream) {
        getOperand().generateJava(stream);
        stream.print(".negate()");
    }

    public void AddAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".add(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void SubAddExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".subtract(");
        getRight().generateJava(stream);
        stream.print(")");
    }

    public void DivMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".divide(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void ModMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".mod(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void MultMultExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".multiply(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void AndBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".and(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void OrBoolExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".or(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void EqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".eq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void NotEqExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".notEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gtEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void GTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".gt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTEQExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".ltEq(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public void LTExp.generateJava(PrintStream stream) {
        getLeft().generateJava(stream);
        stream.print(".lt(");
        getRight().generateJava(stream);
        stream.print(")");
    }
    
    public String ASTNode.incIndent(String indent) {
        return indent+"   ";
    }
    
    
    
}
