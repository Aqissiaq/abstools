data Bool = True | False;

data Int ;

data Unit = Unit ;

data String ;

data Fut<A> ;

data Opt<A> = None | Some(A) ;

def Bool isSome<A>(Opt<A> val) =
  case val {
    None => False ;
    Some(x) => True ;
  } ;

def A fromSome<A>(Opt<A> val) =
  case val {
    Some(x) => x ;
  } ;

data Either<A,B> = Left(A) | Right(B) ;

def A left<A,B>(Either<A,B> e) =
  case e {
     Left(x) => x;
  } ;

def B right<A,B>(Either<A,B> e) =
  case e {
     Right(x) => x;
  } ;
  
data List<A> = Nil | Cons(A, List<A>);
def List<A> list<A>(List<A> l) = l; // constructor helper

def Bool isEmpty<A>(List<A> list) = list == Nil;

def A head<A>(List<A> list) = case list { Cons(p,l) => p ; };

def List<A> tail<A>(List<A> list) = case list { Cons(p,l) => l ; };

def Int length<A>(List<A> list) =
  case list {
    Nil => 0 ;
    Cons(p, l) => 1 + length(l) ;
  }; 

def B nth<B>(List<B> list, Int n) =
  case n {   
    0 => head(list) ;
    _ => nth(tail(list), n-1) ;
  };

def List<A> concatenate<A>(List<A> list1, List<A> list2) =
  case list1 {
    Nil => list2 ;
    Cons(head, tail) =>  Cons(head, concatenate(tail, list2)) ;
  };

def List<A> append<A>(List<A> list, A p) = 
  concatenate(list, Cons(p, Nil));
