import org.abs_models.frontend.typechecker.nullable.NullableInfo;
import org.abs_models.frontend.typechecker.nullable.SimpleSet;

aspect NonNull {
  // == NonNull in ==
  /* coll is broken right now
   * coll SimpleSet<VarOrFieldDecl> Stmt.nonNull_in() circular [SimpleSet.<VarOrFieldDecl>empty()] with add;
   * Stmt contributes nonNull_out() to Stmt.nonNull_in() for each succ();
   */
  syn SimpleSet<VarOrFieldDecl> Stmt.nonNull_in() circular [SimpleSet.<VarOrFieldDecl>empty()] {
    SimpleSet<VarOrFieldDecl> s = new SimpleSet();
    for (Stmt stmt : pred()) {
      s = s.union(stmt.nonNull_out());
    }
    return s;
  }
  

  // == NonNull out ==
  // For most stmts out = in
  syn SimpleSet<VarOrFieldDecl> Stmt.nonNull_out() = nonNull_in();

  eq VarDeclStmt.nonNull_out() {
    VarDecl d = getVarDecl();

    if (!(d.getType().isReferenceType())) {
      return nonNull_in();
    }

    if (!d.hasInitExp()) {
      // Because we have no init, the value is null
      return nonNull_in();
    }

    // TODO: finish
    return nonNull_in().union(d);
  }

  // == Exp ==
  syn boolean Expr.nonNull(SimpleSet<VarOrFieldDecl> set);

  // TODO: refine using annotations
  eq Call.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  // TODO: refine using annotations
  eq GetExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  eq NewExp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  // TODO: refine using annotations (Is that even possible?)
  eq OriginalCall.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  // TODO
  eq Access.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  eq AsExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  // Binary expr can't be a reference
  eq Binary.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  // TODO
  eq CaseExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  // Can't be a reference
  eq DataConstructorExp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  // Can't be a reference
  eq FnApp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  // TODO
  eq IfExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  eq ImplementsExp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  // TODO
  eq LetExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  eq LiteralExp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  eq NullExp.nonNull(SimpleSet<VarOrFieldDecl> set) = false;

  eq ParFnApp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  eq ThisExp.nonNull(SimpleSet<VarOrFieldDecl> set) = true;

  eq Unary.nonNull(SimpleSet<VarOrFieldDecl> set) = true;
}